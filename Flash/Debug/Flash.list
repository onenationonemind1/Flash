
Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f18  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08004fd8  08004fd8  00005fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051dc  080051dc  0000705c  2**0
                  CONTENTS
  4 .ARM          00000000  080051dc  080051dc  0000705c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051dc  080051dc  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051dc  080051dc  000061dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051e0  080051e0  000061e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080051e4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000060  08005240  00007060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  08005240  000073d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fbc7  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000293f  00000000  00000000  00016c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  00019590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b2c  00000000  00000000  0001a3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000148c6  00000000  00000000  0001aef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a3c  00000000  00000000  0002f7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a08c  00000000  00000000  000421f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc282  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003754  00000000  00000000  000bc2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000bfa1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004fc0 	.word	0x08004fc0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08004fc0 	.word	0x08004fc0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <WriteMultiDataToFlash>:
#include "main.h"

HAL_StatusTypeDef WriteMultiDataToFlash(uint16_t *data, uint16_t count)
{
 8000418:	b5b0      	push	{r4, r5, r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	000a      	movs	r2, r1
 8000422:	1cbb      	adds	r3, r7, #2
 8000424:	801a      	strh	r2, [r3, #0]
    HAL_FLASH_Unlock();
 8000426:	f001 fb3d 	bl	8001aa4 <HAL_FLASH_Unlock>

    // 페이지 지우기
    FLASH_EraseInitTypeDef EraseInit;
    EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 800042a:	2110      	movs	r1, #16
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
    EraseInit.PageAddress = DATA_FLASH_PAGE_ADDR;
 8000432:	187b      	adds	r3, r7, r1
 8000434:	4a23      	ldr	r2, [pc, #140]	@ (80004c4 <WriteMultiDataToFlash+0xac>)
 8000436:	605a      	str	r2, [r3, #4]
    EraseInit.NbPages = 1;
 8000438:	187b      	adds	r3, r7, r1
 800043a:	2201      	movs	r2, #1
 800043c:	609a      	str	r2, [r3, #8]

    uint32_t PageError;
    if (HAL_FLASHEx_Erase(&EraseInit, &PageError) != HAL_OK)
 800043e:	230c      	movs	r3, #12
 8000440:	18fa      	adds	r2, r7, r3
 8000442:	187b      	adds	r3, r7, r1
 8000444:	0011      	movs	r1, r2
 8000446:	0018      	movs	r0, r3
 8000448:	f001 fbec 	bl	8001c24 <HAL_FLASHEx_Erase>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d003      	beq.n	8000458 <WriteMultiDataToFlash+0x40>
    {
        HAL_FLASH_Lock();
 8000450:	f001 fb4e 	bl	8001af0 <HAL_FLASH_Lock>
        return HAL_ERROR;
 8000454:	2301      	movs	r3, #1
 8000456:	e030      	b.n	80004ba <WriteMultiDataToFlash+0xa2>
    }

    // 여러 데이터 쓰기
    for (uint16_t i = 0; i < count; i++)
 8000458:	231e      	movs	r3, #30
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	2200      	movs	r2, #0
 800045e:	801a      	strh	r2, [r3, #0]
 8000460:	e021      	b.n	80004a6 <WriteMultiDataToFlash+0x8e>
    {
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
                              DATA_FLASH_PAGE_ADDR + (i * 2), // 2바이트씩 증가
 8000462:	221e      	movs	r2, #30
 8000464:	18bb      	adds	r3, r7, r2
 8000466:	881b      	ldrh	r3, [r3, #0]
 8000468:	4917      	ldr	r1, [pc, #92]	@ (80004c8 <WriteMultiDataToFlash+0xb0>)
 800046a:	468c      	mov	ip, r1
 800046c:	4463      	add	r3, ip
 800046e:	005b      	lsls	r3, r3, #1
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8000470:	0019      	movs	r1, r3
                              data[i]) != HAL_OK)
 8000472:	18bb      	adds	r3, r7, r2
 8000474:	881b      	ldrh	r3, [r3, #0]
 8000476:	005b      	lsls	r3, r3, #1
 8000478:	687a      	ldr	r2, [r7, #4]
 800047a:	18d3      	adds	r3, r2, r3
 800047c:	881b      	ldrh	r3, [r3, #0]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800047e:	001c      	movs	r4, r3
 8000480:	2300      	movs	r3, #0
 8000482:	001d      	movs	r5, r3
 8000484:	0022      	movs	r2, r4
 8000486:	002b      	movs	r3, r5
 8000488:	2001      	movs	r0, #1
 800048a:	f001 fa75 	bl	8001978 <HAL_FLASH_Program>
 800048e:	1e03      	subs	r3, r0, #0
 8000490:	d003      	beq.n	800049a <WriteMultiDataToFlash+0x82>
        {
            HAL_FLASH_Lock();
 8000492:	f001 fb2d 	bl	8001af0 <HAL_FLASH_Lock>
            return HAL_ERROR;
 8000496:	2301      	movs	r3, #1
 8000498:	e00f      	b.n	80004ba <WriteMultiDataToFlash+0xa2>
    for (uint16_t i = 0; i < count; i++)
 800049a:	211e      	movs	r1, #30
 800049c:	187b      	adds	r3, r7, r1
 800049e:	881a      	ldrh	r2, [r3, #0]
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	3201      	adds	r2, #1
 80004a4:	801a      	strh	r2, [r3, #0]
 80004a6:	231e      	movs	r3, #30
 80004a8:	18fa      	adds	r2, r7, r3
 80004aa:	1cbb      	adds	r3, r7, #2
 80004ac:	8812      	ldrh	r2, [r2, #0]
 80004ae:	881b      	ldrh	r3, [r3, #0]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d3d6      	bcc.n	8000462 <WriteMultiDataToFlash+0x4a>
        }
    }
    HAL_FLASH_Lock();
 80004b4:	f001 fb1c 	bl	8001af0 <HAL_FLASH_Lock>
    return HAL_OK;
 80004b8:	2300      	movs	r3, #0
}
 80004ba:	0018      	movs	r0, r3
 80004bc:	46bd      	mov	sp, r7
 80004be:	b008      	add	sp, #32
 80004c0:	bdb0      	pop	{r4, r5, r7, pc}
 80004c2:	46c0      	nop			@ (mov r8, r8)
 80004c4:	0800f800 	.word	0x0800f800
 80004c8:	04007c00 	.word	0x04007c00

080004cc <ReadDataFromFlashAt>:

uint16_t ReadDataFromFlashAt(uint16_t index)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	0002      	movs	r2, r0
 80004d4:	1dbb      	adds	r3, r7, #6
 80004d6:	801a      	strh	r2, [r3, #0]
    return *(__IO uint16_t *)(DATA_FLASH_PAGE_ADDR + (index * 2));
 80004d8:	1dbb      	adds	r3, r7, #6
 80004da:	881b      	ldrh	r3, [r3, #0]
 80004dc:	4a04      	ldr	r2, [pc, #16]	@ (80004f0 <ReadDataFromFlashAt+0x24>)
 80004de:	4694      	mov	ip, r2
 80004e0:	4463      	add	r3, ip
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	b29b      	uxth	r3, r3
}
 80004e8:	0018      	movs	r0, r3
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b002      	add	sp, #8
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	04007c00 	.word	0x04007c00

080004f4 <multiDatawrite>:

void multiDatawrite(AM1002_Data_t data)
{
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b096      	sub	sp, #88	@ 0x58
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	6018      	str	r0, [r3, #0]
 80004fe:	6059      	str	r1, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
    uint16_t multiData[6] = {data.tvoc, data.pm1_0, data.pm2_5, data.pm10, (uint16_t)data.temperature, data.humidity};
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	881a      	ldrh	r2, [r3, #0]
 8000506:	2144      	movs	r1, #68	@ 0x44
 8000508:	187b      	adds	r3, r7, r1
 800050a:	801a      	strh	r2, [r3, #0]
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	885a      	ldrh	r2, [r3, #2]
 8000510:	187b      	adds	r3, r7, r1
 8000512:	805a      	strh	r2, [r3, #2]
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	889a      	ldrh	r2, [r3, #4]
 8000518:	187b      	adds	r3, r7, r1
 800051a:	809a      	strh	r2, [r3, #4]
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	88da      	ldrh	r2, [r3, #6]
 8000520:	187b      	adds	r3, r7, r1
 8000522:	80da      	strh	r2, [r3, #6]
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2208      	movs	r2, #8
 8000528:	5e9b      	ldrsh	r3, [r3, r2]
 800052a:	b29a      	uxth	r2, r3
 800052c:	187b      	adds	r3, r7, r1
 800052e:	811a      	strh	r2, [r3, #8]
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	895a      	ldrh	r2, [r3, #10]
 8000534:	187b      	adds	r3, r7, r1
 8000536:	815a      	strh	r2, [r3, #10]
    if (WriteMultiDataToFlash(multiData, 6) == HAL_OK)
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2106      	movs	r1, #6
 800053c:	0018      	movs	r0, r3
 800053e:	f7ff ff6b 	bl	8000418 <WriteMultiDataToFlash>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d12d      	bne.n	80005a2 <multiDatawrite+0xae>
    {
        HAL_UART_Transmit(&huart3, (uint8_t *)"Data write!!\r\n", 20, HAL_MAX_DELAY);
 8000546:	2301      	movs	r3, #1
 8000548:	425b      	negs	r3, r3
 800054a:	491b      	ldr	r1, [pc, #108]	@ (80005b8 <multiDatawrite+0xc4>)
 800054c:	481b      	ldr	r0, [pc, #108]	@ (80005bc <multiDatawrite+0xc8>)
 800054e:	2214      	movs	r2, #20
 8000550:	f003 f812 	bl	8003578 <HAL_UART_Transmit>

        for (int i = 0; i < 6; i++)
 8000554:	2300      	movs	r3, #0
 8000556:	657b      	str	r3, [r7, #84]	@ 0x54
 8000558:	e01f      	b.n	800059a <multiDatawrite+0xa6>
        {
            uint16_t readData = ReadDataFromFlashAt(i);
 800055a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800055c:	b29b      	uxth	r3, r3
 800055e:	2552      	movs	r5, #82	@ 0x52
 8000560:	197c      	adds	r4, r7, r5
 8000562:	0018      	movs	r0, r3
 8000564:	f7ff ffb2 	bl	80004cc <ReadDataFromFlashAt>
 8000568:	0003      	movs	r3, r0
 800056a:	8023      	strh	r3, [r4, #0]
            char debug_msg[50];
            sprintf(debug_msg, "Read[%d]: 0x%02X\r\n", i, readData);
 800056c:	197b      	adds	r3, r7, r5
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000572:	4913      	ldr	r1, [pc, #76]	@ (80005c0 <multiDatawrite+0xcc>)
 8000574:	2410      	movs	r4, #16
 8000576:	1938      	adds	r0, r7, r4
 8000578:	f004 f884 	bl	8004684 <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t *)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 800057c:	193b      	adds	r3, r7, r4
 800057e:	0018      	movs	r0, r3
 8000580:	f7ff fdc2 	bl	8000108 <strlen>
 8000584:	0003      	movs	r3, r0
 8000586:	b29a      	uxth	r2, r3
 8000588:	2301      	movs	r3, #1
 800058a:	425b      	negs	r3, r3
 800058c:	1939      	adds	r1, r7, r4
 800058e:	480b      	ldr	r0, [pc, #44]	@ (80005bc <multiDatawrite+0xc8>)
 8000590:	f002 fff2 	bl	8003578 <HAL_UART_Transmit>
        for (int i = 0; i < 6; i++)
 8000594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000596:	3301      	adds	r3, #1
 8000598:	657b      	str	r3, [r7, #84]	@ 0x54
 800059a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800059c:	2b05      	cmp	r3, #5
 800059e:	dddc      	ble.n	800055a <multiDatawrite+0x66>
    }
    else
    {
        HAL_UART_Transmit(&huart3, (uint8_t *)"Data write fail!!\r\n", 20, HAL_MAX_DELAY);
    }
}
 80005a0:	e006      	b.n	80005b0 <multiDatawrite+0xbc>
        HAL_UART_Transmit(&huart3, (uint8_t *)"Data write fail!!\r\n", 20, HAL_MAX_DELAY);
 80005a2:	2301      	movs	r3, #1
 80005a4:	425b      	negs	r3, r3
 80005a6:	4907      	ldr	r1, [pc, #28]	@ (80005c4 <multiDatawrite+0xd0>)
 80005a8:	4804      	ldr	r0, [pc, #16]	@ (80005bc <multiDatawrite+0xc8>)
 80005aa:	2214      	movs	r2, #20
 80005ac:	f002 ffe4 	bl	8003578 <HAL_UART_Transmit>
}
 80005b0:	46c0      	nop			@ (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b016      	add	sp, #88	@ 0x58
 80005b6:	bdb0      	pop	{r4, r5, r7, pc}
 80005b8:	08004fd8 	.word	0x08004fd8
 80005bc:	2000014c 	.word	0x2000014c
 80005c0:	08004fe8 	.word	0x08004fe8
 80005c4:	08004ffc 	.word	0x08004ffc

080005c8 <multiDataread>:

AM1002_Data_t multiDataread(void)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b097      	sub	sp, #92	@ 0x5c
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
    AM1002_Data_t data;
    uint16_t readData[6];

    for (int i = 0; i < 6; i++)
 80005d0:	2300      	movs	r3, #0
 80005d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80005d4:	e02b      	b.n	800062e <multiDataread+0x66>
    {
        readData[i] = ReadDataFromFlashAt(i);
 80005d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80005d8:	b29b      	uxth	r3, r3
 80005da:	0018      	movs	r0, r3
 80005dc:	f7ff ff76 	bl	80004cc <ReadDataFromFlashAt>
 80005e0:	0003      	movs	r3, r0
 80005e2:	0019      	movs	r1, r3
 80005e4:	243c      	movs	r4, #60	@ 0x3c
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80005ea:	0052      	lsls	r2, r2, #1
 80005ec:	52d1      	strh	r1, [r2, r3]
        HAL_UART_Transmit(&huart3, (uint8_t *)"Read Data: ", 11, HAL_MAX_DELAY);
 80005ee:	2301      	movs	r3, #1
 80005f0:	425b      	negs	r3, r3
 80005f2:	4927      	ldr	r1, [pc, #156]	@ (8000690 <multiDataread+0xc8>)
 80005f4:	4827      	ldr	r0, [pc, #156]	@ (8000694 <multiDataread+0xcc>)
 80005f6:	220b      	movs	r2, #11
 80005f8:	f002 ffbe 	bl	8003578 <HAL_UART_Transmit>
        char debug_msg[50];
        sprintf(debug_msg, "[%d] 0x%04X ", i, readData[i]); // 수정된 부분
 80005fc:	193b      	adds	r3, r7, r4
 80005fe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000600:	0052      	lsls	r2, r2, #1
 8000602:	5ad3      	ldrh	r3, [r2, r3]
 8000604:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000606:	4924      	ldr	r1, [pc, #144]	@ (8000698 <multiDataread+0xd0>)
 8000608:	2408      	movs	r4, #8
 800060a:	1938      	adds	r0, r7, r4
 800060c:	f004 f83a 	bl	8004684 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t *)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8000610:	193b      	adds	r3, r7, r4
 8000612:	0018      	movs	r0, r3
 8000614:	f7ff fd78 	bl	8000108 <strlen>
 8000618:	0003      	movs	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	2301      	movs	r3, #1
 800061e:	425b      	negs	r3, r3
 8000620:	1939      	adds	r1, r7, r4
 8000622:	481c      	ldr	r0, [pc, #112]	@ (8000694 <multiDataread+0xcc>)
 8000624:	f002 ffa8 	bl	8003578 <HAL_UART_Transmit>
    for (int i = 0; i < 6; i++)
 8000628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800062a:	3301      	adds	r3, #1
 800062c:	657b      	str	r3, [r7, #84]	@ 0x54
 800062e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000630:	2b05      	cmp	r3, #5
 8000632:	ddd0      	ble.n	80005d6 <multiDataread+0xe>
    }
    HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 8000634:	2301      	movs	r3, #1
 8000636:	425b      	negs	r3, r3
 8000638:	4918      	ldr	r1, [pc, #96]	@ (800069c <multiDataread+0xd4>)
 800063a:	4816      	ldr	r0, [pc, #88]	@ (8000694 <multiDataread+0xcc>)
 800063c:	2202      	movs	r2, #2
 800063e:	f002 ff9b 	bl	8003578 <HAL_UART_Transmit>

    data.tvoc = readData[0];
 8000642:	203c      	movs	r0, #60	@ 0x3c
 8000644:	183b      	adds	r3, r7, r0
 8000646:	881a      	ldrh	r2, [r3, #0]
 8000648:	2148      	movs	r1, #72	@ 0x48
 800064a:	187b      	adds	r3, r7, r1
 800064c:	801a      	strh	r2, [r3, #0]
    data.pm1_0 = readData[1];
 800064e:	183b      	adds	r3, r7, r0
 8000650:	885a      	ldrh	r2, [r3, #2]
 8000652:	187b      	adds	r3, r7, r1
 8000654:	805a      	strh	r2, [r3, #2]
    data.pm2_5 = readData[2];
 8000656:	183b      	adds	r3, r7, r0
 8000658:	889a      	ldrh	r2, [r3, #4]
 800065a:	187b      	adds	r3, r7, r1
 800065c:	809a      	strh	r2, [r3, #4]
    data.pm10 = readData[3];
 800065e:	183b      	adds	r3, r7, r0
 8000660:	88da      	ldrh	r2, [r3, #6]
 8000662:	187b      	adds	r3, r7, r1
 8000664:	80da      	strh	r2, [r3, #6]
    data.temperature = readData[4];
 8000666:	183b      	adds	r3, r7, r0
 8000668:	891b      	ldrh	r3, [r3, #8]
 800066a:	b21a      	sxth	r2, r3
 800066c:	187b      	adds	r3, r7, r1
 800066e:	811a      	strh	r2, [r3, #8]
    data.humidity = readData[5];
 8000670:	183b      	adds	r3, r7, r0
 8000672:	895a      	ldrh	r2, [r3, #10]
 8000674:	187b      	adds	r3, r7, r1
 8000676:	815a      	strh	r2, [r3, #10]

    return data;
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	187b      	adds	r3, r7, r1
 800067c:	0010      	movs	r0, r2
 800067e:	0019      	movs	r1, r3
 8000680:	230c      	movs	r3, #12
 8000682:	001a      	movs	r2, r3
 8000684:	f004 f852 	bl	800472c <memcpy>
}
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	46bd      	mov	sp, r7
 800068c:	b017      	add	sp, #92	@ 0x5c
 800068e:	bd90      	pop	{r4, r7, pc}
 8000690:	08005010 	.word	0x08005010
 8000694:	2000014c 	.word	0x2000014c
 8000698:	0800501c 	.word	0x0800501c
 800069c:	0800502c 	.word	0x0800502c

080006a0 <PrintCalibrationData>:

void PrintCalibrationData(AM1002_Data_t data)
{
 80006a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006a2:	b093      	sub	sp, #76	@ 0x4c
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	6018      	str	r0, [r3, #0]
 80006aa:	6059      	str	r1, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
    char buffer[50];

    // TVOC는 그대로 출력
    sprintf(buffer, "TVOC: %d ppb\r\n", data.tvoc);
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	001a      	movs	r2, r3
 80006b4:	4954      	ldr	r1, [pc, #336]	@ (8000808 <PrintCalibrationData+0x168>)
 80006b6:	2510      	movs	r5, #16
 80006b8:	197b      	adds	r3, r7, r5
 80006ba:	0018      	movs	r0, r3
 80006bc:	f003 ffe2 	bl	8004684 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80006c0:	197b      	adds	r3, r7, r5
 80006c2:	0018      	movs	r0, r3
 80006c4:	f7ff fd20 	bl	8000108 <strlen>
 80006c8:	0003      	movs	r3, r0
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	2301      	movs	r3, #1
 80006ce:	425b      	negs	r3, r3
 80006d0:	1979      	adds	r1, r7, r5
 80006d2:	484e      	ldr	r0, [pc, #312]	@ (800080c <PrintCalibrationData+0x16c>)
 80006d4:	f002 ff50 	bl	8003578 <HAL_UART_Transmit>

    // PM 값들도 그대로 출력
    sprintf(buffer, "PM1.0: %d ug/m3\r\n", data.pm1_0);
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	885b      	ldrh	r3, [r3, #2]
 80006dc:	001a      	movs	r2, r3
 80006de:	494c      	ldr	r1, [pc, #304]	@ (8000810 <PrintCalibrationData+0x170>)
 80006e0:	197b      	adds	r3, r7, r5
 80006e2:	0018      	movs	r0, r3
 80006e4:	f003 ffce 	bl	8004684 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80006e8:	197b      	adds	r3, r7, r5
 80006ea:	0018      	movs	r0, r3
 80006ec:	f7ff fd0c 	bl	8000108 <strlen>
 80006f0:	0003      	movs	r3, r0
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	2301      	movs	r3, #1
 80006f6:	425b      	negs	r3, r3
 80006f8:	1979      	adds	r1, r7, r5
 80006fa:	4844      	ldr	r0, [pc, #272]	@ (800080c <PrintCalibrationData+0x16c>)
 80006fc:	f002 ff3c 	bl	8003578 <HAL_UART_Transmit>

    sprintf(buffer, "PM2.5: %d ug/m3\r\n", data.pm2_5);
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	889b      	ldrh	r3, [r3, #4]
 8000704:	001a      	movs	r2, r3
 8000706:	4943      	ldr	r1, [pc, #268]	@ (8000814 <PrintCalibrationData+0x174>)
 8000708:	197b      	adds	r3, r7, r5
 800070a:	0018      	movs	r0, r3
 800070c:	f003 ffba 	bl	8004684 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000710:	197b      	adds	r3, r7, r5
 8000712:	0018      	movs	r0, r3
 8000714:	f7ff fcf8 	bl	8000108 <strlen>
 8000718:	0003      	movs	r3, r0
 800071a:	b29a      	uxth	r2, r3
 800071c:	2301      	movs	r3, #1
 800071e:	425b      	negs	r3, r3
 8000720:	1979      	adds	r1, r7, r5
 8000722:	483a      	ldr	r0, [pc, #232]	@ (800080c <PrintCalibrationData+0x16c>)
 8000724:	f002 ff28 	bl	8003578 <HAL_UART_Transmit>

    sprintf(buffer, "PM10: %d ug/m3\r\n", data.pm10);
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	88db      	ldrh	r3, [r3, #6]
 800072c:	001a      	movs	r2, r3
 800072e:	493a      	ldr	r1, [pc, #232]	@ (8000818 <PrintCalibrationData+0x178>)
 8000730:	197b      	adds	r3, r7, r5
 8000732:	0018      	movs	r0, r3
 8000734:	f003 ffa6 	bl	8004684 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000738:	197b      	adds	r3, r7, r5
 800073a:	0018      	movs	r0, r3
 800073c:	f7ff fce4 	bl	8000108 <strlen>
 8000740:	0003      	movs	r3, r0
 8000742:	b29a      	uxth	r2, r3
 8000744:	2301      	movs	r3, #1
 8000746:	425b      	negs	r3, r3
 8000748:	1979      	adds	r1, r7, r5
 800074a:	4830      	ldr	r0, [pc, #192]	@ (800080c <PrintCalibrationData+0x16c>)
 800074c:	f002 ff14 	bl	8003578 <HAL_UART_Transmit>

    // 온도는 10으로 나누어 소수점 표시
    int16_t temp_whole = data.temperature / 10;
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2208      	movs	r2, #8
 8000754:	5e9b      	ldrsh	r3, [r3, r2]
 8000756:	2646      	movs	r6, #70	@ 0x46
 8000758:	19bc      	adds	r4, r7, r6
 800075a:	210a      	movs	r1, #10
 800075c:	0018      	movs	r0, r3
 800075e:	f7ff fd6f 	bl	8000240 <__divsi3>
 8000762:	0003      	movs	r3, r0
 8000764:	8023      	strh	r3, [r4, #0]
    uint16_t temp_decimal = abs(data.temperature % 10);
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2208      	movs	r2, #8
 800076a:	5e9b      	ldrsh	r3, [r3, r2]
 800076c:	210a      	movs	r1, #10
 800076e:	0018      	movs	r0, r3
 8000770:	f7ff fe4c 	bl	800040c <__aeabi_idivmod>
 8000774:	000b      	movs	r3, r1
 8000776:	b21a      	sxth	r2, r3
 8000778:	2044      	movs	r0, #68	@ 0x44
 800077a:	183b      	adds	r3, r7, r0
 800077c:	17d1      	asrs	r1, r2, #31
 800077e:	1852      	adds	r2, r2, r1
 8000780:	404a      	eors	r2, r1
 8000782:	801a      	strh	r2, [r3, #0]
    sprintf(buffer, "Temperature: %d.%d C\r\n", temp_whole, temp_decimal);
 8000784:	19bb      	adds	r3, r7, r6
 8000786:	2200      	movs	r2, #0
 8000788:	5e9a      	ldrsh	r2, [r3, r2]
 800078a:	183b      	adds	r3, r7, r0
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	4923      	ldr	r1, [pc, #140]	@ (800081c <PrintCalibrationData+0x17c>)
 8000790:	1978      	adds	r0, r7, r5
 8000792:	f003 ff77 	bl	8004684 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000796:	197b      	adds	r3, r7, r5
 8000798:	0018      	movs	r0, r3
 800079a:	f7ff fcb5 	bl	8000108 <strlen>
 800079e:	0003      	movs	r3, r0
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	2301      	movs	r3, #1
 80007a4:	425b      	negs	r3, r3
 80007a6:	1979      	adds	r1, r7, r5
 80007a8:	4818      	ldr	r0, [pc, #96]	@ (800080c <PrintCalibrationData+0x16c>)
 80007aa:	f002 fee5 	bl	8003578 <HAL_UART_Transmit>

    // 습도도 10으로 나누어 소수점 표시
    sprintf(buffer, "Humidity: %d.%d %%\r\n", data.humidity / 10, data.humidity % 10);
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	895b      	ldrh	r3, [r3, #10]
 80007b2:	210a      	movs	r1, #10
 80007b4:	0018      	movs	r0, r3
 80007b6:	f7ff fcb9 	bl	800012c <__udivsi3>
 80007ba:	0003      	movs	r3, r0
 80007bc:	b29b      	uxth	r3, r3
 80007be:	001c      	movs	r4, r3
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	895b      	ldrh	r3, [r3, #10]
 80007c4:	210a      	movs	r1, #10
 80007c6:	0018      	movs	r0, r3
 80007c8:	f7ff fd36 	bl	8000238 <__aeabi_uidivmod>
 80007cc:	000b      	movs	r3, r1
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	4913      	ldr	r1, [pc, #76]	@ (8000820 <PrintCalibrationData+0x180>)
 80007d2:	1978      	adds	r0, r7, r5
 80007d4:	0022      	movs	r2, r4
 80007d6:	f003 ff55 	bl	8004684 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80007da:	197b      	adds	r3, r7, r5
 80007dc:	0018      	movs	r0, r3
 80007de:	f7ff fc93 	bl	8000108 <strlen>
 80007e2:	0003      	movs	r3, r0
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	2301      	movs	r3, #1
 80007e8:	425b      	negs	r3, r3
 80007ea:	1979      	adds	r1, r7, r5
 80007ec:	4807      	ldr	r0, [pc, #28]	@ (800080c <PrintCalibrationData+0x16c>)
 80007ee:	f002 fec3 	bl	8003578 <HAL_UART_Transmit>

    HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 80007f2:	2301      	movs	r3, #1
 80007f4:	425b      	negs	r3, r3
 80007f6:	490b      	ldr	r1, [pc, #44]	@ (8000824 <PrintCalibrationData+0x184>)
 80007f8:	4804      	ldr	r0, [pc, #16]	@ (800080c <PrintCalibrationData+0x16c>)
 80007fa:	2202      	movs	r2, #2
 80007fc:	f002 febc 	bl	8003578 <HAL_UART_Transmit>
}
 8000800:	46c0      	nop			@ (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	b013      	add	sp, #76	@ 0x4c
 8000806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000808:	08005030 	.word	0x08005030
 800080c:	2000014c 	.word	0x2000014c
 8000810:	08005040 	.word	0x08005040
 8000814:	08005054 	.word	0x08005054
 8000818:	08005068 	.word	0x08005068
 800081c:	0800507c 	.word	0x0800507c
 8000820:	08005094 	.word	0x08005094
 8000824:	0800502c 	.word	0x0800502c

08000828 <ProcessAM1002Data.1>:
 */
int main(void)
{
  /* USER CODE BEGIN 1 */
  AM1002_Data_t ProcessAM1002Data(uint8_t *data, AM1002_Data_t *result)
  {
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
 8000834:	4663      	mov	r3, ip
 8000836:	603b      	str	r3, [r7, #0]

    // 실제 데이터는 시작 바이트(16 13 16) 이후부터 시작
    uint8_t *actual_data = data + 3;
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	3303      	adds	r3, #3
 800083c:	617b      	str	r3, [r7, #20]
    result->tvoc = (uint16_t)(actual_data[0] << 8 | actual_data[1]);
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	021b      	lsls	r3, r3, #8
 8000844:	b21a      	sxth	r2, r3
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	3301      	adds	r3, #1
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	b21b      	sxth	r3, r3
 800084e:	4313      	orrs	r3, r2
 8000850:	b21b      	sxth	r3, r3
 8000852:	b29a      	uxth	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	801a      	strh	r2, [r3, #0]
    result->pm1_0 = (uint16_t)(actual_data[4] << 8 | actual_data[5]);
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	3304      	adds	r3, #4
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	021b      	lsls	r3, r3, #8
 8000860:	b21a      	sxth	r2, r3
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	3305      	adds	r3, #5
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b21b      	sxth	r3, r3
 800086a:	4313      	orrs	r3, r2
 800086c:	b21b      	sxth	r3, r3
 800086e:	b29a      	uxth	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	805a      	strh	r2, [r3, #2]
    result->pm2_5 = (uint16_t)(actual_data[6] << 8 | actual_data[7]);
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	3306      	adds	r3, #6
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	021b      	lsls	r3, r3, #8
 800087c:	b21a      	sxth	r2, r3
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	3307      	adds	r3, #7
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b21b      	sxth	r3, r3
 8000886:	4313      	orrs	r3, r2
 8000888:	b21b      	sxth	r3, r3
 800088a:	b29a      	uxth	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	809a      	strh	r2, [r3, #4]
    result->pm10 = (uint16_t)(actual_data[8] << 8 | actual_data[9]);
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	3308      	adds	r3, #8
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	021b      	lsls	r3, r3, #8
 8000898:	b21a      	sxth	r2, r3
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	3309      	adds	r3, #9
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b21b      	sxth	r3, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b21b      	sxth	r3, r3
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	80da      	strh	r2, [r3, #6]

    // 온도 계산 (DF11 DF12) ((DF11*256^1 + DF12)-500）/ 10
    uint16_t temp_raw = (uint16_t)(actual_data[10] << 8 | actual_data[11]);
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	330a      	adds	r3, #10
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	021b      	lsls	r3, r3, #8
 80008b4:	b21a      	sxth	r2, r3
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	330b      	adds	r3, #11
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b21b      	sxth	r3, r3
 80008be:	4313      	orrs	r3, r2
 80008c0:	b21a      	sxth	r2, r3
 80008c2:	2112      	movs	r1, #18
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	801a      	strh	r2, [r3, #0]
    result->temperature = (int16_t)(temp_raw - 500); // 10배 값을 저장
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	3bf5      	subs	r3, #245	@ 0xf5
 80008ce:	3bff      	subs	r3, #255	@ 0xff
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	b21a      	sxth	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	811a      	strh	r2, [r3, #8]

    // 습도 계산 (DF13 DF14) ((DF13*256^1 + DF14))
    result->humidity = (uint16_t)(actual_data[12] << 8 | actual_data[13]); // 10배 값을 저장
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	330c      	adds	r3, #12
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	021b      	lsls	r3, r3, #8
 80008e0:	b21a      	sxth	r2, r3
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	330d      	adds	r3, #13
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b21b      	sxth	r3, r3
 80008ea:	4313      	orrs	r3, r2
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	815a      	strh	r2, [r3, #10]

    return *result;
 80008f4:	68fa      	ldr	r2, [r7, #12]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	0010      	movs	r0, r2
 80008fa:	0019      	movs	r1, r3
 80008fc:	230c      	movs	r3, #12
 80008fe:	001a      	movs	r2, r3
 8000900:	f003 ff14 	bl	800472c <memcpy>
  }
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	46bd      	mov	sp, r7
 8000908:	b006      	add	sp, #24
 800090a:	bd80      	pop	{r7, pc}

0800090c <main>:
{
 800090c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800090e:	b0ad      	sub	sp, #180	@ 0xb4
 8000910:	af00      	add	r7, sp, #0
int main(void)
 8000912:	23c0      	movs	r3, #192	@ 0xc0
 8000914:	2208      	movs	r2, #8
 8000916:	189b      	adds	r3, r3, r2
 8000918:	19db      	adds	r3, r3, r7
 800091a:	22a4      	movs	r2, #164	@ 0xa4
 800091c:	18ba      	adds	r2, r7, r2
 800091e:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000920:	f000 fd64 	bl	80013ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000924:	f000 f9cd 	bl	8000cc2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000928:	f000 fafe 	bl	8000f28 <MX_GPIO_Init>
  MX_DMA_Init();
 800092c:	f000 fade 	bl	8000eec <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000930:	f000 fa7c 	bl	8000e2c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000934:	f000 fa1c 	bl	8000d70 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000938:	f000 faa8 	bl	8000e8c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800093c:	4b64      	ldr	r3, [pc, #400]	@ (8000ad0 <main+0x1c4>)
 800093e:	0018      	movs	r0, r3
 8000940:	f002 f9fc 	bl	8002d3c <HAL_TIM_Base_Start_IT>

  uint8_t rx_data;
  uint8_t cmd[] = {0x11, 0x01, 0x16, 0xD8};
 8000944:	23a0      	movs	r3, #160	@ 0xa0
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	4a62      	ldr	r2, [pc, #392]	@ (8000ad4 <main+0x1c8>)
 800094a:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    if (g_timer_ms_1000 == ENABLE)
 800094c:	4b62      	ldr	r3, [pc, #392]	@ (8000ad8 <main+0x1cc>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d1fb      	bne.n	800094c <main+0x40>
    {
      AM1002_Data_t read_data = multiDataread(); // 임시 변수 사용
 8000954:	2474      	movs	r4, #116	@ 0x74
 8000956:	193b      	adds	r3, r7, r4
 8000958:	0018      	movs	r0, r3
 800095a:	f7ff fe35 	bl	80005c8 <multiDataread>
      PrintCalibrationData(read_data);
 800095e:	193b      	adds	r3, r7, r4
 8000960:	6818      	ldr	r0, [r3, #0]
 8000962:	6859      	ldr	r1, [r3, #4]
 8000964:	689a      	ldr	r2, [r3, #8]
 8000966:	f7ff fe9b 	bl	80006a0 <PrintCalibrationData>
      HAL_UART_Transmit(&huart3, (uint8_t *)"Data read done\r\n", 16, HAL_MAX_DELAY);
 800096a:	2301      	movs	r3, #1
 800096c:	425b      	negs	r3, r3
 800096e:	495b      	ldr	r1, [pc, #364]	@ (8000adc <main+0x1d0>)
 8000970:	485b      	ldr	r0, [pc, #364]	@ (8000ae0 <main+0x1d4>)
 8000972:	2210      	movs	r2, #16
 8000974:	f002 fe00 	bl	8003578 <HAL_UART_Transmit>

      g_timer_ms_1000 = DISABLE;
 8000978:	4b57      	ldr	r3, [pc, #348]	@ (8000ad8 <main+0x1cc>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]

      memset(rx_buffer, 0, sizeof(rx_buffer));
 800097e:	2580      	movs	r5, #128	@ 0x80
 8000980:	197b      	adds	r3, r7, r5
 8000982:	2220      	movs	r2, #32
 8000984:	2100      	movs	r1, #0
 8000986:	0018      	movs	r0, r3
 8000988:	f003 fe9c 	bl	80046c4 <memset>

      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800098c:	2380      	movs	r3, #128	@ 0x80
 800098e:	019b      	lsls	r3, r3, #6
 8000990:	4a54      	ldr	r2, [pc, #336]	@ (8000ae4 <main+0x1d8>)
 8000992:	0019      	movs	r1, r3
 8000994:	0010      	movs	r0, r2
 8000996:	f001 fb86 	bl	80020a6 <HAL_GPIO_TogglePin>

      HAL_UART_Transmit(&huart2, cmd, sizeof(cmd), 1000);
 800099a:	23fa      	movs	r3, #250	@ 0xfa
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	22a0      	movs	r2, #160	@ 0xa0
 80009a0:	18b9      	adds	r1, r7, r2
 80009a2:	4851      	ldr	r0, [pc, #324]	@ (8000ae8 <main+0x1dc>)
 80009a4:	2204      	movs	r2, #4
 80009a6:	f002 fde7 	bl	8003578 <HAL_UART_Transmit>
      HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, rx_buffer, 22, 1000);
 80009aa:	26ab      	movs	r6, #171	@ 0xab
 80009ac:	19bc      	adds	r4, r7, r6
 80009ae:	23fa      	movs	r3, #250	@ 0xfa
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	1979      	adds	r1, r7, r5
 80009b4:	484c      	ldr	r0, [pc, #304]	@ (8000ae8 <main+0x1dc>)
 80009b6:	2216      	movs	r2, #22
 80009b8:	f002 fe7e 	bl	80036b8 <HAL_UART_Receive>
 80009bc:	0003      	movs	r3, r0
 80009be:	7023      	strb	r3, [r4, #0]

      if (status == HAL_OK)
 80009c0:	19bb      	adds	r3, r7, r6
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d000      	beq.n	80009ca <main+0xbe>
 80009c8:	e07a      	b.n	8000ac0 <main+0x1b4>
      {
        char debug[100];
        sprintf(debug, "Raw Data: ");
 80009ca:	4a48      	ldr	r2, [pc, #288]	@ (8000aec <main+0x1e0>)
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	0011      	movs	r1, r2
 80009d0:	0018      	movs	r0, r3
 80009d2:	f003 fe57 	bl	8004684 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t *)debug, strlen(debug), HAL_MAX_DELAY);
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	0018      	movs	r0, r3
 80009da:	f7ff fb95 	bl	8000108 <strlen>
 80009de:	0003      	movs	r3, r0
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	2301      	movs	r3, #1
 80009e4:	425b      	negs	r3, r3
 80009e6:	1d39      	adds	r1, r7, #4
 80009e8:	483d      	ldr	r0, [pc, #244]	@ (8000ae0 <main+0x1d4>)
 80009ea:	f002 fdc5 	bl	8003578 <HAL_UART_Transmit>

        memset(debug, 0, sizeof(debug));
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2264      	movs	r2, #100	@ 0x64
 80009f2:	2100      	movs	r1, #0
 80009f4:	0018      	movs	r0, r3
 80009f6:	f003 fe65 	bl	80046c4 <memset>
        for (int i = 0; i < 22; i++)
 80009fa:	2300      	movs	r3, #0
 80009fc:	22ac      	movs	r2, #172	@ 0xac
 80009fe:	18ba      	adds	r2, r7, r2
 8000a00:	6013      	str	r3, [r2, #0]
 8000a02:	e01d      	b.n	8000a40 <main+0x134>
        {
          sprintf(debug, "%02X ", rx_buffer[i]);
 8000a04:	2380      	movs	r3, #128	@ 0x80
 8000a06:	18fa      	adds	r2, r7, r3
 8000a08:	24ac      	movs	r4, #172	@ 0xac
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	18d3      	adds	r3, r2, r3
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	001a      	movs	r2, r3
 8000a14:	4936      	ldr	r1, [pc, #216]	@ (8000af0 <main+0x1e4>)
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f003 fe33 	bl	8004684 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t *)debug, strlen(debug), HAL_MAX_DELAY);
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	0018      	movs	r0, r3
 8000a22:	f7ff fb71 	bl	8000108 <strlen>
 8000a26:	0003      	movs	r3, r0
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	425b      	negs	r3, r3
 8000a2e:	1d39      	adds	r1, r7, #4
 8000a30:	482b      	ldr	r0, [pc, #172]	@ (8000ae0 <main+0x1d4>)
 8000a32:	f002 fda1 	bl	8003578 <HAL_UART_Transmit>
        for (int i = 0; i < 22; i++)
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	193a      	adds	r2, r7, r4
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	23ac      	movs	r3, #172	@ 0xac
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b15      	cmp	r3, #21
 8000a48:	dddc      	ble.n	8000a04 <main+0xf8>
        }
        HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	425b      	negs	r3, r3
 8000a4e:	4929      	ldr	r1, [pc, #164]	@ (8000af4 <main+0x1e8>)
 8000a50:	4823      	ldr	r0, [pc, #140]	@ (8000ae0 <main+0x1d4>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	f002 fd90 	bl	8003578 <HAL_UART_Transmit>

        if (rx_buffer[0] == 0x16 && rx_buffer[1] == 0x13 && rx_buffer[2] == 0x16)
 8000a58:	2280      	movs	r2, #128	@ 0x80
 8000a5a:	18bb      	adds	r3, r7, r2
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b16      	cmp	r3, #22
 8000a60:	d126      	bne.n	8000ab0 <main+0x1a4>
 8000a62:	18bb      	adds	r3, r7, r2
 8000a64:	785b      	ldrb	r3, [r3, #1]
 8000a66:	2b13      	cmp	r3, #19
 8000a68:	d122      	bne.n	8000ab0 <main+0x1a4>
 8000a6a:	18bb      	adds	r3, r7, r2
 8000a6c:	789b      	ldrb	r3, [r3, #2]
 8000a6e:	2b16      	cmp	r3, #22
 8000a70:	d11e      	bne.n	8000ab0 <main+0x1a4>
        {
          AM1002_Data_t current_data = ProcessAndPrintAM1002(&huart3, rx_buffer);
 8000a72:	2468      	movs	r4, #104	@ 0x68
 8000a74:	1938      	adds	r0, r7, r4
 8000a76:	18ba      	adds	r2, r7, r2
 8000a78:	4919      	ldr	r1, [pc, #100]	@ (8000ae0 <main+0x1d4>)
 8000a7a:	23a4      	movs	r3, #164	@ 0xa4
 8000a7c:	18fb      	adds	r3, r7, r3
 8000a7e:	469c      	mov	ip, r3
 8000a80:	f000 f8fa 	bl	8000c78 <ProcessAndPrintAM1002.0>
          if (current_data.humidity > 500)
 8000a84:	0021      	movs	r1, r4
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	895a      	ldrh	r2, [r3, #10]
 8000a8a:	23fa      	movs	r3, #250	@ 0xfa
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d906      	bls.n	8000aa0 <main+0x194>
          {
            multiDatawrite(current_data);
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	6818      	ldr	r0, [r3, #0]
 8000a96:	6859      	ldr	r1, [r3, #4]
 8000a98:	689a      	ldr	r2, [r3, #8]
 8000a9a:	f7ff fd2b 	bl	80004f4 <multiDatawrite>
        {
 8000a9e:	e016      	b.n	8000ace <main+0x1c2>
            // PrintCalibrationData(read_data1);
          }
          else
          {
            HAL_UART_Transmit(&huart3, (uint8_t *)"Humidity is low\r\n", 18, HAL_MAX_DELAY);
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	425b      	negs	r3, r3
 8000aa4:	4914      	ldr	r1, [pc, #80]	@ (8000af8 <main+0x1ec>)
 8000aa6:	480e      	ldr	r0, [pc, #56]	@ (8000ae0 <main+0x1d4>)
 8000aa8:	2212      	movs	r2, #18
 8000aaa:	f002 fd65 	bl	8003578 <HAL_UART_Transmit>
        {
 8000aae:	e00e      	b.n	8000ace <main+0x1c2>
          }
        }
        else
        {
          HAL_UART_Transmit(&huart3, (uint8_t *)"Error\r\n", 7, HAL_MAX_DELAY);
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	425b      	negs	r3, r3
 8000ab4:	4911      	ldr	r1, [pc, #68]	@ (8000afc <main+0x1f0>)
 8000ab6:	480a      	ldr	r0, [pc, #40]	@ (8000ae0 <main+0x1d4>)
 8000ab8:	2207      	movs	r2, #7
 8000aba:	f002 fd5d 	bl	8003578 <HAL_UART_Transmit>
 8000abe:	e745      	b.n	800094c <main+0x40>
        }
      }
      else
      {
        HAL_UART_Transmit(&huart3, (uint8_t *)"Error\r\n", 7, HAL_MAX_DELAY);
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	425b      	negs	r3, r3
 8000ac4:	490d      	ldr	r1, [pc, #52]	@ (8000afc <main+0x1f0>)
 8000ac6:	4806      	ldr	r0, [pc, #24]	@ (8000ae0 <main+0x1d4>)
 8000ac8:	2207      	movs	r2, #7
 8000aca:	f002 fd55 	bl	8003578 <HAL_UART_Transmit>
    if (g_timer_ms_1000 == ENABLE)
 8000ace:	e73d      	b.n	800094c <main+0x40>
 8000ad0:	2000007c 	.word	0x2000007c
 8000ad4:	d8160111 	.word	0xd8160111
 8000ad8:	20000260 	.word	0x20000260
 8000adc:	080050ac 	.word	0x080050ac
 8000ae0:	2000014c 	.word	0x2000014c
 8000ae4:	48000800 	.word	0x48000800
 8000ae8:	200000c4 	.word	0x200000c4
 8000aec:	080050c0 	.word	0x080050c0
 8000af0:	080050cc 	.word	0x080050cc
 8000af4:	080050d4 	.word	0x080050d4
 8000af8:	080050d8 	.word	0x080050d8
 8000afc:	080050ec 	.word	0x080050ec

08000b00 <PrintAM1002Data.2>:
  {
 8000b00:	b5b0      	push	{r4, r5, r7, lr}
 8000b02:	b08c      	sub	sp, #48	@ 0x30
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	4663      	mov	r3, ip
 8000b0c:	607b      	str	r3, [r7, #4]
    sprintf(buffer, "TVOC: %d ppb\r\n", data->tvoc);
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	001a      	movs	r2, r3
 8000b14:	4951      	ldr	r1, [pc, #324]	@ (8000c5c <PrintAM1002Data.2+0x15c>)
 8000b16:	2510      	movs	r5, #16
 8000b18:	197b      	adds	r3, r7, r5
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f003 fdb2 	bl	8004684 <siprintf>
    HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000b20:	197b      	adds	r3, r7, r5
 8000b22:	0018      	movs	r0, r3
 8000b24:	f7ff faf0 	bl	8000108 <strlen>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	425b      	negs	r3, r3
 8000b30:	1979      	adds	r1, r7, r5
 8000b32:	68f8      	ldr	r0, [r7, #12]
 8000b34:	f002 fd20 	bl	8003578 <HAL_UART_Transmit>
    sprintf(buffer, "PM1.0: %d ug/m3\r\n", data->pm1_0);
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	885b      	ldrh	r3, [r3, #2]
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	4948      	ldr	r1, [pc, #288]	@ (8000c60 <PrintAM1002Data.2+0x160>)
 8000b40:	197b      	adds	r3, r7, r5
 8000b42:	0018      	movs	r0, r3
 8000b44:	f003 fd9e 	bl	8004684 <siprintf>
    HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000b48:	197b      	adds	r3, r7, r5
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f7ff fadc 	bl	8000108 <strlen>
 8000b50:	0003      	movs	r3, r0
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	2301      	movs	r3, #1
 8000b56:	425b      	negs	r3, r3
 8000b58:	1979      	adds	r1, r7, r5
 8000b5a:	68f8      	ldr	r0, [r7, #12]
 8000b5c:	f002 fd0c 	bl	8003578 <HAL_UART_Transmit>
    sprintf(buffer, "PM2.5: %d ug/m3\r\n", data->pm2_5);
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	889b      	ldrh	r3, [r3, #4]
 8000b64:	001a      	movs	r2, r3
 8000b66:	493f      	ldr	r1, [pc, #252]	@ (8000c64 <PrintAM1002Data.2+0x164>)
 8000b68:	197b      	adds	r3, r7, r5
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f003 fd8a 	bl	8004684 <siprintf>
    HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000b70:	197b      	adds	r3, r7, r5
 8000b72:	0018      	movs	r0, r3
 8000b74:	f7ff fac8 	bl	8000108 <strlen>
 8000b78:	0003      	movs	r3, r0
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	425b      	negs	r3, r3
 8000b80:	1979      	adds	r1, r7, r5
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f002 fcf8 	bl	8003578 <HAL_UART_Transmit>
    sprintf(buffer, "PM10: %d ug/m3\r\n", data->pm10);
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	88db      	ldrh	r3, [r3, #6]
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	4936      	ldr	r1, [pc, #216]	@ (8000c68 <PrintAM1002Data.2+0x168>)
 8000b90:	197b      	adds	r3, r7, r5
 8000b92:	0018      	movs	r0, r3
 8000b94:	f003 fd76 	bl	8004684 <siprintf>
    HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000b98:	197b      	adds	r3, r7, r5
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f7ff fab4 	bl	8000108 <strlen>
 8000ba0:	0003      	movs	r3, r0
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	425b      	negs	r3, r3
 8000ba8:	1979      	adds	r1, r7, r5
 8000baa:	68f8      	ldr	r0, [r7, #12]
 8000bac:	f002 fce4 	bl	8003578 <HAL_UART_Transmit>
    sprintf(buffer, "Temperature: %d.%d C\r\n", data->temperature / 10, abs(data->temperature % 10));
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	5e9b      	ldrsh	r3, [r3, r2]
 8000bb6:	210a      	movs	r1, #10
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f7ff fb41 	bl	8000240 <__divsi3>
 8000bbe:	0003      	movs	r3, r0
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	001c      	movs	r4, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	2208      	movs	r2, #8
 8000bc8:	5e9b      	ldrsh	r3, [r3, r2]
 8000bca:	210a      	movs	r1, #10
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff fc1d 	bl	800040c <__aeabi_idivmod>
 8000bd2:	000b      	movs	r3, r1
 8000bd4:	b21b      	sxth	r3, r3
 8000bd6:	17da      	asrs	r2, r3, #31
 8000bd8:	189b      	adds	r3, r3, r2
 8000bda:	4053      	eors	r3, r2
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	4923      	ldr	r1, [pc, #140]	@ (8000c6c <PrintAM1002Data.2+0x16c>)
 8000be0:	1978      	adds	r0, r7, r5
 8000be2:	0022      	movs	r2, r4
 8000be4:	f003 fd4e 	bl	8004684 <siprintf>
    HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000be8:	197b      	adds	r3, r7, r5
 8000bea:	0018      	movs	r0, r3
 8000bec:	f7ff fa8c 	bl	8000108 <strlen>
 8000bf0:	0003      	movs	r3, r0
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	425b      	negs	r3, r3
 8000bf8:	1979      	adds	r1, r7, r5
 8000bfa:	68f8      	ldr	r0, [r7, #12]
 8000bfc:	f002 fcbc 	bl	8003578 <HAL_UART_Transmit>
    sprintf(buffer, "Humidity: %d.%d %%\r\n", data->humidity / 10, data->humidity % 10);
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	895b      	ldrh	r3, [r3, #10]
 8000c04:	210a      	movs	r1, #10
 8000c06:	0018      	movs	r0, r3
 8000c08:	f7ff fa90 	bl	800012c <__udivsi3>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	001c      	movs	r4, r3
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	895b      	ldrh	r3, [r3, #10]
 8000c16:	210a      	movs	r1, #10
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff fb0d 	bl	8000238 <__aeabi_uidivmod>
 8000c1e:	000b      	movs	r3, r1
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	4913      	ldr	r1, [pc, #76]	@ (8000c70 <PrintAM1002Data.2+0x170>)
 8000c24:	1978      	adds	r0, r7, r5
 8000c26:	0022      	movs	r2, r4
 8000c28:	f003 fd2c 	bl	8004684 <siprintf>
    HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000c2c:	197b      	adds	r3, r7, r5
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f7ff fa6a 	bl	8000108 <strlen>
 8000c34:	0003      	movs	r3, r0
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	2301      	movs	r3, #1
 8000c3a:	425b      	negs	r3, r3
 8000c3c:	1979      	adds	r1, r7, r5
 8000c3e:	68f8      	ldr	r0, [r7, #12]
 8000c40:	f002 fc9a 	bl	8003578 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 8000c44:	2301      	movs	r3, #1
 8000c46:	425b      	negs	r3, r3
 8000c48:	490a      	ldr	r1, [pc, #40]	@ (8000c74 <PrintAM1002Data.2+0x174>)
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	f002 fc93 	bl	8003578 <HAL_UART_Transmit>
  }
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b00c      	add	sp, #48	@ 0x30
 8000c58:	bdb0      	pop	{r4, r5, r7, pc}
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	080050f4 	.word	0x080050f4
 8000c60:	08005104 	.word	0x08005104
 8000c64:	08005118 	.word	0x08005118
 8000c68:	0800512c 	.word	0x0800512c
 8000c6c:	08005140 	.word	0x08005140
 8000c70:	08005158 	.word	0x08005158
 8000c74:	080050d4 	.word	0x080050d4

08000c78 <ProcessAndPrintAM1002.0>:
  {
 8000c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7a:	b08b      	sub	sp, #44	@ 0x2c
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	4664      	mov	r4, ip
 8000c86:	4663      	mov	r3, ip
 8000c88:	603b      	str	r3, [r7, #0]
    AM1002_Data_t result = ProcessAM1002Data(rx_buffer, &sensorData);
 8000c8a:	2510      	movs	r5, #16
 8000c8c:	197b      	adds	r3, r7, r5
 8000c8e:	261c      	movs	r6, #28
 8000c90:	19ba      	adds	r2, r7, r6
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	46a4      	mov	ip, r4
 8000c96:	0018      	movs	r0, r3
 8000c98:	f7ff fdc6 	bl	8000828 <ProcessAM1002Data.1>
    PrintAM1002Data(huart, &sensorData);
 8000c9c:	19ba      	adds	r2, r7, r6
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	46a4      	mov	ip, r4
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff ff2b 	bl	8000b00 <PrintAM1002Data.2>
    return result;
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	197b      	adds	r3, r7, r5
 8000cae:	0010      	movs	r0, r2
 8000cb0:	0019      	movs	r1, r3
 8000cb2:	230c      	movs	r3, #12
 8000cb4:	001a      	movs	r2, r3
 8000cb6:	f003 fd39 	bl	800472c <memcpy>
  }
 8000cba:	68f8      	ldr	r0, [r7, #12]
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b00b      	add	sp, #44	@ 0x2c
 8000cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000cc2 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000cc2:	b590      	push	{r4, r7, lr}
 8000cc4:	b099      	sub	sp, #100	@ 0x64
 8000cc6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc8:	242c      	movs	r4, #44	@ 0x2c
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	0018      	movs	r0, r3
 8000cce:	2334      	movs	r3, #52	@ 0x34
 8000cd0:	001a      	movs	r2, r3
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	f003 fcf6 	bl	80046c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd8:	231c      	movs	r3, #28
 8000cda:	18fb      	adds	r3, r7, r3
 8000cdc:	0018      	movs	r0, r3
 8000cde:	2310      	movs	r3, #16
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	f003 fcee 	bl	80046c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	0018      	movs	r0, r3
 8000cec:	2318      	movs	r3, #24
 8000cee:	001a      	movs	r2, r3
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	f003 fce7 	bl	80046c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf6:	0021      	movs	r1, r4
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2201      	movs	r2, #1
 8000d02:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2210      	movs	r2, #16
 8000d08:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	0018      	movs	r0, r3
 8000d14:	f001 f9e2 	bl	80020dc <HAL_RCC_OscConfig>
 8000d18:	1e03      	subs	r3, r0, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000d1c:	f000 f95c 	bl	8000fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000d20:	211c      	movs	r1, #28
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	2207      	movs	r2, #7
 8000d26:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f001 fd52 	bl	80027e8 <HAL_RCC_ClockConfig>
 8000d44:	1e03      	subs	r3, r0, #0
 8000d46:	d001      	beq.n	8000d4c <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d48:	f000 f946 	bl	8000fd8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2202      	movs	r2, #2
 8000d50:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f001 feb0 	bl	8002ac0 <HAL_RCCEx_PeriphCLKConfig>
 8000d60:	1e03      	subs	r3, r0, #0
 8000d62:	d001      	beq.n	8000d68 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d64:	f000 f938 	bl	8000fd8 <Error_Handler>
  }
}
 8000d68:	46c0      	nop			@ (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b019      	add	sp, #100	@ 0x64
 8000d6e:	bd90      	pop	{r4, r7, pc}

08000d70 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	2308      	movs	r3, #8
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	2310      	movs	r3, #16
 8000d7e:	001a      	movs	r2, r3
 8000d80:	2100      	movs	r1, #0
 8000d82:	f003 fc9f 	bl	80046c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d86:	003b      	movs	r3, r7
 8000d88:	0018      	movs	r0, r3
 8000d8a:	2308      	movs	r3, #8
 8000d8c:	001a      	movs	r2, r3
 8000d8e:	2100      	movs	r1, #0
 8000d90:	f003 fc98 	bl	80046c4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d94:	4b22      	ldr	r3, [pc, #136]	@ (8000e20 <MX_TIM2_Init+0xb0>)
 8000d96:	2280      	movs	r2, #128	@ 0x80
 8000d98:	05d2      	lsls	r2, r2, #23
 8000d9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d9c:	4b20      	ldr	r3, [pc, #128]	@ (8000e20 <MX_TIM2_Init+0xb0>)
 8000d9e:	4a21      	ldr	r2, [pc, #132]	@ (8000e24 <MX_TIM2_Init+0xb4>)
 8000da0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e20 <MX_TIM2_Init+0xb0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000da8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e20 <MX_TIM2_Init+0xb0>)
 8000daa:	4a1f      	ldr	r2, [pc, #124]	@ (8000e28 <MX_TIM2_Init+0xb8>)
 8000dac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dae:	4b1c      	ldr	r3, [pc, #112]	@ (8000e20 <MX_TIM2_Init+0xb0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <MX_TIM2_Init+0xb0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dba:	4b19      	ldr	r3, [pc, #100]	@ (8000e20 <MX_TIM2_Init+0xb0>)
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f001 ff6d 	bl	8002c9c <HAL_TIM_Base_Init>
 8000dc2:	1e03      	subs	r3, r0, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000dc6:	f000 f907 	bl	8000fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dca:	2108      	movs	r1, #8
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2280      	movs	r2, #128	@ 0x80
 8000dd0:	0152      	lsls	r2, r2, #5
 8000dd2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dd4:	187a      	adds	r2, r7, r1
 8000dd6:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <MX_TIM2_Init+0xb0>)
 8000dd8:	0011      	movs	r1, r2
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f002 f8ee 	bl	8002fbc <HAL_TIM_ConfigClockSource>
 8000de0:	1e03      	subs	r3, r0, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000de4:	f000 f8f8 	bl	8000fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de8:	003b      	movs	r3, r7
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dee:	003b      	movs	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000df4:	003a      	movs	r2, r7
 8000df6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e20 <MX_TIM2_Init+0xb0>)
 8000df8:	0011      	movs	r1, r2
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f002 fafa 	bl	80033f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e00:	1e03      	subs	r3, r0, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000e04:	f000 f8e8 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	200f      	movs	r0, #15
 8000e0e:	f000 fbfd 	bl	800160c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e12:	200f      	movs	r0, #15
 8000e14:	f000 fc0f 	bl	8001636 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM2_Init 2 */
}
 8000e18:	46c0      	nop			@ (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b006      	add	sp, #24
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	2000007c 	.word	0x2000007c
 8000e24:	00001f3f 	.word	0x00001f3f
 8000e28:	000003e7 	.word	0x000003e7

08000e2c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e30:	4b14      	ldr	r3, [pc, #80]	@ (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e32:	4a15      	ldr	r2, [pc, #84]	@ (8000e88 <MX_USART2_UART_Init+0x5c>)
 8000e34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e36:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e38:	2296      	movs	r2, #150	@ 0x96
 8000e3a:	0192      	lsls	r2, r2, #6
 8000e3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	@ (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e62:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e6e:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e70:	0018      	movs	r0, r3
 8000e72:	f002 fb2d 	bl	80034d0 <HAL_UART_Init>
 8000e76:	1e03      	subs	r3, r0, #0
 8000e78:	d001      	beq.n	8000e7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e7a:	f000 f8ad 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000e7e:	46c0      	nop			@ (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200000c4 	.word	0x200000c4
 8000e88:	40004400 	.word	0x40004400

08000e8c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e90:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <MX_USART3_UART_Init+0x58>)
 8000e92:	4a15      	ldr	r2, [pc, #84]	@ (8000ee8 <MX_USART3_UART_Init+0x5c>)
 8000e94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000e96:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <MX_USART3_UART_Init+0x58>)
 8000e98:	2296      	movs	r2, #150	@ 0x96
 8000e9a:	0192      	lsls	r2, r2, #6
 8000e9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <MX_USART3_UART_Init+0x58>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <MX_USART3_UART_Init+0x58>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <MX_USART3_UART_Init+0x58>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <MX_USART3_UART_Init+0x58>)
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee4 <MX_USART3_UART_Init+0x58>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <MX_USART3_UART_Init+0x58>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <MX_USART3_UART_Init+0x58>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <MX_USART3_UART_Init+0x58>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ece:	4b05      	ldr	r3, [pc, #20]	@ (8000ee4 <MX_USART3_UART_Init+0x58>)
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f002 fafd 	bl	80034d0 <HAL_UART_Init>
 8000ed6:	1e03      	subs	r3, r0, #0
 8000ed8:	d001      	beq.n	8000ede <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000eda:	f000 f87d 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8000ede:	46c0      	nop			@ (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	2000014c 	.word	0x2000014c
 8000ee8:	40004800 	.word	0x40004800

08000eec <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <MX_DMA_Init+0x38>)
 8000ef4:	695a      	ldr	r2, [r3, #20]
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <MX_DMA_Init+0x38>)
 8000ef8:	2101      	movs	r1, #1
 8000efa:	430a      	orrs	r2, r1
 8000efc:	615a      	str	r2, [r3, #20]
 8000efe:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <MX_DMA_Init+0x38>)
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	2201      	movs	r2, #1
 8000f04:	4013      	ands	r3, r2
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	200b      	movs	r0, #11
 8000f10:	f000 fb7c 	bl	800160c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000f14:	200b      	movs	r0, #11
 8000f16:	f000 fb8e 	bl	8001636 <HAL_NVIC_EnableIRQ>
}
 8000f1a:	46c0      	nop			@ (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b002      	add	sp, #8
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	40021000 	.word	0x40021000

08000f28 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b089      	sub	sp, #36	@ 0x24
 8000f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	240c      	movs	r4, #12
 8000f30:	193b      	adds	r3, r7, r4
 8000f32:	0018      	movs	r0, r3
 8000f34:	2314      	movs	r3, #20
 8000f36:	001a      	movs	r2, r3
 8000f38:	2100      	movs	r1, #0
 8000f3a:	f003 fbc3 	bl	80046c4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3e:	4b24      	ldr	r3, [pc, #144]	@ (8000fd0 <MX_GPIO_Init+0xa8>)
 8000f40:	695a      	ldr	r2, [r3, #20]
 8000f42:	4b23      	ldr	r3, [pc, #140]	@ (8000fd0 <MX_GPIO_Init+0xa8>)
 8000f44:	2180      	movs	r1, #128	@ 0x80
 8000f46:	0309      	lsls	r1, r1, #12
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	615a      	str	r2, [r3, #20]
 8000f4c:	4b20      	ldr	r3, [pc, #128]	@ (8000fd0 <MX_GPIO_Init+0xa8>)
 8000f4e:	695a      	ldr	r2, [r3, #20]
 8000f50:	2380      	movs	r3, #128	@ 0x80
 8000f52:	031b      	lsls	r3, r3, #12
 8000f54:	4013      	ands	r3, r2
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd0 <MX_GPIO_Init+0xa8>)
 8000f5c:	695a      	ldr	r2, [r3, #20]
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <MX_GPIO_Init+0xa8>)
 8000f60:	2180      	movs	r1, #128	@ 0x80
 8000f62:	0289      	lsls	r1, r1, #10
 8000f64:	430a      	orrs	r2, r1
 8000f66:	615a      	str	r2, [r3, #20]
 8000f68:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <MX_GPIO_Init+0xa8>)
 8000f6a:	695a      	ldr	r2, [r3, #20]
 8000f6c:	2380      	movs	r3, #128	@ 0x80
 8000f6e:	029b      	lsls	r3, r3, #10
 8000f70:	4013      	ands	r3, r2
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <MX_GPIO_Init+0xa8>)
 8000f78:	695a      	ldr	r2, [r3, #20]
 8000f7a:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <MX_GPIO_Init+0xa8>)
 8000f7c:	2180      	movs	r1, #128	@ 0x80
 8000f7e:	02c9      	lsls	r1, r1, #11
 8000f80:	430a      	orrs	r2, r1
 8000f82:	615a      	str	r2, [r3, #20]
 8000f84:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <MX_GPIO_Init+0xa8>)
 8000f86:	695a      	ldr	r2, [r3, #20]
 8000f88:	2380      	movs	r3, #128	@ 0x80
 8000f8a:	02db      	lsls	r3, r3, #11
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f92:	2380      	movs	r3, #128	@ 0x80
 8000f94:	019b      	lsls	r3, r3, #6
 8000f96:	480f      	ldr	r0, [pc, #60]	@ (8000fd4 <MX_GPIO_Init+0xac>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	0019      	movs	r1, r3
 8000f9c:	f001 f866 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fa0:	193b      	adds	r3, r7, r4
 8000fa2:	2280      	movs	r2, #128	@ 0x80
 8000fa4:	0192      	lsls	r2, r2, #6
 8000fa6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa8:	193b      	adds	r3, r7, r4
 8000faa:	2201      	movs	r2, #1
 8000fac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	193b      	adds	r3, r7, r4
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	193b      	adds	r3, r7, r4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fba:	193b      	adds	r3, r7, r4
 8000fbc:	4a05      	ldr	r2, [pc, #20]	@ (8000fd4 <MX_GPIO_Init+0xac>)
 8000fbe:	0019      	movs	r1, r3
 8000fc0:	0010      	movs	r0, r2
 8000fc2:	f000 fedb 	bl	8001d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b009      	add	sp, #36	@ 0x24
 8000fcc:	bd90      	pop	{r4, r7, pc}
 8000fce:	46c0      	nop			@ (mov r8, r8)
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	48000800 	.word	0x48000800

08000fd8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe0:	46c0      	nop			@ (mov r8, r8)
 8000fe2:	e7fd      	b.n	8000fe0 <Error_Handler+0x8>

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <HAL_MspInit+0x44>)
 8000fec:	699a      	ldr	r2, [r3, #24]
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <HAL_MspInit+0x44>)
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	619a      	str	r2, [r3, #24]
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <HAL_MspInit+0x44>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <HAL_MspInit+0x44>)
 8001004:	69da      	ldr	r2, [r3, #28]
 8001006:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <HAL_MspInit+0x44>)
 8001008:	2180      	movs	r1, #128	@ 0x80
 800100a:	0549      	lsls	r1, r1, #21
 800100c:	430a      	orrs	r2, r1
 800100e:	61da      	str	r2, [r3, #28]
 8001010:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <HAL_MspInit+0x44>)
 8001012:	69da      	ldr	r2, [r3, #28]
 8001014:	2380      	movs	r3, #128	@ 0x80
 8001016:	055b      	lsls	r3, r3, #21
 8001018:	4013      	ands	r3, r2
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101e:	46c0      	nop			@ (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b002      	add	sp, #8
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	40021000 	.word	0x40021000

0800102c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	2380      	movs	r3, #128	@ 0x80
 800103a:	05db      	lsls	r3, r3, #23
 800103c:	429a      	cmp	r2, r3
 800103e:	d113      	bne.n	8001068 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001040:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <HAL_TIM_Base_MspInit+0x44>)
 8001042:	69da      	ldr	r2, [r3, #28]
 8001044:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <HAL_TIM_Base_MspInit+0x44>)
 8001046:	2101      	movs	r1, #1
 8001048:	430a      	orrs	r2, r1
 800104a:	61da      	str	r2, [r3, #28]
 800104c:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <HAL_TIM_Base_MspInit+0x44>)
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	2201      	movs	r2, #1
 8001052:	4013      	ands	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2100      	movs	r1, #0
 800105c:	200f      	movs	r0, #15
 800105e:	f000 fad5 	bl	800160c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001062:	200f      	movs	r0, #15
 8001064:	f000 fae7 	bl	8001636 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001068:	46c0      	nop			@ (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	b004      	add	sp, #16
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b08d      	sub	sp, #52	@ 0x34
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	241c      	movs	r4, #28
 800107e:	193b      	adds	r3, r7, r4
 8001080:	0018      	movs	r0, r3
 8001082:	2314      	movs	r3, #20
 8001084:	001a      	movs	r2, r3
 8001086:	2100      	movs	r1, #0
 8001088:	f003 fb1c 	bl	80046c4 <memset>
  if(huart->Instance==USART2)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a67      	ldr	r2, [pc, #412]	@ (8001230 <HAL_UART_MspInit+0x1bc>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d000      	beq.n	8001098 <HAL_UART_MspInit+0x24>
 8001096:	e087      	b.n	80011a8 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001098:	4b66      	ldr	r3, [pc, #408]	@ (8001234 <HAL_UART_MspInit+0x1c0>)
 800109a:	69da      	ldr	r2, [r3, #28]
 800109c:	4b65      	ldr	r3, [pc, #404]	@ (8001234 <HAL_UART_MspInit+0x1c0>)
 800109e:	2180      	movs	r1, #128	@ 0x80
 80010a0:	0289      	lsls	r1, r1, #10
 80010a2:	430a      	orrs	r2, r1
 80010a4:	61da      	str	r2, [r3, #28]
 80010a6:	4b63      	ldr	r3, [pc, #396]	@ (8001234 <HAL_UART_MspInit+0x1c0>)
 80010a8:	69da      	ldr	r2, [r3, #28]
 80010aa:	2380      	movs	r3, #128	@ 0x80
 80010ac:	029b      	lsls	r3, r3, #10
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
 80010b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b5f      	ldr	r3, [pc, #380]	@ (8001234 <HAL_UART_MspInit+0x1c0>)
 80010b6:	695a      	ldr	r2, [r3, #20]
 80010b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001234 <HAL_UART_MspInit+0x1c0>)
 80010ba:	2180      	movs	r1, #128	@ 0x80
 80010bc:	0289      	lsls	r1, r1, #10
 80010be:	430a      	orrs	r2, r1
 80010c0:	615a      	str	r2, [r3, #20]
 80010c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001234 <HAL_UART_MspInit+0x1c0>)
 80010c4:	695a      	ldr	r2, [r3, #20]
 80010c6:	2380      	movs	r3, #128	@ 0x80
 80010c8:	029b      	lsls	r3, r3, #10
 80010ca:	4013      	ands	r3, r2
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010d0:	0021      	movs	r1, r4
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	220c      	movs	r2, #12
 80010d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	2202      	movs	r2, #2
 80010dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	2203      	movs	r2, #3
 80010e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	2201      	movs	r2, #1
 80010ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	187a      	adds	r2, r7, r1
 80010f2:	2390      	movs	r3, #144	@ 0x90
 80010f4:	05db      	lsls	r3, r3, #23
 80010f6:	0011      	movs	r1, r2
 80010f8:	0018      	movs	r0, r3
 80010fa:	f000 fe3f 	bl	8001d7c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80010fe:	4b4e      	ldr	r3, [pc, #312]	@ (8001238 <HAL_UART_MspInit+0x1c4>)
 8001100:	4a4e      	ldr	r2, [pc, #312]	@ (800123c <HAL_UART_MspInit+0x1c8>)
 8001102:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001104:	4b4c      	ldr	r3, [pc, #304]	@ (8001238 <HAL_UART_MspInit+0x1c4>)
 8001106:	2210      	movs	r2, #16
 8001108:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800110a:	4b4b      	ldr	r3, [pc, #300]	@ (8001238 <HAL_UART_MspInit+0x1c4>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001110:	4b49      	ldr	r3, [pc, #292]	@ (8001238 <HAL_UART_MspInit+0x1c4>)
 8001112:	2280      	movs	r2, #128	@ 0x80
 8001114:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001116:	4b48      	ldr	r3, [pc, #288]	@ (8001238 <HAL_UART_MspInit+0x1c4>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800111c:	4b46      	ldr	r3, [pc, #280]	@ (8001238 <HAL_UART_MspInit+0x1c4>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001122:	4b45      	ldr	r3, [pc, #276]	@ (8001238 <HAL_UART_MspInit+0x1c4>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001128:	4b43      	ldr	r3, [pc, #268]	@ (8001238 <HAL_UART_MspInit+0x1c4>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800112e:	4b42      	ldr	r3, [pc, #264]	@ (8001238 <HAL_UART_MspInit+0x1c4>)
 8001130:	0018      	movs	r0, r3
 8001132:	f000 fa9d 	bl	8001670 <HAL_DMA_Init>
 8001136:	1e03      	subs	r3, r0, #0
 8001138:	d001      	beq.n	800113e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800113a:	f7ff ff4d 	bl	8000fd8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a3d      	ldr	r2, [pc, #244]	@ (8001238 <HAL_UART_MspInit+0x1c4>)
 8001142:	671a      	str	r2, [r3, #112]	@ 0x70
 8001144:	4b3c      	ldr	r3, [pc, #240]	@ (8001238 <HAL_UART_MspInit+0x1c4>)
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800114a:	4b3d      	ldr	r3, [pc, #244]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 800114c:	4a3d      	ldr	r2, [pc, #244]	@ (8001244 <HAL_UART_MspInit+0x1d0>)
 800114e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001150:	4b3b      	ldr	r3, [pc, #236]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 8001152:	2200      	movs	r2, #0
 8001154:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001156:	4b3a      	ldr	r3, [pc, #232]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800115c:	4b38      	ldr	r3, [pc, #224]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 800115e:	2280      	movs	r2, #128	@ 0x80
 8001160:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001162:	4b37      	ldr	r3, [pc, #220]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001168:	4b35      	ldr	r3, [pc, #212]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800116e:	4b34      	ldr	r3, [pc, #208]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001174:	4b32      	ldr	r3, [pc, #200]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800117a:	4b31      	ldr	r3, [pc, #196]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 800117c:	0018      	movs	r0, r3
 800117e:	f000 fa77 	bl	8001670 <HAL_DMA_Init>
 8001182:	1e03      	subs	r3, r0, #0
 8001184:	d001      	beq.n	800118a <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8001186:	f7ff ff27 	bl	8000fd8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a2c      	ldr	r2, [pc, #176]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 800118e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001190:	4b2b      	ldr	r3, [pc, #172]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	201c      	movs	r0, #28
 800119c:	f000 fa36 	bl	800160c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011a0:	201c      	movs	r0, #28
 80011a2:	f000 fa48 	bl	8001636 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011a6:	e03f      	b.n	8001228 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a26      	ldr	r2, [pc, #152]	@ (8001248 <HAL_UART_MspInit+0x1d4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d13a      	bne.n	8001228 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011b2:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <HAL_UART_MspInit+0x1c0>)
 80011b4:	69da      	ldr	r2, [r3, #28]
 80011b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001234 <HAL_UART_MspInit+0x1c0>)
 80011b8:	2180      	movs	r1, #128	@ 0x80
 80011ba:	02c9      	lsls	r1, r1, #11
 80011bc:	430a      	orrs	r2, r1
 80011be:	61da      	str	r2, [r3, #28]
 80011c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001234 <HAL_UART_MspInit+0x1c0>)
 80011c2:	69da      	ldr	r2, [r3, #28]
 80011c4:	2380      	movs	r3, #128	@ 0x80
 80011c6:	02db      	lsls	r3, r3, #11
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	4b19      	ldr	r3, [pc, #100]	@ (8001234 <HAL_UART_MspInit+0x1c0>)
 80011d0:	695a      	ldr	r2, [r3, #20]
 80011d2:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <HAL_UART_MspInit+0x1c0>)
 80011d4:	2180      	movs	r1, #128	@ 0x80
 80011d6:	02c9      	lsls	r1, r1, #11
 80011d8:	430a      	orrs	r2, r1
 80011da:	615a      	str	r2, [r3, #20]
 80011dc:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HAL_UART_MspInit+0x1c0>)
 80011de:	695a      	ldr	r2, [r3, #20]
 80011e0:	2380      	movs	r3, #128	@ 0x80
 80011e2:	02db      	lsls	r3, r3, #11
 80011e4:	4013      	ands	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011ea:	211c      	movs	r1, #28
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	22c0      	movs	r2, #192	@ 0xc0
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	2202      	movs	r2, #2
 80011f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001200:	187b      	adds	r3, r7, r1
 8001202:	2203      	movs	r2, #3
 8001204:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001206:	187b      	adds	r3, r7, r1
 8001208:	2204      	movs	r2, #4
 800120a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120c:	187b      	adds	r3, r7, r1
 800120e:	4a0f      	ldr	r2, [pc, #60]	@ (800124c <HAL_UART_MspInit+0x1d8>)
 8001210:	0019      	movs	r1, r3
 8001212:	0010      	movs	r0, r2
 8001214:	f000 fdb2 	bl	8001d7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8001218:	2200      	movs	r2, #0
 800121a:	2100      	movs	r1, #0
 800121c:	201d      	movs	r0, #29
 800121e:	f000 f9f5 	bl	800160c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001222:	201d      	movs	r0, #29
 8001224:	f000 fa07 	bl	8001636 <HAL_NVIC_EnableIRQ>
}
 8001228:	46c0      	nop			@ (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	b00d      	add	sp, #52	@ 0x34
 800122e:	bd90      	pop	{r4, r7, pc}
 8001230:	40004400 	.word	0x40004400
 8001234:	40021000 	.word	0x40021000
 8001238:	200001d4 	.word	0x200001d4
 800123c:	40020044 	.word	0x40020044
 8001240:	20000218 	.word	0x20000218
 8001244:	40020058 	.word	0x40020058
 8001248:	40004800 	.word	0x40004800
 800124c:	48000400 	.word	0x48000400

08001250 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001254:	46c0      	nop			@ (mov r8, r8)
 8001256:	e7fd      	b.n	8001254 <NMI_Handler+0x4>

08001258 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125c:	46c0      	nop			@ (mov r8, r8)
 800125e:	e7fd      	b.n	800125c <HardFault_Handler+0x4>

08001260 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001264:	46c0      	nop			@ (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126e:	46c0      	nop			@ (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001278:	f000 f900 	bl	800147c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127c:	46c0      	nop			@ (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
 * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
 */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001288:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 800128a:	0018      	movs	r0, r3
 800128c:	f000 fab5 	bl	80017fa <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001290:	4b04      	ldr	r3, [pc, #16]	@ (80012a4 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8001292:	0018      	movs	r0, r3
 8001294:	f000 fab1 	bl	80017fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001298:	46c0      	nop			@ (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			@ (mov r8, r8)
 80012a0:	200001d4 	.word	0x200001d4
 80012a4:	20000218 	.word	0x20000218

080012a8 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012ac:	4b03      	ldr	r3, [pc, #12]	@ (80012bc <TIM2_IRQHandler+0x14>)
 80012ae:	0018      	movs	r0, r3
 80012b0:	f001 fd96 	bl	8002de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012b4:	46c0      	nop			@ (mov r8, r8)
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			@ (mov r8, r8)
 80012bc:	2000007c 	.word	0x2000007c

080012c0 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
 */
void USART2_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012c4:	4b03      	ldr	r3, [pc, #12]	@ (80012d4 <USART2_IRQHandler+0x14>)
 80012c6:	0018      	movs	r0, r3
 80012c8:	f002 fade 	bl	8003888 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012cc:	46c0      	nop			@ (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	200000c4 	.word	0x200000c4

080012d8 <USART3_4_IRQHandler>:

/**
 * @brief This function handles USART3 and USART4 global interrupts.
 */
void USART3_4_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012dc:	4b03      	ldr	r3, [pc, #12]	@ (80012ec <USART3_4_IRQHandler+0x14>)
 80012de:	0018      	movs	r0, r3
 80012e0:	f002 fad2 	bl	8003888 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80012e4:	46c0      	nop			@ (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	46c0      	nop			@ (mov r8, r8)
 80012ec:	2000014c 	.word	0x2000014c

080012f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f8:	4a14      	ldr	r2, [pc, #80]	@ (800134c <_sbrk+0x5c>)
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <_sbrk+0x60>)
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001304:	4b13      	ldr	r3, [pc, #76]	@ (8001354 <_sbrk+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <_sbrk+0x64>)
 800130e:	4a12      	ldr	r2, [pc, #72]	@ (8001358 <_sbrk+0x68>)
 8001310:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001312:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <_sbrk+0x64>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	18d3      	adds	r3, r2, r3
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	429a      	cmp	r2, r3
 800131e:	d207      	bcs.n	8001330 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001320:	f003 f9d8 	bl	80046d4 <__errno>
 8001324:	0003      	movs	r3, r0
 8001326:	220c      	movs	r2, #12
 8001328:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800132a:	2301      	movs	r3, #1
 800132c:	425b      	negs	r3, r3
 800132e:	e009      	b.n	8001344 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001330:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <_sbrk+0x64>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001336:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <_sbrk+0x64>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	18d2      	adds	r2, r2, r3
 800133e:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <_sbrk+0x64>)
 8001340:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001342:	68fb      	ldr	r3, [r7, #12]
}
 8001344:	0018      	movs	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	b006      	add	sp, #24
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20004000 	.word	0x20004000
 8001350:	00000400 	.word	0x00000400
 8001354:	2000025c 	.word	0x2000025c
 8001358:	200003d0 	.word	0x200003d0

0800135c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001360:	46c0      	nop			@ (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_TIM_PeriodElapsedCallback>:
#include "main.h"

uint8_t g_timer_ms_1000 = DISABLE;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	2380      	movs	r3, #128	@ 0x80
 8001376:	05db      	lsls	r3, r3, #23
 8001378:	429a      	cmp	r2, r3
 800137a:	d106      	bne.n	800138a <HAL_TIM_PeriodElapsedCallback+0x22>
    {
        if(g_timer_ms_1000 == DISABLE)
 800137c:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <HAL_TIM_PeriodElapsedCallback+0x22>
        {
            g_timer_ms_1000 = ENABLE;
 8001384:	4b03      	ldr	r3, [pc, #12]	@ (8001394 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001386:	2201      	movs	r2, #1
 8001388:	701a      	strb	r2, [r3, #0]
        }
    }
}
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b002      	add	sp, #8
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	20000260 	.word	0x20000260

08001398 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001398:	480d      	ldr	r0, [pc, #52]	@ (80013d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800139a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800139c:	f7ff ffde 	bl	800135c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a0:	480c      	ldr	r0, [pc, #48]	@ (80013d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013a2:	490d      	ldr	r1, [pc, #52]	@ (80013d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013a4:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <LoopForever+0xe>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b8:	4c0a      	ldr	r4, [pc, #40]	@ (80013e4 <LoopForever+0x16>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013c6:	f003 f98b 	bl	80046e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ca:	f7ff fa9f 	bl	800090c <main>

080013ce <LoopForever>:

LoopForever:
    b LoopForever
 80013ce:	e7fe      	b.n	80013ce <LoopForever>
  ldr   r0, =_estack
 80013d0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80013d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013dc:	080051e4 	.word	0x080051e4
  ldr r2, =_sbss
 80013e0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80013e4:	200003d0 	.word	0x200003d0

080013e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC1_COMP_IRQHandler>
	...

080013ec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f0:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <HAL_Init+0x24>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <HAL_Init+0x24>)
 80013f6:	2110      	movs	r1, #16
 80013f8:	430a      	orrs	r2, r1
 80013fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80013fc:	2003      	movs	r0, #3
 80013fe:	f000 f809 	bl	8001414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001402:	f7ff fdef 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	0018      	movs	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			@ (mov r8, r8)
 8001410:	40022000 	.word	0x40022000

08001414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800141c:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <HAL_InitTick+0x5c>)
 800141e:	681c      	ldr	r4, [r3, #0]
 8001420:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <HAL_InitTick+0x60>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	0019      	movs	r1, r3
 8001426:	23fa      	movs	r3, #250	@ 0xfa
 8001428:	0098      	lsls	r0, r3, #2
 800142a:	f7fe fe7f 	bl	800012c <__udivsi3>
 800142e:	0003      	movs	r3, r0
 8001430:	0019      	movs	r1, r3
 8001432:	0020      	movs	r0, r4
 8001434:	f7fe fe7a 	bl	800012c <__udivsi3>
 8001438:	0003      	movs	r3, r0
 800143a:	0018      	movs	r0, r3
 800143c:	f000 f90b 	bl	8001656 <HAL_SYSTICK_Config>
 8001440:	1e03      	subs	r3, r0, #0
 8001442:	d001      	beq.n	8001448 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e00f      	b.n	8001468 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b03      	cmp	r3, #3
 800144c:	d80b      	bhi.n	8001466 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	2301      	movs	r3, #1
 8001452:	425b      	negs	r3, r3
 8001454:	2200      	movs	r2, #0
 8001456:	0018      	movs	r0, r3
 8001458:	f000 f8d8 	bl	800160c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_InitTick+0x64>)
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	e000      	b.n	8001468 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	b003      	add	sp, #12
 800146e:	bd90      	pop	{r4, r7, pc}
 8001470:	20000000 	.word	0x20000000
 8001474:	20000008 	.word	0x20000008
 8001478:	20000004 	.word	0x20000004

0800147c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001480:	4b05      	ldr	r3, [pc, #20]	@ (8001498 <HAL_IncTick+0x1c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	001a      	movs	r2, r3
 8001486:	4b05      	ldr	r3, [pc, #20]	@ (800149c <HAL_IncTick+0x20>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	18d2      	adds	r2, r2, r3
 800148c:	4b03      	ldr	r3, [pc, #12]	@ (800149c <HAL_IncTick+0x20>)
 800148e:	601a      	str	r2, [r3, #0]
}
 8001490:	46c0      	nop			@ (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	46c0      	nop			@ (mov r8, r8)
 8001498:	20000008 	.word	0x20000008
 800149c:	20000264 	.word	0x20000264

080014a0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  return uwTick;
 80014a4:	4b02      	ldr	r3, [pc, #8]	@ (80014b0 <HAL_GetTick+0x10>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	0018      	movs	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	46c0      	nop			@ (mov r8, r8)
 80014b0:	20000264 	.word	0x20000264

080014b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	0002      	movs	r2, r0
 80014bc:	1dfb      	adds	r3, r7, #7
 80014be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014c0:	1dfb      	adds	r3, r7, #7
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80014c6:	d809      	bhi.n	80014dc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c8:	1dfb      	adds	r3, r7, #7
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	001a      	movs	r2, r3
 80014ce:	231f      	movs	r3, #31
 80014d0:	401a      	ands	r2, r3
 80014d2:	4b04      	ldr	r3, [pc, #16]	@ (80014e4 <__NVIC_EnableIRQ+0x30>)
 80014d4:	2101      	movs	r1, #1
 80014d6:	4091      	lsls	r1, r2
 80014d8:	000a      	movs	r2, r1
 80014da:	601a      	str	r2, [r3, #0]
  }
}
 80014dc:	46c0      	nop			@ (mov r8, r8)
 80014de:	46bd      	mov	sp, r7
 80014e0:	b002      	add	sp, #8
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	e000e100 	.word	0xe000e100

080014e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	0002      	movs	r2, r0
 80014f0:	6039      	str	r1, [r7, #0]
 80014f2:	1dfb      	adds	r3, r7, #7
 80014f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014f6:	1dfb      	adds	r3, r7, #7
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80014fc:	d828      	bhi.n	8001550 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014fe:	4a2f      	ldr	r2, [pc, #188]	@ (80015bc <__NVIC_SetPriority+0xd4>)
 8001500:	1dfb      	adds	r3, r7, #7
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b25b      	sxtb	r3, r3
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	33c0      	adds	r3, #192	@ 0xc0
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	589b      	ldr	r3, [r3, r2]
 800150e:	1dfa      	adds	r2, r7, #7
 8001510:	7812      	ldrb	r2, [r2, #0]
 8001512:	0011      	movs	r1, r2
 8001514:	2203      	movs	r2, #3
 8001516:	400a      	ands	r2, r1
 8001518:	00d2      	lsls	r2, r2, #3
 800151a:	21ff      	movs	r1, #255	@ 0xff
 800151c:	4091      	lsls	r1, r2
 800151e:	000a      	movs	r2, r1
 8001520:	43d2      	mvns	r2, r2
 8001522:	401a      	ands	r2, r3
 8001524:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	019b      	lsls	r3, r3, #6
 800152a:	22ff      	movs	r2, #255	@ 0xff
 800152c:	401a      	ands	r2, r3
 800152e:	1dfb      	adds	r3, r7, #7
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	0018      	movs	r0, r3
 8001534:	2303      	movs	r3, #3
 8001536:	4003      	ands	r3, r0
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800153c:	481f      	ldr	r0, [pc, #124]	@ (80015bc <__NVIC_SetPriority+0xd4>)
 800153e:	1dfb      	adds	r3, r7, #7
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b25b      	sxtb	r3, r3
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	430a      	orrs	r2, r1
 8001548:	33c0      	adds	r3, #192	@ 0xc0
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800154e:	e031      	b.n	80015b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001550:	4a1b      	ldr	r2, [pc, #108]	@ (80015c0 <__NVIC_SetPriority+0xd8>)
 8001552:	1dfb      	adds	r3, r7, #7
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	0019      	movs	r1, r3
 8001558:	230f      	movs	r3, #15
 800155a:	400b      	ands	r3, r1
 800155c:	3b08      	subs	r3, #8
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3306      	adds	r3, #6
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	18d3      	adds	r3, r2, r3
 8001566:	3304      	adds	r3, #4
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	1dfa      	adds	r2, r7, #7
 800156c:	7812      	ldrb	r2, [r2, #0]
 800156e:	0011      	movs	r1, r2
 8001570:	2203      	movs	r2, #3
 8001572:	400a      	ands	r2, r1
 8001574:	00d2      	lsls	r2, r2, #3
 8001576:	21ff      	movs	r1, #255	@ 0xff
 8001578:	4091      	lsls	r1, r2
 800157a:	000a      	movs	r2, r1
 800157c:	43d2      	mvns	r2, r2
 800157e:	401a      	ands	r2, r3
 8001580:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	019b      	lsls	r3, r3, #6
 8001586:	22ff      	movs	r2, #255	@ 0xff
 8001588:	401a      	ands	r2, r3
 800158a:	1dfb      	adds	r3, r7, #7
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	0018      	movs	r0, r3
 8001590:	2303      	movs	r3, #3
 8001592:	4003      	ands	r3, r0
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001598:	4809      	ldr	r0, [pc, #36]	@ (80015c0 <__NVIC_SetPriority+0xd8>)
 800159a:	1dfb      	adds	r3, r7, #7
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	001c      	movs	r4, r3
 80015a0:	230f      	movs	r3, #15
 80015a2:	4023      	ands	r3, r4
 80015a4:	3b08      	subs	r3, #8
 80015a6:	089b      	lsrs	r3, r3, #2
 80015a8:	430a      	orrs	r2, r1
 80015aa:	3306      	adds	r3, #6
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	18c3      	adds	r3, r0, r3
 80015b0:	3304      	adds	r3, #4
 80015b2:	601a      	str	r2, [r3, #0]
}
 80015b4:	46c0      	nop			@ (mov r8, r8)
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b003      	add	sp, #12
 80015ba:	bd90      	pop	{r4, r7, pc}
 80015bc:	e000e100 	.word	0xe000e100
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	1e5a      	subs	r2, r3, #1
 80015d0:	2380      	movs	r3, #128	@ 0x80
 80015d2:	045b      	lsls	r3, r3, #17
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d301      	bcc.n	80015dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d8:	2301      	movs	r3, #1
 80015da:	e010      	b.n	80015fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <SysTick_Config+0x44>)
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	3a01      	subs	r2, #1
 80015e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e4:	2301      	movs	r3, #1
 80015e6:	425b      	negs	r3, r3
 80015e8:	2103      	movs	r1, #3
 80015ea:	0018      	movs	r0, r3
 80015ec:	f7ff ff7c 	bl	80014e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f0:	4b05      	ldr	r3, [pc, #20]	@ (8001608 <SysTick_Config+0x44>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f6:	4b04      	ldr	r3, [pc, #16]	@ (8001608 <SysTick_Config+0x44>)
 80015f8:	2207      	movs	r2, #7
 80015fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	0018      	movs	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	b002      	add	sp, #8
 8001604:	bd80      	pop	{r7, pc}
 8001606:	46c0      	nop			@ (mov r8, r8)
 8001608:	e000e010 	.word	0xe000e010

0800160c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	210f      	movs	r1, #15
 8001618:	187b      	adds	r3, r7, r1
 800161a:	1c02      	adds	r2, r0, #0
 800161c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	187b      	adds	r3, r7, r1
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b25b      	sxtb	r3, r3
 8001626:	0011      	movs	r1, r2
 8001628:	0018      	movs	r0, r3
 800162a:	f7ff ff5d 	bl	80014e8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800162e:	46c0      	nop			@ (mov r8, r8)
 8001630:	46bd      	mov	sp, r7
 8001632:	b004      	add	sp, #16
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	0002      	movs	r2, r0
 800163e:	1dfb      	adds	r3, r7, #7
 8001640:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001642:	1dfb      	adds	r3, r7, #7
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	b25b      	sxtb	r3, r3
 8001648:	0018      	movs	r0, r3
 800164a:	f7ff ff33 	bl	80014b4 <__NVIC_EnableIRQ>
}
 800164e:	46c0      	nop			@ (mov r8, r8)
 8001650:	46bd      	mov	sp, r7
 8001652:	b002      	add	sp, #8
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	0018      	movs	r0, r3
 8001662:	f7ff ffaf 	bl	80015c4 <SysTick_Config>
 8001666:	0003      	movs	r3, r0
}
 8001668:	0018      	movs	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	b002      	add	sp, #8
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e036      	b.n	80016f4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2221      	movs	r2, #33	@ 0x21
 800168a:	2102      	movs	r1, #2
 800168c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4a18      	ldr	r2, [pc, #96]	@ (80016fc <HAL_DMA_Init+0x8c>)
 800169a:	4013      	ands	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	0018      	movs	r0, r3
 80016d8:	f000 f932 	bl	8001940 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2221      	movs	r2, #33	@ 0x21
 80016e6:	2101      	movs	r1, #1
 80016e8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2220      	movs	r2, #32
 80016ee:	2100      	movs	r1, #0
 80016f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	0018      	movs	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b004      	add	sp, #16
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	ffffc00f 	.word	0xffffc00f

08001700 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2221      	movs	r2, #33	@ 0x21
 800170c:	5c9b      	ldrb	r3, [r3, r2]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d008      	beq.n	8001726 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2204      	movs	r2, #4
 8001718:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2220      	movs	r2, #32
 800171e:	2100      	movs	r1, #0
 8001720:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e020      	b.n	8001768 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	210e      	movs	r1, #14
 8001732:	438a      	bics	r2, r1
 8001734:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2101      	movs	r1, #1
 8001742:	438a      	bics	r2, r1
 8001744:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800174e:	2101      	movs	r1, #1
 8001750:	4091      	lsls	r1, r2
 8001752:	000a      	movs	r2, r1
 8001754:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2221      	movs	r2, #33	@ 0x21
 800175a:	2101      	movs	r1, #1
 800175c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2220      	movs	r2, #32
 8001762:	2100      	movs	r1, #0
 8001764:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	0018      	movs	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	b002      	add	sp, #8
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001778:	210f      	movs	r1, #15
 800177a:	187b      	adds	r3, r7, r1
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2221      	movs	r2, #33	@ 0x21
 8001784:	5c9b      	ldrb	r3, [r3, r2]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d006      	beq.n	800179a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2204      	movs	r2, #4
 8001790:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001792:	187b      	adds	r3, r7, r1
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
 8001798:	e028      	b.n	80017ec <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	210e      	movs	r1, #14
 80017a6:	438a      	bics	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2101      	movs	r1, #1
 80017b6:	438a      	bics	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017c2:	2101      	movs	r1, #1
 80017c4:	4091      	lsls	r1, r2
 80017c6:	000a      	movs	r2, r1
 80017c8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2221      	movs	r2, #33	@ 0x21
 80017ce:	2101      	movs	r1, #1
 80017d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2220      	movs	r2, #32
 80017d6:	2100      	movs	r1, #0
 80017d8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d004      	beq.n	80017ec <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	0010      	movs	r0, r2
 80017ea:	4798      	blx	r3
    }
  }
  return status;
 80017ec:	230f      	movs	r3, #15
 80017ee:	18fb      	adds	r3, r7, r3
 80017f0:	781b      	ldrb	r3, [r3, #0]
}
 80017f2:	0018      	movs	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b004      	add	sp, #16
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b084      	sub	sp, #16
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	2204      	movs	r2, #4
 8001818:	409a      	lsls	r2, r3
 800181a:	0013      	movs	r3, r2
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	4013      	ands	r3, r2
 8001820:	d024      	beq.n	800186c <HAL_DMA_IRQHandler+0x72>
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2204      	movs	r2, #4
 8001826:	4013      	ands	r3, r2
 8001828:	d020      	beq.n	800186c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2220      	movs	r2, #32
 8001832:	4013      	ands	r3, r2
 8001834:	d107      	bne.n	8001846 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2104      	movs	r1, #4
 8001842:	438a      	bics	r2, r1
 8001844:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800184e:	2104      	movs	r1, #4
 8001850:	4091      	lsls	r1, r2
 8001852:	000a      	movs	r2, r1
 8001854:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185a:	2b00      	cmp	r3, #0
 800185c:	d100      	bne.n	8001860 <HAL_DMA_IRQHandler+0x66>
 800185e:	e06a      	b.n	8001936 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	0010      	movs	r0, r2
 8001868:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800186a:	e064      	b.n	8001936 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001870:	2202      	movs	r2, #2
 8001872:	409a      	lsls	r2, r3
 8001874:	0013      	movs	r3, r2
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4013      	ands	r3, r2
 800187a:	d02b      	beq.n	80018d4 <HAL_DMA_IRQHandler+0xda>
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2202      	movs	r2, #2
 8001880:	4013      	ands	r3, r2
 8001882:	d027      	beq.n	80018d4 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2220      	movs	r2, #32
 800188c:	4013      	ands	r3, r2
 800188e:	d10b      	bne.n	80018a8 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	210a      	movs	r1, #10
 800189c:	438a      	bics	r2, r1
 800189e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2221      	movs	r2, #33	@ 0x21
 80018a4:	2101      	movs	r1, #1
 80018a6:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018b0:	2102      	movs	r1, #2
 80018b2:	4091      	lsls	r1, r2
 80018b4:	000a      	movs	r2, r1
 80018b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2220      	movs	r2, #32
 80018bc:	2100      	movs	r1, #0
 80018be:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d036      	beq.n	8001936 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	0010      	movs	r0, r2
 80018d0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80018d2:	e030      	b.n	8001936 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d8:	2208      	movs	r2, #8
 80018da:	409a      	lsls	r2, r3
 80018dc:	0013      	movs	r3, r2
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	4013      	ands	r3, r2
 80018e2:	d028      	beq.n	8001936 <HAL_DMA_IRQHandler+0x13c>
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2208      	movs	r2, #8
 80018e8:	4013      	ands	r3, r2
 80018ea:	d024      	beq.n	8001936 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	210e      	movs	r1, #14
 80018f8:	438a      	bics	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001904:	2101      	movs	r1, #1
 8001906:	4091      	lsls	r1, r2
 8001908:	000a      	movs	r2, r1
 800190a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2221      	movs	r2, #33	@ 0x21
 8001916:	2101      	movs	r1, #1
 8001918:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2220      	movs	r2, #32
 800191e:	2100      	movs	r1, #0
 8001920:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	0010      	movs	r0, r2
 8001932:	4798      	blx	r3
    }
  }
}
 8001934:	e7ff      	b.n	8001936 <HAL_DMA_IRQHandler+0x13c>
 8001936:	46c0      	nop			@ (mov r8, r8)
 8001938:	46bd      	mov	sp, r7
 800193a:	b004      	add	sp, #16
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a08      	ldr	r2, [pc, #32]	@ (8001970 <DMA_CalcBaseAndBitshift+0x30>)
 800194e:	4694      	mov	ip, r2
 8001950:	4463      	add	r3, ip
 8001952:	2114      	movs	r1, #20
 8001954:	0018      	movs	r0, r3
 8001956:	f7fe fbe9 	bl	800012c <__udivsi3>
 800195a:	0003      	movs	r3, r0
 800195c:	009a      	lsls	r2, r3, #2
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a03      	ldr	r2, [pc, #12]	@ (8001974 <DMA_CalcBaseAndBitshift+0x34>)
 8001966:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001968:	46c0      	nop			@ (mov r8, r8)
 800196a:	46bd      	mov	sp, r7
 800196c:	b002      	add	sp, #8
 800196e:	bd80      	pop	{r7, pc}
 8001970:	bffdfff8 	.word	0xbffdfff8
 8001974:	40020000 	.word	0x40020000

08001978 <HAL_FLASH_Program>:
 * @param  Data          Specifie the data to be programmed
 *
 * @retval HAL_StatusTypeDef HAL Status
 */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	603a      	str	r2, [r7, #0]
 8001984:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001986:	2317      	movs	r3, #23
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 800198e:	2316      	movs	r3, #22
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8001996:	2315      	movs	r3, #21
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800199e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a98 <HAL_FLASH_Program+0x120>)
 80019a0:	7e1b      	ldrb	r3, [r3, #24]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d101      	bne.n	80019aa <HAL_FLASH_Program+0x32>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e072      	b.n	8001a90 <HAL_FLASH_Program+0x118>
 80019aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001a98 <HAL_FLASH_Program+0x120>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80019b0:	2317      	movs	r3, #23
 80019b2:	18fe      	adds	r6, r7, r3
 80019b4:	4b39      	ldr	r3, [pc, #228]	@ (8001a9c <HAL_FLASH_Program+0x124>)
 80019b6:	0018      	movs	r0, r3
 80019b8:	f000 f8c4 	bl	8001b44 <FLASH_WaitForLastOperation>
 80019bc:	0003      	movs	r3, r0
 80019be:	7033      	strb	r3, [r6, #0]

  if (status == HAL_OK)
 80019c0:	2317      	movs	r3, #23
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d15c      	bne.n	8001a84 <HAL_FLASH_Program+0x10c>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d104      	bne.n	80019da <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80019d0:	2315      	movs	r3, #21
 80019d2:	18fb      	adds	r3, r7, r3
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
 80019d8:	e00b      	b.n	80019f2 <HAL_FLASH_Program+0x7a>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d104      	bne.n	80019ea <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80019e0:	2315      	movs	r3, #21
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	2202      	movs	r2, #2
 80019e6:	701a      	strb	r2, [r3, #0]
 80019e8:	e003      	b.n	80019f2 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80019ea:	2315      	movs	r3, #21
 80019ec:	18fb      	adds	r3, r7, r3
 80019ee:	2204      	movs	r2, #4
 80019f0:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 80019f2:	2316      	movs	r3, #22
 80019f4:	18fb      	adds	r3, r7, r3
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
 80019fa:	e039      	b.n	8001a70 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U * index)), (uint16_t)(Data >> (16U * index)));
 80019fc:	2116      	movs	r1, #22
 80019fe:	187b      	adds	r3, r7, r1
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	005a      	lsls	r2, r3, #1
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	18d0      	adds	r0, r2, r3
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	001a      	movs	r2, r3
 8001a10:	3a20      	subs	r2, #32
 8001a12:	2a00      	cmp	r2, #0
 8001a14:	db03      	blt.n	8001a1e <HAL_FLASH_Program+0xa6>
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	40d1      	lsrs	r1, r2
 8001a1a:	000c      	movs	r4, r1
 8001a1c:	e008      	b.n	8001a30 <HAL_FLASH_Program+0xb8>
 8001a1e:	2220      	movs	r2, #32
 8001a20:	1ad2      	subs	r2, r2, r3
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	4091      	lsls	r1, r2
 8001a26:	000a      	movs	r2, r1
 8001a28:	6839      	ldr	r1, [r7, #0]
 8001a2a:	40d9      	lsrs	r1, r3
 8001a2c:	000c      	movs	r4, r1
 8001a2e:	4314      	orrs	r4, r2
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	40da      	lsrs	r2, r3
 8001a34:	0015      	movs	r5, r2
 8001a36:	b2a3      	uxth	r3, r4
 8001a38:	0019      	movs	r1, r3
 8001a3a:	f000 f867 	bl	8001b0c <FLASH_Program_HalfWord>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a3e:	2317      	movs	r3, #23
 8001a40:	18fe      	adds	r6, r7, r3
 8001a42:	4b16      	ldr	r3, [pc, #88]	@ (8001a9c <HAL_FLASH_Program+0x124>)
 8001a44:	0018      	movs	r0, r3
 8001a46:	f000 f87d 	bl	8001b44 <FLASH_WaitForLastOperation>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	7033      	strb	r3, [r6, #0]

      /* If the program operation is completed, disable the PG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001a4e:	4b14      	ldr	r3, [pc, #80]	@ (8001aa0 <HAL_FLASH_Program+0x128>)
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	4b13      	ldr	r3, [pc, #76]	@ (8001aa0 <HAL_FLASH_Program+0x128>)
 8001a54:	2101      	movs	r1, #1
 8001a56:	438a      	bics	r2, r1
 8001a58:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8001a5a:	2317      	movs	r3, #23
 8001a5c:	18fb      	adds	r3, r7, r3
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10e      	bne.n	8001a82 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8001a64:	2116      	movs	r1, #22
 8001a66:	187b      	adds	r3, r7, r1
 8001a68:	781a      	ldrb	r2, [r3, #0]
 8001a6a:	187b      	adds	r3, r7, r1
 8001a6c:	3201      	adds	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	2316      	movs	r3, #22
 8001a72:	18fa      	adds	r2, r7, r3
 8001a74:	2315      	movs	r3, #21
 8001a76:	18fb      	adds	r3, r7, r3
 8001a78:	7812      	ldrb	r2, [r2, #0]
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d3bd      	bcc.n	80019fc <HAL_FLASH_Program+0x84>
 8001a80:	e000      	b.n	8001a84 <HAL_FLASH_Program+0x10c>
      {
        break;
 8001a82:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a84:	4b04      	ldr	r3, [pc, #16]	@ (8001a98 <HAL_FLASH_Program+0x120>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	761a      	strb	r2, [r3, #24]

  return status;
 8001a8a:	2317      	movs	r3, #23
 8001a8c:	18fb      	adds	r3, r7, r3
 8001a8e:	781b      	ldrb	r3, [r3, #0]
}
 8001a90:	0018      	movs	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b007      	add	sp, #28
 8001a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a98:	20000268 	.word	0x20000268
 8001a9c:	0000c350 	.word	0x0000c350
 8001aa0:	40022000 	.word	0x40022000

08001aa4 <HAL_FLASH_Unlock>:
/**
 * @brief  Unlock the FLASH control register access
 * @retval HAL Status
 */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001aaa:	1dfb      	adds	r3, r7, #7
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <HAL_FLASH_Unlock+0x40>)
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	2280      	movs	r2, #128	@ 0x80
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d00d      	beq.n	8001ad6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001aba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <HAL_FLASH_Unlock+0x40>)
 8001abc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <HAL_FLASH_Unlock+0x44>)
 8001abe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ac0:	4b08      	ldr	r3, [pc, #32]	@ (8001ae4 <HAL_FLASH_Unlock+0x40>)
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8001aec <HAL_FLASH_Unlock+0x48>)
 8001ac4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001ac6:	4b07      	ldr	r3, [pc, #28]	@ (8001ae4 <HAL_FLASH_Unlock+0x40>)
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2280      	movs	r2, #128	@ 0x80
 8001acc:	4013      	ands	r3, r2
 8001ace:	d002      	beq.n	8001ad6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001ad0:	1dfb      	adds	r3, r7, #7
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8001ad6:	1dfb      	adds	r3, r7, #7
 8001ad8:	781b      	ldrb	r3, [r3, #0]
}
 8001ada:	0018      	movs	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b002      	add	sp, #8
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	46c0      	nop			@ (mov r8, r8)
 8001ae4:	40022000 	.word	0x40022000
 8001ae8:	45670123 	.word	0x45670123
 8001aec:	cdef89ab 	.word	0xcdef89ab

08001af0 <HAL_FLASH_Lock>:
/**
 * @brief  Locks the FLASH control register access
 * @retval HAL Status
 */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001af4:	4b04      	ldr	r3, [pc, #16]	@ (8001b08 <HAL_FLASH_Lock+0x18>)
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	4b03      	ldr	r3, [pc, #12]	@ (8001b08 <HAL_FLASH_Lock+0x18>)
 8001afa:	2180      	movs	r1, #128	@ 0x80
 8001afc:	430a      	orrs	r2, r1
 8001afe:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	0018      	movs	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40022000 	.word	0x40022000

08001b0c <FLASH_Program_HalfWord>:
 * @param  Address specify the address to be programmed.
 * @param  Data    specify the data to be programmed.
 * @retval None
 */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	000a      	movs	r2, r1
 8001b16:	1cbb      	adds	r3, r7, #2
 8001b18:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <FLASH_Program_HalfWord+0x30>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	61da      	str	r2, [r3, #28]

  /* Proceed to program the new data */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001b20:	4b07      	ldr	r3, [pc, #28]	@ (8001b40 <FLASH_Program_HalfWord+0x34>)
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <FLASH_Program_HalfWord+0x34>)
 8001b26:	2101      	movs	r1, #1
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t *)Address = Data;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	1cba      	adds	r2, r7, #2
 8001b30:	8812      	ldrh	r2, [r2, #0]
 8001b32:	801a      	strh	r2, [r3, #0]
}
 8001b34:	46c0      	nop			@ (mov r8, r8)
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b002      	add	sp, #8
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000268 	.word	0x20000268
 8001b40:	40022000 	.word	0x40022000

08001b44 <FLASH_WaitForLastOperation>:
 * @brief  Wait for a FLASH operation to complete.
 * @param  Timeout  maximum flash operation timeout
 * @retval HAL Status
 */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001b4c:	f7ff fca8 	bl	80014a0 <HAL_GetTick>
 8001b50:	0003      	movs	r3, r0
 8001b52:	60fb      	str	r3, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001b54:	e00f      	b.n	8001b76 <FLASH_WaitForLastOperation+0x32>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	d00c      	beq.n	8001b76 <FLASH_WaitForLastOperation+0x32>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d007      	beq.n	8001b72 <FLASH_WaitForLastOperation+0x2e>
 8001b62:	f7ff fc9d 	bl	80014a0 <HAL_GetTick>
 8001b66:	0002      	movs	r2, r0
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d201      	bcs.n	8001b76 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e01f      	b.n	8001bb6 <FLASH_WaitForLastOperation+0x72>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001b76:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <FLASH_WaitForLastOperation+0x7c>)
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d0e9      	beq.n	8001b56 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001b82:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <FLASH_WaitForLastOperation+0x7c>)
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2220      	movs	r2, #32
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b20      	cmp	r3, #32
 8001b8c:	d102      	bne.n	8001b94 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <FLASH_WaitForLastOperation+0x7c>)
 8001b90:	2220      	movs	r2, #32
 8001b92:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||
 8001b94:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc0 <FLASH_WaitForLastOperation+0x7c>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	2210      	movs	r2, #16
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b10      	cmp	r3, #16
 8001b9e:	d005      	beq.n	8001bac <FLASH_WaitForLastOperation+0x68>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001ba0:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <FLASH_WaitForLastOperation+0x7c>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	4013      	ands	r3, r2
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d103      	bne.n	8001bb4 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001bac:	f000 f80a 	bl	8001bc4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b004      	add	sp, #16
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			@ (mov r8, r8)
 8001bc0:	40022000 	.word	0x40022000

08001bc4 <FLASH_SetErrorCode>:
/**
 * @brief  Set the specific FLASH error flag.
 * @retval None
 */
static void FLASH_SetErrorCode(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001bce:	4b13      	ldr	r3, [pc, #76]	@ (8001c1c <FLASH_SetErrorCode+0x58>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2210      	movs	r2, #16
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d109      	bne.n	8001bee <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001bda:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <FLASH_SetErrorCode+0x5c>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	2202      	movs	r2, #2
 8001be0:	431a      	orrs	r2, r3
 8001be2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c20 <FLASH_SetErrorCode+0x5c>)
 8001be4:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2210      	movs	r2, #16
 8001bea:	4313      	orrs	r3, r2
 8001bec:	607b      	str	r3, [r7, #4]
  }
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001bee:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <FLASH_SetErrorCode+0x58>)
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d109      	bne.n	8001c0e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001bfa:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <FLASH_SetErrorCode+0x5c>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	431a      	orrs	r2, r3
 8001c02:	4b07      	ldr	r3, [pc, #28]	@ (8001c20 <FLASH_SetErrorCode+0x5c>)
 8001c04:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2204      	movs	r2, #4
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001c0e:	4b03      	ldr	r3, [pc, #12]	@ (8001c1c <FLASH_SetErrorCode+0x58>)
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	60da      	str	r2, [r3, #12]
}
 8001c14:	46c0      	nop			@ (mov r8, r8)
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b002      	add	sp, #8
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40022000 	.word	0x40022000
 8001c20:	20000268 	.word	0x20000268

08001c24 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001c24:	b5b0      	push	{r4, r5, r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c2e:	230f      	movs	r3, #15
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	2201      	movs	r2, #1
 8001c34:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001c3a:	4b32      	ldr	r3, [pc, #200]	@ (8001d04 <HAL_FLASHEx_Erase+0xe0>)
 8001c3c:	7e1b      	ldrb	r3, [r3, #24]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_FLASHEx_Erase+0x22>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e05a      	b.n	8001cfc <HAL_FLASHEx_Erase+0xd8>
 8001c46:	4b2f      	ldr	r3, [pc, #188]	@ (8001d04 <HAL_FLASHEx_Erase+0xe0>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d116      	bne.n	8001c82 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001c54:	4b2c      	ldr	r3, [pc, #176]	@ (8001d08 <HAL_FLASHEx_Erase+0xe4>)
 8001c56:	0018      	movs	r0, r3
 8001c58:	f7ff ff74 	bl	8001b44 <FLASH_WaitForLastOperation>
 8001c5c:	1e03      	subs	r3, r0, #0
 8001c5e:	d147      	bne.n	8001cf0 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8001c60:	f000 f856 	bl	8001d10 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c64:	230f      	movs	r3, #15
 8001c66:	18fc      	adds	r4, r7, r3
 8001c68:	4b27      	ldr	r3, [pc, #156]	@ (8001d08 <HAL_FLASHEx_Erase+0xe4>)
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f7ff ff6a 	bl	8001b44 <FLASH_WaitForLastOperation>
 8001c70:	0003      	movs	r3, r0
 8001c72:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001c74:	4b25      	ldr	r3, [pc, #148]	@ (8001d0c <HAL_FLASHEx_Erase+0xe8>)
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	4b24      	ldr	r3, [pc, #144]	@ (8001d0c <HAL_FLASHEx_Erase+0xe8>)
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	438a      	bics	r2, r1
 8001c7e:	611a      	str	r2, [r3, #16]
 8001c80:	e036      	b.n	8001cf0 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001c82:	4b21      	ldr	r3, [pc, #132]	@ (8001d08 <HAL_FLASHEx_Erase+0xe4>)
 8001c84:	0018      	movs	r0, r3
 8001c86:	f7ff ff5d 	bl	8001b44 <FLASH_WaitForLastOperation>
 8001c8a:	1e03      	subs	r3, r0, #0
 8001c8c:	d130      	bne.n	8001cf0 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2201      	movs	r2, #1
 8001c92:	4252      	negs	r2, r2
 8001c94:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	e01f      	b.n	8001cde <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f000 f84d 	bl	8001d40 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ca6:	250f      	movs	r5, #15
 8001ca8:	197c      	adds	r4, r7, r5
 8001caa:	4b17      	ldr	r3, [pc, #92]	@ (8001d08 <HAL_FLASHEx_Erase+0xe4>)
 8001cac:	0018      	movs	r0, r3
 8001cae:	f7ff ff49 	bl	8001b44 <FLASH_WaitForLastOperation>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001cb6:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <HAL_FLASHEx_Erase+0xe8>)
 8001cb8:	691a      	ldr	r2, [r3, #16]
 8001cba:	4b14      	ldr	r3, [pc, #80]	@ (8001d0c <HAL_FLASHEx_Erase+0xe8>)
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	438a      	bics	r2, r1
 8001cc0:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8001cc2:	197b      	adds	r3, r7, r5
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	601a      	str	r2, [r3, #0]
            break;
 8001cd0:	e00e      	b.n	8001cf0 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2280      	movs	r2, #128	@ 0x80
 8001cd6:	0112      	lsls	r2, r2, #4
 8001cd8:	4694      	mov	ip, r2
 8001cda:	4463      	add	r3, ip
 8001cdc:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	02da      	lsls	r2, r3, #11
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	18d3      	adds	r3, r2, r3
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d3d6      	bcc.n	8001c9e <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001cf0:	4b04      	ldr	r3, [pc, #16]	@ (8001d04 <HAL_FLASHEx_Erase+0xe0>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	761a      	strb	r2, [r3, #24]

  return status;
 8001cf6:	230f      	movs	r3, #15
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	781b      	ldrb	r3, [r3, #0]
}
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	b004      	add	sp, #16
 8001d02:	bdb0      	pop	{r4, r5, r7, pc}
 8001d04:	20000268 	.word	0x20000268
 8001d08:	0000c350 	.word	0x0000c350
 8001d0c:	40022000 	.word	0x40022000

08001d10 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d14:	4b08      	ldr	r3, [pc, #32]	@ (8001d38 <FLASH_MassErase+0x28>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001d1a:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <FLASH_MassErase+0x2c>)
 8001d1c:	691a      	ldr	r2, [r3, #16]
 8001d1e:	4b07      	ldr	r3, [pc, #28]	@ (8001d3c <FLASH_MassErase+0x2c>)
 8001d20:	2104      	movs	r1, #4
 8001d22:	430a      	orrs	r2, r1
 8001d24:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001d26:	4b05      	ldr	r3, [pc, #20]	@ (8001d3c <FLASH_MassErase+0x2c>)
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	4b04      	ldr	r3, [pc, #16]	@ (8001d3c <FLASH_MassErase+0x2c>)
 8001d2c:	2140      	movs	r1, #64	@ 0x40
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	611a      	str	r2, [r3, #16]
}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000268 	.word	0x20000268
 8001d3c:	40022000 	.word	0x40022000

08001d40 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d48:	4b0a      	ldr	r3, [pc, #40]	@ (8001d74 <FLASH_PageErase+0x34>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <FLASH_PageErase+0x38>)
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <FLASH_PageErase+0x38>)
 8001d54:	2102      	movs	r1, #2
 8001d56:	430a      	orrs	r2, r1
 8001d58:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001d5a:	4b07      	ldr	r3, [pc, #28]	@ (8001d78 <FLASH_PageErase+0x38>)
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001d60:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <FLASH_PageErase+0x38>)
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	4b04      	ldr	r3, [pc, #16]	@ (8001d78 <FLASH_PageErase+0x38>)
 8001d66:	2140      	movs	r1, #64	@ 0x40
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	611a      	str	r2, [r3, #16]
}
 8001d6c:	46c0      	nop			@ (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b002      	add	sp, #8
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000268 	.word	0x20000268
 8001d78:	40022000 	.word	0x40022000

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8a:	e155      	b.n	8002038 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2101      	movs	r1, #1
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4091      	lsls	r1, r2
 8001d96:	000a      	movs	r2, r1
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d100      	bne.n	8001da4 <HAL_GPIO_Init+0x28>
 8001da2:	e146      	b.n	8002032 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2203      	movs	r2, #3
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d005      	beq.n	8001dbc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2203      	movs	r2, #3
 8001db6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d130      	bne.n	8001e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	0013      	movs	r3, r2
 8001dcc:	43da      	mvns	r2, r3
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	0013      	movs	r3, r2
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001df2:	2201      	movs	r2, #1
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	409a      	lsls	r2, r3
 8001df8:	0013      	movs	r3, r2
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	091b      	lsrs	r3, r3, #4
 8001e08:	2201      	movs	r2, #1
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	0013      	movs	r3, r2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2203      	movs	r2, #3
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d017      	beq.n	8001e5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	2203      	movs	r2, #3
 8001e36:	409a      	lsls	r2, r3
 8001e38:	0013      	movs	r3, r2
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	0013      	movs	r3, r2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2203      	movs	r2, #3
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d123      	bne.n	8001eae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	08da      	lsrs	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	0092      	lsls	r2, r2, #2
 8001e70:	58d3      	ldr	r3, [r2, r3]
 8001e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	2207      	movs	r2, #7
 8001e78:	4013      	ands	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	0013      	movs	r3, r2
 8001e82:	43da      	mvns	r2, r3
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2107      	movs	r1, #7
 8001e92:	400b      	ands	r3, r1
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	409a      	lsls	r2, r3
 8001e98:	0013      	movs	r3, r2
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	08da      	lsrs	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3208      	adds	r2, #8
 8001ea8:	0092      	lsls	r2, r2, #2
 8001eaa:	6939      	ldr	r1, [r7, #16]
 8001eac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	2203      	movs	r2, #3
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	0013      	movs	r3, r2
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2203      	movs	r2, #3
 8001ecc:	401a      	ands	r2, r3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	0013      	movs	r3, r2
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	23c0      	movs	r3, #192	@ 0xc0
 8001ee8:	029b      	lsls	r3, r3, #10
 8001eea:	4013      	ands	r3, r2
 8001eec:	d100      	bne.n	8001ef0 <HAL_GPIO_Init+0x174>
 8001eee:	e0a0      	b.n	8002032 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef0:	4b57      	ldr	r3, [pc, #348]	@ (8002050 <HAL_GPIO_Init+0x2d4>)
 8001ef2:	699a      	ldr	r2, [r3, #24]
 8001ef4:	4b56      	ldr	r3, [pc, #344]	@ (8002050 <HAL_GPIO_Init+0x2d4>)
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	619a      	str	r2, [r3, #24]
 8001efc:	4b54      	ldr	r3, [pc, #336]	@ (8002050 <HAL_GPIO_Init+0x2d4>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2201      	movs	r2, #1
 8001f02:	4013      	ands	r3, r2
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f08:	4a52      	ldr	r2, [pc, #328]	@ (8002054 <HAL_GPIO_Init+0x2d8>)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	3302      	adds	r3, #2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	589b      	ldr	r3, [r3, r2]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2203      	movs	r2, #3
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	220f      	movs	r2, #15
 8001f20:	409a      	lsls	r2, r3
 8001f22:	0013      	movs	r3, r2
 8001f24:	43da      	mvns	r2, r3
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	2390      	movs	r3, #144	@ 0x90
 8001f30:	05db      	lsls	r3, r3, #23
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d019      	beq.n	8001f6a <HAL_GPIO_Init+0x1ee>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a47      	ldr	r2, [pc, #284]	@ (8002058 <HAL_GPIO_Init+0x2dc>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d013      	beq.n	8001f66 <HAL_GPIO_Init+0x1ea>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a46      	ldr	r2, [pc, #280]	@ (800205c <HAL_GPIO_Init+0x2e0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00d      	beq.n	8001f62 <HAL_GPIO_Init+0x1e6>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a45      	ldr	r2, [pc, #276]	@ (8002060 <HAL_GPIO_Init+0x2e4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d007      	beq.n	8001f5e <HAL_GPIO_Init+0x1e2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a44      	ldr	r2, [pc, #272]	@ (8002064 <HAL_GPIO_Init+0x2e8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d101      	bne.n	8001f5a <HAL_GPIO_Init+0x1de>
 8001f56:	2304      	movs	r3, #4
 8001f58:	e008      	b.n	8001f6c <HAL_GPIO_Init+0x1f0>
 8001f5a:	2305      	movs	r3, #5
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x1f0>
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e004      	b.n	8001f6c <HAL_GPIO_Init+0x1f0>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e002      	b.n	8001f6c <HAL_GPIO_Init+0x1f0>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_GPIO_Init+0x1f0>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	2103      	movs	r1, #3
 8001f70:	400a      	ands	r2, r1
 8001f72:	0092      	lsls	r2, r2, #2
 8001f74:	4093      	lsls	r3, r2
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f7c:	4935      	ldr	r1, [pc, #212]	@ (8002054 <HAL_GPIO_Init+0x2d8>)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	3302      	adds	r3, #2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f8a:	4b37      	ldr	r3, [pc, #220]	@ (8002068 <HAL_GPIO_Init+0x2ec>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	43da      	mvns	r2, r3
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	2380      	movs	r3, #128	@ 0x80
 8001fa0:	035b      	lsls	r3, r3, #13
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fae:	4b2e      	ldr	r3, [pc, #184]	@ (8002068 <HAL_GPIO_Init+0x2ec>)
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001fb4:	4b2c      	ldr	r3, [pc, #176]	@ (8002068 <HAL_GPIO_Init+0x2ec>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	43da      	mvns	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	2380      	movs	r3, #128	@ 0x80
 8001fca:	039b      	lsls	r3, r3, #14
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fd8:	4b23      	ldr	r3, [pc, #140]	@ (8002068 <HAL_GPIO_Init+0x2ec>)
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001fde:	4b22      	ldr	r3, [pc, #136]	@ (8002068 <HAL_GPIO_Init+0x2ec>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	2380      	movs	r3, #128	@ 0x80
 8001ff4:	029b      	lsls	r3, r3, #10
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002002:	4b19      	ldr	r3, [pc, #100]	@ (8002068 <HAL_GPIO_Init+0x2ec>)
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002008:	4b17      	ldr	r3, [pc, #92]	@ (8002068 <HAL_GPIO_Init+0x2ec>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	43da      	mvns	r2, r3
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	2380      	movs	r3, #128	@ 0x80
 800201e:	025b      	lsls	r3, r3, #9
 8002020:	4013      	ands	r3, r2
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800202c:	4b0e      	ldr	r3, [pc, #56]	@ (8002068 <HAL_GPIO_Init+0x2ec>)
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	3301      	adds	r3, #1
 8002036:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	40da      	lsrs	r2, r3
 8002040:	1e13      	subs	r3, r2, #0
 8002042:	d000      	beq.n	8002046 <HAL_GPIO_Init+0x2ca>
 8002044:	e6a2      	b.n	8001d8c <HAL_GPIO_Init+0x10>
  } 
}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	46c0      	nop			@ (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	b006      	add	sp, #24
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	40010000 	.word	0x40010000
 8002058:	48000400 	.word	0x48000400
 800205c:	48000800 	.word	0x48000800
 8002060:	48000c00 	.word	0x48000c00
 8002064:	48001000 	.word	0x48001000
 8002068:	40010400 	.word	0x40010400

0800206c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	0008      	movs	r0, r1
 8002076:	0011      	movs	r1, r2
 8002078:	1cbb      	adds	r3, r7, #2
 800207a:	1c02      	adds	r2, r0, #0
 800207c:	801a      	strh	r2, [r3, #0]
 800207e:	1c7b      	adds	r3, r7, #1
 8002080:	1c0a      	adds	r2, r1, #0
 8002082:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002084:	1c7b      	adds	r3, r7, #1
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800208c:	1cbb      	adds	r3, r7, #2
 800208e:	881a      	ldrh	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002094:	e003      	b.n	800209e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002096:	1cbb      	adds	r3, r7, #2
 8002098:	881a      	ldrh	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800209e:	46c0      	nop			@ (mov r8, r8)
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b002      	add	sp, #8
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	000a      	movs	r2, r1
 80020b0:	1cbb      	adds	r3, r7, #2
 80020b2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020ba:	1cbb      	adds	r3, r7, #2
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4013      	ands	r3, r2
 80020c2:	041a      	lsls	r2, r3, #16
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	1cb9      	adds	r1, r7, #2
 80020ca:	8809      	ldrh	r1, [r1, #0]
 80020cc:	400b      	ands	r3, r1
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	619a      	str	r2, [r3, #24]
}
 80020d4:	46c0      	nop			@ (mov r8, r8)
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b004      	add	sp, #16
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d102      	bne.n	80020f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	f000 fb76 	bl	80027dc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2201      	movs	r2, #1
 80020f6:	4013      	ands	r3, r2
 80020f8:	d100      	bne.n	80020fc <HAL_RCC_OscConfig+0x20>
 80020fa:	e08e      	b.n	800221a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020fc:	4bc5      	ldr	r3, [pc, #788]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	220c      	movs	r2, #12
 8002102:	4013      	ands	r3, r2
 8002104:	2b04      	cmp	r3, #4
 8002106:	d00e      	beq.n	8002126 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002108:	4bc2      	ldr	r3, [pc, #776]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	220c      	movs	r2, #12
 800210e:	4013      	ands	r3, r2
 8002110:	2b08      	cmp	r3, #8
 8002112:	d117      	bne.n	8002144 <HAL_RCC_OscConfig+0x68>
 8002114:	4bbf      	ldr	r3, [pc, #764]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	23c0      	movs	r3, #192	@ 0xc0
 800211a:	025b      	lsls	r3, r3, #9
 800211c:	401a      	ands	r2, r3
 800211e:	2380      	movs	r3, #128	@ 0x80
 8002120:	025b      	lsls	r3, r3, #9
 8002122:	429a      	cmp	r2, r3
 8002124:	d10e      	bne.n	8002144 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002126:	4bbb      	ldr	r3, [pc, #748]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	2380      	movs	r3, #128	@ 0x80
 800212c:	029b      	lsls	r3, r3, #10
 800212e:	4013      	ands	r3, r2
 8002130:	d100      	bne.n	8002134 <HAL_RCC_OscConfig+0x58>
 8002132:	e071      	b.n	8002218 <HAL_RCC_OscConfig+0x13c>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d000      	beq.n	800213e <HAL_RCC_OscConfig+0x62>
 800213c:	e06c      	b.n	8002218 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	f000 fb4c 	bl	80027dc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d107      	bne.n	800215c <HAL_RCC_OscConfig+0x80>
 800214c:	4bb1      	ldr	r3, [pc, #708]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4bb0      	ldr	r3, [pc, #704]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002152:	2180      	movs	r1, #128	@ 0x80
 8002154:	0249      	lsls	r1, r1, #9
 8002156:	430a      	orrs	r2, r1
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e02f      	b.n	80021bc <HAL_RCC_OscConfig+0xe0>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10c      	bne.n	800217e <HAL_RCC_OscConfig+0xa2>
 8002164:	4bab      	ldr	r3, [pc, #684]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4baa      	ldr	r3, [pc, #680]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800216a:	49ab      	ldr	r1, [pc, #684]	@ (8002418 <HAL_RCC_OscConfig+0x33c>)
 800216c:	400a      	ands	r2, r1
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	4ba8      	ldr	r3, [pc, #672]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4ba7      	ldr	r3, [pc, #668]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002176:	49a9      	ldr	r1, [pc, #676]	@ (800241c <HAL_RCC_OscConfig+0x340>)
 8002178:	400a      	ands	r2, r1
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	e01e      	b.n	80021bc <HAL_RCC_OscConfig+0xe0>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b05      	cmp	r3, #5
 8002184:	d10e      	bne.n	80021a4 <HAL_RCC_OscConfig+0xc8>
 8002186:	4ba3      	ldr	r3, [pc, #652]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	4ba2      	ldr	r3, [pc, #648]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800218c:	2180      	movs	r1, #128	@ 0x80
 800218e:	02c9      	lsls	r1, r1, #11
 8002190:	430a      	orrs	r2, r1
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	4b9f      	ldr	r3, [pc, #636]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b9e      	ldr	r3, [pc, #632]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800219a:	2180      	movs	r1, #128	@ 0x80
 800219c:	0249      	lsls	r1, r1, #9
 800219e:	430a      	orrs	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	e00b      	b.n	80021bc <HAL_RCC_OscConfig+0xe0>
 80021a4:	4b9b      	ldr	r3, [pc, #620]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b9a      	ldr	r3, [pc, #616]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80021aa:	499b      	ldr	r1, [pc, #620]	@ (8002418 <HAL_RCC_OscConfig+0x33c>)
 80021ac:	400a      	ands	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	4b98      	ldr	r3, [pc, #608]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b97      	ldr	r3, [pc, #604]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80021b6:	4999      	ldr	r1, [pc, #612]	@ (800241c <HAL_RCC_OscConfig+0x340>)
 80021b8:	400a      	ands	r2, r1
 80021ba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d014      	beq.n	80021ee <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff f96c 	bl	80014a0 <HAL_GetTick>
 80021c8:	0003      	movs	r3, r0
 80021ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ce:	f7ff f967 	bl	80014a0 <HAL_GetTick>
 80021d2:	0002      	movs	r2, r0
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b64      	cmp	r3, #100	@ 0x64
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e2fd      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e0:	4b8c      	ldr	r3, [pc, #560]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	2380      	movs	r3, #128	@ 0x80
 80021e6:	029b      	lsls	r3, r3, #10
 80021e8:	4013      	ands	r3, r2
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0xf2>
 80021ec:	e015      	b.n	800221a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ee:	f7ff f957 	bl	80014a0 <HAL_GetTick>
 80021f2:	0003      	movs	r3, r0
 80021f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f8:	f7ff f952 	bl	80014a0 <HAL_GetTick>
 80021fc:	0002      	movs	r2, r0
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	@ 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e2e8      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220a:	4b82      	ldr	r3, [pc, #520]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	2380      	movs	r3, #128	@ 0x80
 8002210:	029b      	lsls	r3, r3, #10
 8002212:	4013      	ands	r3, r2
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x11c>
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2202      	movs	r2, #2
 8002220:	4013      	ands	r3, r2
 8002222:	d100      	bne.n	8002226 <HAL_RCC_OscConfig+0x14a>
 8002224:	e06c      	b.n	8002300 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002226:	4b7b      	ldr	r3, [pc, #492]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	220c      	movs	r2, #12
 800222c:	4013      	ands	r3, r2
 800222e:	d00e      	beq.n	800224e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002230:	4b78      	ldr	r3, [pc, #480]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	220c      	movs	r2, #12
 8002236:	4013      	ands	r3, r2
 8002238:	2b08      	cmp	r3, #8
 800223a:	d11f      	bne.n	800227c <HAL_RCC_OscConfig+0x1a0>
 800223c:	4b75      	ldr	r3, [pc, #468]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	23c0      	movs	r3, #192	@ 0xc0
 8002242:	025b      	lsls	r3, r3, #9
 8002244:	401a      	ands	r2, r3
 8002246:	2380      	movs	r3, #128	@ 0x80
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	429a      	cmp	r2, r3
 800224c:	d116      	bne.n	800227c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224e:	4b71      	ldr	r3, [pc, #452]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2202      	movs	r2, #2
 8002254:	4013      	ands	r3, r2
 8002256:	d005      	beq.n	8002264 <HAL_RCC_OscConfig+0x188>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d001      	beq.n	8002264 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e2bb      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002264:	4b6b      	ldr	r3, [pc, #428]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	22f8      	movs	r2, #248	@ 0xf8
 800226a:	4393      	bics	r3, r2
 800226c:	0019      	movs	r1, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00da      	lsls	r2, r3, #3
 8002274:	4b67      	ldr	r3, [pc, #412]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002276:	430a      	orrs	r2, r1
 8002278:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227a:	e041      	b.n	8002300 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d024      	beq.n	80022ce <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002284:	4b63      	ldr	r3, [pc, #396]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b62      	ldr	r3, [pc, #392]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800228a:	2101      	movs	r1, #1
 800228c:	430a      	orrs	r2, r1
 800228e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7ff f906 	bl	80014a0 <HAL_GetTick>
 8002294:	0003      	movs	r3, r0
 8002296:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800229a:	f7ff f901 	bl	80014a0 <HAL_GetTick>
 800229e:	0002      	movs	r2, r0
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e297      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ac:	4b59      	ldr	r3, [pc, #356]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2202      	movs	r2, #2
 80022b2:	4013      	ands	r3, r2
 80022b4:	d0f1      	beq.n	800229a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b6:	4b57      	ldr	r3, [pc, #348]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	22f8      	movs	r2, #248	@ 0xf8
 80022bc:	4393      	bics	r3, r2
 80022be:	0019      	movs	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	00da      	lsls	r2, r3, #3
 80022c6:	4b53      	ldr	r3, [pc, #332]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	e018      	b.n	8002300 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ce:	4b51      	ldr	r3, [pc, #324]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4b50      	ldr	r3, [pc, #320]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80022d4:	2101      	movs	r1, #1
 80022d6:	438a      	bics	r2, r1
 80022d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7ff f8e1 	bl	80014a0 <HAL_GetTick>
 80022de:	0003      	movs	r3, r0
 80022e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e4:	f7ff f8dc 	bl	80014a0 <HAL_GetTick>
 80022e8:	0002      	movs	r2, r0
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e272      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f6:	4b47      	ldr	r3, [pc, #284]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2202      	movs	r2, #2
 80022fc:	4013      	ands	r3, r2
 80022fe:	d1f1      	bne.n	80022e4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2208      	movs	r2, #8
 8002306:	4013      	ands	r3, r2
 8002308:	d036      	beq.n	8002378 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d019      	beq.n	8002346 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002312:	4b40      	ldr	r3, [pc, #256]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002314:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002316:	4b3f      	ldr	r3, [pc, #252]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002318:	2101      	movs	r1, #1
 800231a:	430a      	orrs	r2, r1
 800231c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231e:	f7ff f8bf 	bl	80014a0 <HAL_GetTick>
 8002322:	0003      	movs	r3, r0
 8002324:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002328:	f7ff f8ba 	bl	80014a0 <HAL_GetTick>
 800232c:	0002      	movs	r2, r0
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e250      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233a:	4b36      	ldr	r3, [pc, #216]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800233c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233e:	2202      	movs	r2, #2
 8002340:	4013      	ands	r3, r2
 8002342:	d0f1      	beq.n	8002328 <HAL_RCC_OscConfig+0x24c>
 8002344:	e018      	b.n	8002378 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002346:	4b33      	ldr	r3, [pc, #204]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002348:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800234a:	4b32      	ldr	r3, [pc, #200]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800234c:	2101      	movs	r1, #1
 800234e:	438a      	bics	r2, r1
 8002350:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002352:	f7ff f8a5 	bl	80014a0 <HAL_GetTick>
 8002356:	0003      	movs	r3, r0
 8002358:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800235c:	f7ff f8a0 	bl	80014a0 <HAL_GetTick>
 8002360:	0002      	movs	r2, r0
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e236      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236e:	4b29      	ldr	r3, [pc, #164]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002372:	2202      	movs	r2, #2
 8002374:	4013      	ands	r3, r2
 8002376:	d1f1      	bne.n	800235c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2204      	movs	r2, #4
 800237e:	4013      	ands	r3, r2
 8002380:	d100      	bne.n	8002384 <HAL_RCC_OscConfig+0x2a8>
 8002382:	e0b5      	b.n	80024f0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002384:	201f      	movs	r0, #31
 8002386:	183b      	adds	r3, r7, r0
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238c:	4b21      	ldr	r3, [pc, #132]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800238e:	69da      	ldr	r2, [r3, #28]
 8002390:	2380      	movs	r3, #128	@ 0x80
 8002392:	055b      	lsls	r3, r3, #21
 8002394:	4013      	ands	r3, r2
 8002396:	d110      	bne.n	80023ba <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002398:	4b1e      	ldr	r3, [pc, #120]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800239a:	69da      	ldr	r2, [r3, #28]
 800239c:	4b1d      	ldr	r3, [pc, #116]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800239e:	2180      	movs	r1, #128	@ 0x80
 80023a0:	0549      	lsls	r1, r1, #21
 80023a2:	430a      	orrs	r2, r1
 80023a4:	61da      	str	r2, [r3, #28]
 80023a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80023a8:	69da      	ldr	r2, [r3, #28]
 80023aa:	2380      	movs	r3, #128	@ 0x80
 80023ac:	055b      	lsls	r3, r3, #21
 80023ae:	4013      	ands	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023b4:	183b      	adds	r3, r7, r0
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ba:	4b19      	ldr	r3, [pc, #100]	@ (8002420 <HAL_RCC_OscConfig+0x344>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	2380      	movs	r3, #128	@ 0x80
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4013      	ands	r3, r2
 80023c4:	d11a      	bne.n	80023fc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c6:	4b16      	ldr	r3, [pc, #88]	@ (8002420 <HAL_RCC_OscConfig+0x344>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4b15      	ldr	r3, [pc, #84]	@ (8002420 <HAL_RCC_OscConfig+0x344>)
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	0049      	lsls	r1, r1, #1
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d4:	f7ff f864 	bl	80014a0 <HAL_GetTick>
 80023d8:	0003      	movs	r3, r0
 80023da:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023de:	f7ff f85f 	bl	80014a0 <HAL_GetTick>
 80023e2:	0002      	movs	r2, r0
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b64      	cmp	r3, #100	@ 0x64
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e1f5      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <HAL_RCC_OscConfig+0x344>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	2380      	movs	r3, #128	@ 0x80
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4013      	ands	r3, r2
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d10f      	bne.n	8002424 <HAL_RCC_OscConfig+0x348>
 8002404:	4b03      	ldr	r3, [pc, #12]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002406:	6a1a      	ldr	r2, [r3, #32]
 8002408:	4b02      	ldr	r3, [pc, #8]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800240a:	2101      	movs	r1, #1
 800240c:	430a      	orrs	r2, r1
 800240e:	621a      	str	r2, [r3, #32]
 8002410:	e036      	b.n	8002480 <HAL_RCC_OscConfig+0x3a4>
 8002412:	46c0      	nop			@ (mov r8, r8)
 8002414:	40021000 	.word	0x40021000
 8002418:	fffeffff 	.word	0xfffeffff
 800241c:	fffbffff 	.word	0xfffbffff
 8002420:	40007000 	.word	0x40007000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10c      	bne.n	8002446 <HAL_RCC_OscConfig+0x36a>
 800242c:	4bca      	ldr	r3, [pc, #808]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800242e:	6a1a      	ldr	r2, [r3, #32]
 8002430:	4bc9      	ldr	r3, [pc, #804]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002432:	2101      	movs	r1, #1
 8002434:	438a      	bics	r2, r1
 8002436:	621a      	str	r2, [r3, #32]
 8002438:	4bc7      	ldr	r3, [pc, #796]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800243a:	6a1a      	ldr	r2, [r3, #32]
 800243c:	4bc6      	ldr	r3, [pc, #792]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800243e:	2104      	movs	r1, #4
 8002440:	438a      	bics	r2, r1
 8002442:	621a      	str	r2, [r3, #32]
 8002444:	e01c      	b.n	8002480 <HAL_RCC_OscConfig+0x3a4>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b05      	cmp	r3, #5
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0x38c>
 800244e:	4bc2      	ldr	r3, [pc, #776]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002450:	6a1a      	ldr	r2, [r3, #32]
 8002452:	4bc1      	ldr	r3, [pc, #772]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002454:	2104      	movs	r1, #4
 8002456:	430a      	orrs	r2, r1
 8002458:	621a      	str	r2, [r3, #32]
 800245a:	4bbf      	ldr	r3, [pc, #764]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800245c:	6a1a      	ldr	r2, [r3, #32]
 800245e:	4bbe      	ldr	r3, [pc, #760]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002460:	2101      	movs	r1, #1
 8002462:	430a      	orrs	r2, r1
 8002464:	621a      	str	r2, [r3, #32]
 8002466:	e00b      	b.n	8002480 <HAL_RCC_OscConfig+0x3a4>
 8002468:	4bbb      	ldr	r3, [pc, #748]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800246a:	6a1a      	ldr	r2, [r3, #32]
 800246c:	4bba      	ldr	r3, [pc, #744]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800246e:	2101      	movs	r1, #1
 8002470:	438a      	bics	r2, r1
 8002472:	621a      	str	r2, [r3, #32]
 8002474:	4bb8      	ldr	r3, [pc, #736]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002476:	6a1a      	ldr	r2, [r3, #32]
 8002478:	4bb7      	ldr	r3, [pc, #732]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800247a:	2104      	movs	r1, #4
 800247c:	438a      	bics	r2, r1
 800247e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d014      	beq.n	80024b2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002488:	f7ff f80a 	bl	80014a0 <HAL_GetTick>
 800248c:	0003      	movs	r3, r0
 800248e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002490:	e009      	b.n	80024a6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002492:	f7ff f805 	bl	80014a0 <HAL_GetTick>
 8002496:	0002      	movs	r2, r0
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	4aaf      	ldr	r2, [pc, #700]	@ (800275c <HAL_RCC_OscConfig+0x680>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e19a      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a6:	4bac      	ldr	r3, [pc, #688]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	2202      	movs	r2, #2
 80024ac:	4013      	ands	r3, r2
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x3b6>
 80024b0:	e013      	b.n	80024da <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b2:	f7fe fff5 	bl	80014a0 <HAL_GetTick>
 80024b6:	0003      	movs	r3, r0
 80024b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ba:	e009      	b.n	80024d0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024bc:	f7fe fff0 	bl	80014a0 <HAL_GetTick>
 80024c0:	0002      	movs	r2, r0
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	4aa5      	ldr	r2, [pc, #660]	@ (800275c <HAL_RCC_OscConfig+0x680>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e185      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d0:	4ba1      	ldr	r3, [pc, #644]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	2202      	movs	r2, #2
 80024d6:	4013      	ands	r3, r2
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024da:	231f      	movs	r3, #31
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d105      	bne.n	80024f0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e4:	4b9c      	ldr	r3, [pc, #624]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80024e6:	69da      	ldr	r2, [r3, #28]
 80024e8:	4b9b      	ldr	r3, [pc, #620]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80024ea:	499d      	ldr	r1, [pc, #628]	@ (8002760 <HAL_RCC_OscConfig+0x684>)
 80024ec:	400a      	ands	r2, r1
 80024ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2210      	movs	r2, #16
 80024f6:	4013      	ands	r3, r2
 80024f8:	d063      	beq.n	80025c2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d12a      	bne.n	8002558 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002502:	4b95      	ldr	r3, [pc, #596]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002504:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002506:	4b94      	ldr	r3, [pc, #592]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002508:	2104      	movs	r1, #4
 800250a:	430a      	orrs	r2, r1
 800250c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800250e:	4b92      	ldr	r3, [pc, #584]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002510:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002512:	4b91      	ldr	r3, [pc, #580]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002514:	2101      	movs	r1, #1
 8002516:	430a      	orrs	r2, r1
 8002518:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251a:	f7fe ffc1 	bl	80014a0 <HAL_GetTick>
 800251e:	0003      	movs	r3, r0
 8002520:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002524:	f7fe ffbc 	bl	80014a0 <HAL_GetTick>
 8002528:	0002      	movs	r2, r0
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e152      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002536:	4b88      	ldr	r3, [pc, #544]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800253a:	2202      	movs	r2, #2
 800253c:	4013      	ands	r3, r2
 800253e:	d0f1      	beq.n	8002524 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002540:	4b85      	ldr	r3, [pc, #532]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002544:	22f8      	movs	r2, #248	@ 0xf8
 8002546:	4393      	bics	r3, r2
 8002548:	0019      	movs	r1, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	00da      	lsls	r2, r3, #3
 8002550:	4b81      	ldr	r3, [pc, #516]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002552:	430a      	orrs	r2, r1
 8002554:	635a      	str	r2, [r3, #52]	@ 0x34
 8002556:	e034      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	3305      	adds	r3, #5
 800255e:	d111      	bne.n	8002584 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002560:	4b7d      	ldr	r3, [pc, #500]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002562:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002564:	4b7c      	ldr	r3, [pc, #496]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002566:	2104      	movs	r1, #4
 8002568:	438a      	bics	r2, r1
 800256a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800256c:	4b7a      	ldr	r3, [pc, #488]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800256e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002570:	22f8      	movs	r2, #248	@ 0xf8
 8002572:	4393      	bics	r3, r2
 8002574:	0019      	movs	r1, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	00da      	lsls	r2, r3, #3
 800257c:	4b76      	ldr	r3, [pc, #472]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800257e:	430a      	orrs	r2, r1
 8002580:	635a      	str	r2, [r3, #52]	@ 0x34
 8002582:	e01e      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002584:	4b74      	ldr	r3, [pc, #464]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002588:	4b73      	ldr	r3, [pc, #460]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800258a:	2104      	movs	r1, #4
 800258c:	430a      	orrs	r2, r1
 800258e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002590:	4b71      	ldr	r3, [pc, #452]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002594:	4b70      	ldr	r3, [pc, #448]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002596:	2101      	movs	r1, #1
 8002598:	438a      	bics	r2, r1
 800259a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259c:	f7fe ff80 	bl	80014a0 <HAL_GetTick>
 80025a0:	0003      	movs	r3, r0
 80025a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025a6:	f7fe ff7b 	bl	80014a0 <HAL_GetTick>
 80025aa:	0002      	movs	r2, r0
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e111      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025b8:	4b67      	ldr	r3, [pc, #412]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80025ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025bc:	2202      	movs	r2, #2
 80025be:	4013      	ands	r3, r2
 80025c0:	d1f1      	bne.n	80025a6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2220      	movs	r2, #32
 80025c8:	4013      	ands	r3, r2
 80025ca:	d05c      	beq.n	8002686 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80025cc:	4b62      	ldr	r3, [pc, #392]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	220c      	movs	r2, #12
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b0c      	cmp	r3, #12
 80025d6:	d00e      	beq.n	80025f6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80025d8:	4b5f      	ldr	r3, [pc, #380]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	220c      	movs	r2, #12
 80025de:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d114      	bne.n	800260e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80025e4:	4b5c      	ldr	r3, [pc, #368]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	23c0      	movs	r3, #192	@ 0xc0
 80025ea:	025b      	lsls	r3, r3, #9
 80025ec:	401a      	ands	r2, r3
 80025ee:	23c0      	movs	r3, #192	@ 0xc0
 80025f0:	025b      	lsls	r3, r3, #9
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d10b      	bne.n	800260e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80025f6:	4b58      	ldr	r3, [pc, #352]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80025f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025fa:	2380      	movs	r3, #128	@ 0x80
 80025fc:	029b      	lsls	r3, r3, #10
 80025fe:	4013      	ands	r3, r2
 8002600:	d040      	beq.n	8002684 <HAL_RCC_OscConfig+0x5a8>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d03c      	beq.n	8002684 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0e6      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d01b      	beq.n	800264e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002616:	4b50      	ldr	r3, [pc, #320]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002618:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800261a:	4b4f      	ldr	r3, [pc, #316]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800261c:	2180      	movs	r1, #128	@ 0x80
 800261e:	0249      	lsls	r1, r1, #9
 8002620:	430a      	orrs	r2, r1
 8002622:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7fe ff3c 	bl	80014a0 <HAL_GetTick>
 8002628:	0003      	movs	r3, r0
 800262a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800262e:	f7fe ff37 	bl	80014a0 <HAL_GetTick>
 8002632:	0002      	movs	r2, r0
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e0cd      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002640:	4b45      	ldr	r3, [pc, #276]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002642:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002644:	2380      	movs	r3, #128	@ 0x80
 8002646:	029b      	lsls	r3, r3, #10
 8002648:	4013      	ands	r3, r2
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x552>
 800264c:	e01b      	b.n	8002686 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800264e:	4b42      	ldr	r3, [pc, #264]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002650:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002652:	4b41      	ldr	r3, [pc, #260]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002654:	4943      	ldr	r1, [pc, #268]	@ (8002764 <HAL_RCC_OscConfig+0x688>)
 8002656:	400a      	ands	r2, r1
 8002658:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7fe ff21 	bl	80014a0 <HAL_GetTick>
 800265e:	0003      	movs	r3, r0
 8002660:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002664:	f7fe ff1c 	bl	80014a0 <HAL_GetTick>
 8002668:	0002      	movs	r2, r0
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e0b2      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002676:	4b38      	ldr	r3, [pc, #224]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800267a:	2380      	movs	r3, #128	@ 0x80
 800267c:	029b      	lsls	r3, r3, #10
 800267e:	4013      	ands	r3, r2
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x588>
 8002682:	e000      	b.n	8002686 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002684:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268a:	2b00      	cmp	r3, #0
 800268c:	d100      	bne.n	8002690 <HAL_RCC_OscConfig+0x5b4>
 800268e:	e0a4      	b.n	80027da <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002690:	4b31      	ldr	r3, [pc, #196]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	220c      	movs	r2, #12
 8002696:	4013      	ands	r3, r2
 8002698:	2b08      	cmp	r3, #8
 800269a:	d100      	bne.n	800269e <HAL_RCC_OscConfig+0x5c2>
 800269c:	e078      	b.n	8002790 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d14c      	bne.n	8002740 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80026ac:	492e      	ldr	r1, [pc, #184]	@ (8002768 <HAL_RCC_OscConfig+0x68c>)
 80026ae:	400a      	ands	r2, r1
 80026b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b2:	f7fe fef5 	bl	80014a0 <HAL_GetTick>
 80026b6:	0003      	movs	r3, r0
 80026b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026bc:	f7fe fef0 	bl	80014a0 <HAL_GetTick>
 80026c0:	0002      	movs	r2, r0
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e086      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ce:	4b22      	ldr	r3, [pc, #136]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	2380      	movs	r3, #128	@ 0x80
 80026d4:	049b      	lsls	r3, r3, #18
 80026d6:	4013      	ands	r3, r2
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026da:	4b1f      	ldr	r3, [pc, #124]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80026dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026de:	220f      	movs	r2, #15
 80026e0:	4393      	bics	r3, r2
 80026e2:	0019      	movs	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80026ea:	430a      	orrs	r2, r1
 80026ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80026ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4a1e      	ldr	r2, [pc, #120]	@ (800276c <HAL_RCC_OscConfig+0x690>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	0019      	movs	r1, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002700:	431a      	orrs	r2, r3
 8002702:	4b15      	ldr	r3, [pc, #84]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002704:	430a      	orrs	r2, r1
 8002706:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002708:	4b13      	ldr	r3, [pc, #76]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b12      	ldr	r3, [pc, #72]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800270e:	2180      	movs	r1, #128	@ 0x80
 8002710:	0449      	lsls	r1, r1, #17
 8002712:	430a      	orrs	r2, r1
 8002714:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002716:	f7fe fec3 	bl	80014a0 <HAL_GetTick>
 800271a:	0003      	movs	r3, r0
 800271c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002720:	f7fe febe 	bl	80014a0 <HAL_GetTick>
 8002724:	0002      	movs	r2, r0
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e054      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002732:	4b09      	ldr	r3, [pc, #36]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	2380      	movs	r3, #128	@ 0x80
 8002738:	049b      	lsls	r3, r3, #18
 800273a:	4013      	ands	r3, r2
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0x644>
 800273e:	e04c      	b.n	80027da <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002740:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b04      	ldr	r3, [pc, #16]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002746:	4908      	ldr	r1, [pc, #32]	@ (8002768 <HAL_RCC_OscConfig+0x68c>)
 8002748:	400a      	ands	r2, r1
 800274a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7fe fea8 	bl	80014a0 <HAL_GetTick>
 8002750:	0003      	movs	r3, r0
 8002752:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002754:	e015      	b.n	8002782 <HAL_RCC_OscConfig+0x6a6>
 8002756:	46c0      	nop			@ (mov r8, r8)
 8002758:	40021000 	.word	0x40021000
 800275c:	00001388 	.word	0x00001388
 8002760:	efffffff 	.word	0xefffffff
 8002764:	fffeffff 	.word	0xfffeffff
 8002768:	feffffff 	.word	0xfeffffff
 800276c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002770:	f7fe fe96 	bl	80014a0 <HAL_GetTick>
 8002774:	0002      	movs	r2, r0
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e02c      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002782:	4b18      	ldr	r3, [pc, #96]	@ (80027e4 <HAL_RCC_OscConfig+0x708>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	2380      	movs	r3, #128	@ 0x80
 8002788:	049b      	lsls	r3, r3, #18
 800278a:	4013      	ands	r3, r2
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x694>
 800278e:	e024      	b.n	80027da <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e01f      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800279c:	4b11      	ldr	r3, [pc, #68]	@ (80027e4 <HAL_RCC_OscConfig+0x708>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80027a2:	4b10      	ldr	r3, [pc, #64]	@ (80027e4 <HAL_RCC_OscConfig+0x708>)
 80027a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	23c0      	movs	r3, #192	@ 0xc0
 80027ac:	025b      	lsls	r3, r3, #9
 80027ae:	401a      	ands	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d10e      	bne.n	80027d6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	220f      	movs	r2, #15
 80027bc:	401a      	ands	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	23f0      	movs	r3, #240	@ 0xf0
 80027ca:	039b      	lsls	r3, r3, #14
 80027cc:	401a      	ands	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d001      	beq.n	80027da <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	0018      	movs	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	b008      	add	sp, #32
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40021000 	.word	0x40021000

080027e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0bf      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027fc:	4b61      	ldr	r3, [pc, #388]	@ (8002984 <HAL_RCC_ClockConfig+0x19c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2201      	movs	r2, #1
 8002802:	4013      	ands	r3, r2
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d911      	bls.n	800282e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b5e      	ldr	r3, [pc, #376]	@ (8002984 <HAL_RCC_ClockConfig+0x19c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2201      	movs	r2, #1
 8002810:	4393      	bics	r3, r2
 8002812:	0019      	movs	r1, r3
 8002814:	4b5b      	ldr	r3, [pc, #364]	@ (8002984 <HAL_RCC_ClockConfig+0x19c>)
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281c:	4b59      	ldr	r3, [pc, #356]	@ (8002984 <HAL_RCC_ClockConfig+0x19c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2201      	movs	r2, #1
 8002822:	4013      	ands	r3, r2
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d001      	beq.n	800282e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e0a6      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2202      	movs	r2, #2
 8002834:	4013      	ands	r3, r2
 8002836:	d015      	beq.n	8002864 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2204      	movs	r2, #4
 800283e:	4013      	ands	r3, r2
 8002840:	d006      	beq.n	8002850 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002842:	4b51      	ldr	r3, [pc, #324]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	4b50      	ldr	r3, [pc, #320]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002848:	21e0      	movs	r1, #224	@ 0xe0
 800284a:	00c9      	lsls	r1, r1, #3
 800284c:	430a      	orrs	r2, r1
 800284e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002850:	4b4d      	ldr	r3, [pc, #308]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	22f0      	movs	r2, #240	@ 0xf0
 8002856:	4393      	bics	r3, r2
 8002858:	0019      	movs	r1, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	4b4a      	ldr	r3, [pc, #296]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002860:	430a      	orrs	r2, r1
 8002862:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2201      	movs	r2, #1
 800286a:	4013      	ands	r3, r2
 800286c:	d04c      	beq.n	8002908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d107      	bne.n	8002886 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	4b44      	ldr	r3, [pc, #272]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	2380      	movs	r3, #128	@ 0x80
 800287c:	029b      	lsls	r3, r3, #10
 800287e:	4013      	ands	r3, r2
 8002880:	d120      	bne.n	80028c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e07a      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288e:	4b3e      	ldr	r3, [pc, #248]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	2380      	movs	r3, #128	@ 0x80
 8002894:	049b      	lsls	r3, r3, #18
 8002896:	4013      	ands	r3, r2
 8002898:	d114      	bne.n	80028c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e06e      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028a6:	4b38      	ldr	r3, [pc, #224]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 80028a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028aa:	2380      	movs	r3, #128	@ 0x80
 80028ac:	029b      	lsls	r3, r3, #10
 80028ae:	4013      	ands	r3, r2
 80028b0:	d108      	bne.n	80028c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e062      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b6:	4b34      	ldr	r3, [pc, #208]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2202      	movs	r2, #2
 80028bc:	4013      	ands	r3, r2
 80028be:	d101      	bne.n	80028c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e05b      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c4:	4b30      	ldr	r3, [pc, #192]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2203      	movs	r2, #3
 80028ca:	4393      	bics	r3, r2
 80028cc:	0019      	movs	r1, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 80028d4:	430a      	orrs	r2, r1
 80028d6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d8:	f7fe fde2 	bl	80014a0 <HAL_GetTick>
 80028dc:	0003      	movs	r3, r0
 80028de:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e0:	e009      	b.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e2:	f7fe fddd 	bl	80014a0 <HAL_GetTick>
 80028e6:	0002      	movs	r2, r0
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	4a27      	ldr	r2, [pc, #156]	@ (800298c <HAL_RCC_ClockConfig+0x1a4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e042      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	4b24      	ldr	r3, [pc, #144]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	220c      	movs	r2, #12
 80028fc:	401a      	ands	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	429a      	cmp	r2, r3
 8002906:	d1ec      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002908:	4b1e      	ldr	r3, [pc, #120]	@ (8002984 <HAL_RCC_ClockConfig+0x19c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2201      	movs	r2, #1
 800290e:	4013      	ands	r3, r2
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d211      	bcs.n	800293a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b1b      	ldr	r3, [pc, #108]	@ (8002984 <HAL_RCC_ClockConfig+0x19c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2201      	movs	r2, #1
 800291c:	4393      	bics	r3, r2
 800291e:	0019      	movs	r1, r3
 8002920:	4b18      	ldr	r3, [pc, #96]	@ (8002984 <HAL_RCC_ClockConfig+0x19c>)
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002928:	4b16      	ldr	r3, [pc, #88]	@ (8002984 <HAL_RCC_ClockConfig+0x19c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2201      	movs	r2, #1
 800292e:	4013      	ands	r3, r2
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d001      	beq.n	800293a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e020      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2204      	movs	r2, #4
 8002940:	4013      	ands	r3, r2
 8002942:	d009      	beq.n	8002958 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002944:	4b10      	ldr	r3, [pc, #64]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4a11      	ldr	r2, [pc, #68]	@ (8002990 <HAL_RCC_ClockConfig+0x1a8>)
 800294a:	4013      	ands	r3, r2
 800294c:	0019      	movs	r1, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	4b0d      	ldr	r3, [pc, #52]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002954:	430a      	orrs	r2, r1
 8002956:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002958:	f000 f820 	bl	800299c <HAL_RCC_GetSysClockFreq>
 800295c:	0001      	movs	r1, r0
 800295e:	4b0a      	ldr	r3, [pc, #40]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	220f      	movs	r2, #15
 8002966:	4013      	ands	r3, r2
 8002968:	4a0a      	ldr	r2, [pc, #40]	@ (8002994 <HAL_RCC_ClockConfig+0x1ac>)
 800296a:	5cd3      	ldrb	r3, [r2, r3]
 800296c:	000a      	movs	r2, r1
 800296e:	40da      	lsrs	r2, r3
 8002970:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <HAL_RCC_ClockConfig+0x1b0>)
 8002972:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002974:	2003      	movs	r0, #3
 8002976:	f7fe fd4d 	bl	8001414 <HAL_InitTick>
  
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	0018      	movs	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	b004      	add	sp, #16
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40022000 	.word	0x40022000
 8002988:	40021000 	.word	0x40021000
 800298c:	00001388 	.word	0x00001388
 8002990:	fffff8ff 	.word	0xfffff8ff
 8002994:	08005170 	.word	0x08005170
 8002998:	20000000 	.word	0x20000000

0800299c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80029b6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0xd0>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	220c      	movs	r2, #12
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b0c      	cmp	r3, #12
 80029c4:	d046      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0xb8>
 80029c6:	d848      	bhi.n	8002a5a <HAL_RCC_GetSysClockFreq+0xbe>
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d002      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0x36>
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d003      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x3c>
 80029d0:	e043      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029d2:	4b27      	ldr	r3, [pc, #156]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0xd4>)
 80029d4:	613b      	str	r3, [r7, #16]
      break;
 80029d6:	e043      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	0c9b      	lsrs	r3, r3, #18
 80029dc:	220f      	movs	r2, #15
 80029de:	4013      	ands	r3, r2
 80029e0:	4a24      	ldr	r2, [pc, #144]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0xd8>)
 80029e2:	5cd3      	ldrb	r3, [r2, r3]
 80029e4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80029e6:	4b21      	ldr	r3, [pc, #132]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0xd0>)
 80029e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ea:	220f      	movs	r2, #15
 80029ec:	4013      	ands	r3, r2
 80029ee:	4a22      	ldr	r2, [pc, #136]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0xdc>)
 80029f0:	5cd3      	ldrb	r3, [r2, r3]
 80029f2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	23c0      	movs	r3, #192	@ 0xc0
 80029f8:	025b      	lsls	r3, r3, #9
 80029fa:	401a      	ands	r2, r3
 80029fc:	2380      	movs	r3, #128	@ 0x80
 80029fe:	025b      	lsls	r3, r3, #9
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d109      	bne.n	8002a18 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	481a      	ldr	r0, [pc, #104]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a08:	f7fd fb90 	bl	800012c <__udivsi3>
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	001a      	movs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4353      	muls	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	e01a      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	23c0      	movs	r3, #192	@ 0xc0
 8002a1c:	025b      	lsls	r3, r3, #9
 8002a1e:	401a      	ands	r2, r3
 8002a20:	23c0      	movs	r3, #192	@ 0xc0
 8002a22:	025b      	lsls	r3, r3, #9
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d109      	bne.n	8002a3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	4814      	ldr	r0, [pc, #80]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0xe0>)
 8002a2c:	f7fd fb7e 	bl	800012c <__udivsi3>
 8002a30:	0003      	movs	r3, r0
 8002a32:	001a      	movs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4353      	muls	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	480c      	ldr	r0, [pc, #48]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a40:	f7fd fb74 	bl	800012c <__udivsi3>
 8002a44:	0003      	movs	r3, r0
 8002a46:	001a      	movs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4353      	muls	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	613b      	str	r3, [r7, #16]
      break;
 8002a52:	e005      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002a54:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0xe0>)
 8002a56:	613b      	str	r3, [r7, #16]
      break;
 8002a58:	e002      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a5a:	4b05      	ldr	r3, [pc, #20]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a5c:	613b      	str	r3, [r7, #16]
      break;
 8002a5e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a60:	693b      	ldr	r3, [r7, #16]
}
 8002a62:	0018      	movs	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b006      	add	sp, #24
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	007a1200 	.word	0x007a1200
 8002a74:	08005188 	.word	0x08005188
 8002a78:	08005198 	.word	0x08005198
 8002a7c:	02dc6c00 	.word	0x02dc6c00

08002a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a84:	4b02      	ldr	r3, [pc, #8]	@ (8002a90 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a86:	681b      	ldr	r3, [r3, #0]
}
 8002a88:	0018      	movs	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	46c0      	nop			@ (mov r8, r8)
 8002a90:	20000000 	.word	0x20000000

08002a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002a98:	f7ff fff2 	bl	8002a80 <HAL_RCC_GetHCLKFreq>
 8002a9c:	0001      	movs	r1, r0
 8002a9e:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	4a04      	ldr	r2, [pc, #16]	@ (8002abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aaa:	5cd3      	ldrb	r3, [r2, r3]
 8002aac:	40d9      	lsrs	r1, r3
 8002aae:	000b      	movs	r3, r1
}    
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	46c0      	nop			@ (mov r8, r8)
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	08005180 	.word	0x08005180

08002ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	2380      	movs	r3, #128	@ 0x80
 8002ad6:	025b      	lsls	r3, r3, #9
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d100      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002adc:	e08e      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002ade:	2017      	movs	r0, #23
 8002ae0:	183b      	adds	r3, r7, r0
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae6:	4b66      	ldr	r3, [pc, #408]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ae8:	69da      	ldr	r2, [r3, #28]
 8002aea:	2380      	movs	r3, #128	@ 0x80
 8002aec:	055b      	lsls	r3, r3, #21
 8002aee:	4013      	ands	r3, r2
 8002af0:	d110      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002af2:	4b63      	ldr	r3, [pc, #396]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	4b62      	ldr	r3, [pc, #392]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002af8:	2180      	movs	r1, #128	@ 0x80
 8002afa:	0549      	lsls	r1, r1, #21
 8002afc:	430a      	orrs	r2, r1
 8002afe:	61da      	str	r2, [r3, #28]
 8002b00:	4b5f      	ldr	r3, [pc, #380]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	2380      	movs	r3, #128	@ 0x80
 8002b06:	055b      	lsls	r3, r3, #21
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0e:	183b      	adds	r3, r7, r0
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b14:	4b5b      	ldr	r3, [pc, #364]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	2380      	movs	r3, #128	@ 0x80
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d11a      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b20:	4b58      	ldr	r3, [pc, #352]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4b57      	ldr	r3, [pc, #348]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b26:	2180      	movs	r1, #128	@ 0x80
 8002b28:	0049      	lsls	r1, r1, #1
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fcb7 	bl	80014a0 <HAL_GetTick>
 8002b32:	0003      	movs	r3, r0
 8002b34:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b36:	e008      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b38:	f7fe fcb2 	bl	80014a0 <HAL_GetTick>
 8002b3c:	0002      	movs	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	@ 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e096      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4a:	4b4e      	ldr	r3, [pc, #312]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	2380      	movs	r3, #128	@ 0x80
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4013      	ands	r3, r2
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b56:	4b4a      	ldr	r3, [pc, #296]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b58:	6a1a      	ldr	r2, [r3, #32]
 8002b5a:	23c0      	movs	r3, #192	@ 0xc0
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4013      	ands	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d034      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	23c0      	movs	r3, #192	@ 0xc0
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4013      	ands	r3, r2
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d02c      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b78:	4b41      	ldr	r3, [pc, #260]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	4a42      	ldr	r2, [pc, #264]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b82:	4b3f      	ldr	r3, [pc, #252]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b84:	6a1a      	ldr	r2, [r3, #32]
 8002b86:	4b3e      	ldr	r3, [pc, #248]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b88:	2180      	movs	r1, #128	@ 0x80
 8002b8a:	0249      	lsls	r1, r1, #9
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b90:	4b3b      	ldr	r3, [pc, #236]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b92:	6a1a      	ldr	r2, [r3, #32]
 8002b94:	4b3a      	ldr	r3, [pc, #232]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b96:	493d      	ldr	r1, [pc, #244]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b98:	400a      	ands	r2, r1
 8002b9a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b9c:	4b38      	ldr	r3, [pc, #224]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d013      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002baa:	f7fe fc79 	bl	80014a0 <HAL_GetTick>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb2:	e009      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb4:	f7fe fc74 	bl	80014a0 <HAL_GetTick>
 8002bb8:	0002      	movs	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	4a34      	ldr	r2, [pc, #208]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e057      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	4a2c      	ldr	r2, [pc, #176]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	0019      	movs	r1, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	4b27      	ldr	r3, [pc, #156]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002be2:	430a      	orrs	r2, r1
 8002be4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002be6:	2317      	movs	r3, #23
 8002be8:	18fb      	adds	r3, r7, r3
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d105      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf0:	4b23      	ldr	r3, [pc, #140]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002bf2:	69da      	ldr	r2, [r3, #28]
 8002bf4:	4b22      	ldr	r3, [pc, #136]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002bf6:	4927      	ldr	r1, [pc, #156]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bf8:	400a      	ands	r2, r1
 8002bfa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2201      	movs	r2, #1
 8002c02:	4013      	ands	r3, r2
 8002c04:	d009      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c06:	4b1e      	ldr	r3, [pc, #120]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	4393      	bics	r3, r2
 8002c0e:	0019      	movs	r1, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	4b1a      	ldr	r3, [pc, #104]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c16:	430a      	orrs	r2, r1
 8002c18:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	4013      	ands	r3, r2
 8002c22:	d009      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c24:	4b16      	ldr	r3, [pc, #88]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c28:	4a1b      	ldr	r2, [pc, #108]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	4b13      	ldr	r3, [pc, #76]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c34:	430a      	orrs	r2, r1
 8002c36:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d009      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c42:	4b0f      	ldr	r3, [pc, #60]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	2210      	movs	r2, #16
 8002c48:	4393      	bics	r3, r2
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	4b0b      	ldr	r3, [pc, #44]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c52:	430a      	orrs	r2, r1
 8002c54:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	2380      	movs	r3, #128	@ 0x80
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d009      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c62:	4b07      	ldr	r3, [pc, #28]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c66:	2240      	movs	r2, #64	@ 0x40
 8002c68:	4393      	bics	r3, r2
 8002c6a:	0019      	movs	r1, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	4b03      	ldr	r3, [pc, #12]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c72:	430a      	orrs	r2, r1
 8002c74:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	0018      	movs	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b006      	add	sp, #24
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40007000 	.word	0x40007000
 8002c88:	fffffcff 	.word	0xfffffcff
 8002c8c:	fffeffff 	.word	0xfffeffff
 8002c90:	00001388 	.word	0x00001388
 8002c94:	efffffff 	.word	0xefffffff
 8002c98:	fffcffff 	.word	0xfffcffff

08002c9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e042      	b.n	8002d34 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	223d      	movs	r2, #61	@ 0x3d
 8002cb2:	5c9b      	ldrb	r3, [r3, r2]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d107      	bne.n	8002cca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	223c      	movs	r2, #60	@ 0x3c
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f7fe f9b1 	bl	800102c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	223d      	movs	r2, #61	@ 0x3d
 8002cce:	2102      	movs	r1, #2
 8002cd0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	0019      	movs	r1, r3
 8002cdc:	0010      	movs	r0, r2
 8002cde:	f000 fa61 	bl	80031a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2246      	movs	r2, #70	@ 0x46
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	223e      	movs	r2, #62	@ 0x3e
 8002cee:	2101      	movs	r1, #1
 8002cf0:	5499      	strb	r1, [r3, r2]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	223f      	movs	r2, #63	@ 0x3f
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	5499      	strb	r1, [r3, r2]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2240      	movs	r2, #64	@ 0x40
 8002cfe:	2101      	movs	r1, #1
 8002d00:	5499      	strb	r1, [r3, r2]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2241      	movs	r2, #65	@ 0x41
 8002d06:	2101      	movs	r1, #1
 8002d08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2242      	movs	r2, #66	@ 0x42
 8002d0e:	2101      	movs	r1, #1
 8002d10:	5499      	strb	r1, [r3, r2]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2243      	movs	r2, #67	@ 0x43
 8002d16:	2101      	movs	r1, #1
 8002d18:	5499      	strb	r1, [r3, r2]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2244      	movs	r2, #68	@ 0x44
 8002d1e:	2101      	movs	r1, #1
 8002d20:	5499      	strb	r1, [r3, r2]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2245      	movs	r2, #69	@ 0x45
 8002d26:	2101      	movs	r1, #1
 8002d28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	223d      	movs	r2, #61	@ 0x3d
 8002d2e:	2101      	movs	r1, #1
 8002d30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	0018      	movs	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b002      	add	sp, #8
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	223d      	movs	r2, #61	@ 0x3d
 8002d48:	5c9b      	ldrb	r3, [r3, r2]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d001      	beq.n	8002d54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e03b      	b.n	8002dcc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	223d      	movs	r2, #61	@ 0x3d
 8002d58:	2102      	movs	r1, #2
 8002d5a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2101      	movs	r1, #1
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a18      	ldr	r2, [pc, #96]	@ (8002dd4 <HAL_TIM_Base_Start_IT+0x98>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00f      	beq.n	8002d96 <HAL_TIM_Base_Start_IT+0x5a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	2380      	movs	r3, #128	@ 0x80
 8002d7c:	05db      	lsls	r3, r3, #23
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d009      	beq.n	8002d96 <HAL_TIM_Base_Start_IT+0x5a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a14      	ldr	r2, [pc, #80]	@ (8002dd8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d004      	beq.n	8002d96 <HAL_TIM_Base_Start_IT+0x5a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a12      	ldr	r2, [pc, #72]	@ (8002ddc <HAL_TIM_Base_Start_IT+0xa0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d111      	bne.n	8002dba <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2207      	movs	r2, #7
 8002d9e:	4013      	ands	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2b06      	cmp	r3, #6
 8002da6:	d010      	beq.n	8002dca <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2101      	movs	r1, #1
 8002db4:	430a      	orrs	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db8:	e007      	b.n	8002dca <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b004      	add	sp, #16
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40012c00 	.word	0x40012c00
 8002dd8:	40000400 	.word	0x40000400
 8002ddc:	40014000 	.word	0x40014000

08002de0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d021      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2202      	movs	r2, #2
 8002e04:	4013      	ands	r3, r2
 8002e06:	d01d      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	4252      	negs	r2, r2
 8002e10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	2203      	movs	r2, #3
 8002e20:	4013      	ands	r3, r2
 8002e22:	d004      	beq.n	8002e2e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	0018      	movs	r0, r3
 8002e28:	f000 f9a4 	bl	8003174 <HAL_TIM_IC_CaptureCallback>
 8002e2c:	e007      	b.n	8002e3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	0018      	movs	r0, r3
 8002e32:	f000 f997 	bl	8003164 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f000 f9a3 	bl	8003184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2204      	movs	r2, #4
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d022      	beq.n	8002e92 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2204      	movs	r2, #4
 8002e50:	4013      	ands	r3, r2
 8002e52:	d01e      	beq.n	8002e92 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2205      	movs	r2, #5
 8002e5a:	4252      	negs	r2, r2
 8002e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2202      	movs	r2, #2
 8002e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	23c0      	movs	r3, #192	@ 0xc0
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d004      	beq.n	8002e7c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	0018      	movs	r0, r3
 8002e76:	f000 f97d 	bl	8003174 <HAL_TIM_IC_CaptureCallback>
 8002e7a:	e007      	b.n	8002e8c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f000 f970 	bl	8003164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	0018      	movs	r0, r3
 8002e88:	f000 f97c 	bl	8003184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2208      	movs	r2, #8
 8002e96:	4013      	ands	r3, r2
 8002e98:	d021      	beq.n	8002ede <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2208      	movs	r2, #8
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d01d      	beq.n	8002ede <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2209      	movs	r2, #9
 8002ea8:	4252      	negs	r2, r2
 8002eaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2204      	movs	r2, #4
 8002eb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	2203      	movs	r2, #3
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d004      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f000 f957 	bl	8003174 <HAL_TIM_IC_CaptureCallback>
 8002ec6:	e007      	b.n	8002ed8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f000 f94a 	bl	8003164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f000 f956 	bl	8003184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2210      	movs	r2, #16
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d022      	beq.n	8002f2c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2210      	movs	r2, #16
 8002eea:	4013      	ands	r3, r2
 8002eec:	d01e      	beq.n	8002f2c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2211      	movs	r2, #17
 8002ef4:	4252      	negs	r2, r2
 8002ef6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2208      	movs	r2, #8
 8002efc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	69da      	ldr	r2, [r3, #28]
 8002f04:	23c0      	movs	r3, #192	@ 0xc0
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d004      	beq.n	8002f16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f000 f930 	bl	8003174 <HAL_TIM_IC_CaptureCallback>
 8002f14:	e007      	b.n	8002f26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f000 f923 	bl	8003164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f000 f92f 	bl	8003184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	4013      	ands	r3, r2
 8002f32:	d00c      	beq.n	8002f4e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2201      	movs	r2, #1
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d008      	beq.n	8002f4e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2202      	movs	r2, #2
 8002f42:	4252      	negs	r2, r2
 8002f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f7fe fa0d 	bl	8001368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2280      	movs	r2, #128	@ 0x80
 8002f52:	4013      	ands	r3, r2
 8002f54:	d00c      	beq.n	8002f70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2280      	movs	r2, #128	@ 0x80
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d008      	beq.n	8002f70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2281      	movs	r2, #129	@ 0x81
 8002f64:	4252      	negs	r2, r2
 8002f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f000 faa8 	bl	80034c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2240      	movs	r2, #64	@ 0x40
 8002f74:	4013      	ands	r3, r2
 8002f76:	d00c      	beq.n	8002f92 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2240      	movs	r2, #64	@ 0x40
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d008      	beq.n	8002f92 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2241      	movs	r2, #65	@ 0x41
 8002f86:	4252      	negs	r2, r2
 8002f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f000 f901 	bl	8003194 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2220      	movs	r2, #32
 8002f96:	4013      	ands	r3, r2
 8002f98:	d00c      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d008      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2221      	movs	r2, #33	@ 0x21
 8002fa8:	4252      	negs	r2, r2
 8002faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f000 fa7e 	bl	80034b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fb4:	46c0      	nop			@ (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b004      	add	sp, #16
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc6:	230f      	movs	r3, #15
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	2200      	movs	r2, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	223c      	movs	r2, #60	@ 0x3c
 8002fd2:	5c9b      	ldrb	r3, [r3, r2]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_TIM_ConfigClockSource+0x20>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e0bc      	b.n	8003156 <HAL_TIM_ConfigClockSource+0x19a>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	223c      	movs	r2, #60	@ 0x3c
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	223d      	movs	r2, #61	@ 0x3d
 8002fe8:	2102      	movs	r1, #2
 8002fea:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2277      	movs	r2, #119	@ 0x77
 8002ff8:	4393      	bics	r3, r2
 8002ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4a58      	ldr	r2, [pc, #352]	@ (8003160 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003000:	4013      	ands	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2280      	movs	r2, #128	@ 0x80
 8003012:	0192      	lsls	r2, r2, #6
 8003014:	4293      	cmp	r3, r2
 8003016:	d040      	beq.n	800309a <HAL_TIM_ConfigClockSource+0xde>
 8003018:	2280      	movs	r2, #128	@ 0x80
 800301a:	0192      	lsls	r2, r2, #6
 800301c:	4293      	cmp	r3, r2
 800301e:	d900      	bls.n	8003022 <HAL_TIM_ConfigClockSource+0x66>
 8003020:	e088      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x178>
 8003022:	2280      	movs	r2, #128	@ 0x80
 8003024:	0152      	lsls	r2, r2, #5
 8003026:	4293      	cmp	r3, r2
 8003028:	d100      	bne.n	800302c <HAL_TIM_ConfigClockSource+0x70>
 800302a:	e088      	b.n	800313e <HAL_TIM_ConfigClockSource+0x182>
 800302c:	2280      	movs	r2, #128	@ 0x80
 800302e:	0152      	lsls	r2, r2, #5
 8003030:	4293      	cmp	r3, r2
 8003032:	d900      	bls.n	8003036 <HAL_TIM_ConfigClockSource+0x7a>
 8003034:	e07e      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x178>
 8003036:	2b70      	cmp	r3, #112	@ 0x70
 8003038:	d018      	beq.n	800306c <HAL_TIM_ConfigClockSource+0xb0>
 800303a:	d900      	bls.n	800303e <HAL_TIM_ConfigClockSource+0x82>
 800303c:	e07a      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x178>
 800303e:	2b60      	cmp	r3, #96	@ 0x60
 8003040:	d04f      	beq.n	80030e2 <HAL_TIM_ConfigClockSource+0x126>
 8003042:	d900      	bls.n	8003046 <HAL_TIM_ConfigClockSource+0x8a>
 8003044:	e076      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x178>
 8003046:	2b50      	cmp	r3, #80	@ 0x50
 8003048:	d03b      	beq.n	80030c2 <HAL_TIM_ConfigClockSource+0x106>
 800304a:	d900      	bls.n	800304e <HAL_TIM_ConfigClockSource+0x92>
 800304c:	e072      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x178>
 800304e:	2b40      	cmp	r3, #64	@ 0x40
 8003050:	d057      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0x146>
 8003052:	d900      	bls.n	8003056 <HAL_TIM_ConfigClockSource+0x9a>
 8003054:	e06e      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x178>
 8003056:	2b30      	cmp	r3, #48	@ 0x30
 8003058:	d063      	beq.n	8003122 <HAL_TIM_ConfigClockSource+0x166>
 800305a:	d86b      	bhi.n	8003134 <HAL_TIM_ConfigClockSource+0x178>
 800305c:	2b20      	cmp	r3, #32
 800305e:	d060      	beq.n	8003122 <HAL_TIM_ConfigClockSource+0x166>
 8003060:	d868      	bhi.n	8003134 <HAL_TIM_ConfigClockSource+0x178>
 8003062:	2b00      	cmp	r3, #0
 8003064:	d05d      	beq.n	8003122 <HAL_TIM_ConfigClockSource+0x166>
 8003066:	2b10      	cmp	r3, #16
 8003068:	d05b      	beq.n	8003122 <HAL_TIM_ConfigClockSource+0x166>
 800306a:	e063      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800307c:	f000 f99a 	bl	80033b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2277      	movs	r2, #119	@ 0x77
 800308c:	4313      	orrs	r3, r2
 800308e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	609a      	str	r2, [r3, #8]
      break;
 8003098:	e052      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030aa:	f000 f983 	bl	80033b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2180      	movs	r1, #128	@ 0x80
 80030ba:	01c9      	lsls	r1, r1, #7
 80030bc:	430a      	orrs	r2, r1
 80030be:	609a      	str	r2, [r3, #8]
      break;
 80030c0:	e03e      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ce:	001a      	movs	r2, r3
 80030d0:	f000 f8f6 	bl	80032c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2150      	movs	r1, #80	@ 0x50
 80030da:	0018      	movs	r0, r3
 80030dc:	f000 f950 	bl	8003380 <TIM_ITRx_SetConfig>
      break;
 80030e0:	e02e      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ee:	001a      	movs	r2, r3
 80030f0:	f000 f914 	bl	800331c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2160      	movs	r1, #96	@ 0x60
 80030fa:	0018      	movs	r0, r3
 80030fc:	f000 f940 	bl	8003380 <TIM_ITRx_SetConfig>
      break;
 8003100:	e01e      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800310e:	001a      	movs	r2, r3
 8003110:	f000 f8d6 	bl	80032c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2140      	movs	r1, #64	@ 0x40
 800311a:	0018      	movs	r0, r3
 800311c:	f000 f930 	bl	8003380 <TIM_ITRx_SetConfig>
      break;
 8003120:	e00e      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	0019      	movs	r1, r3
 800312c:	0010      	movs	r0, r2
 800312e:	f000 f927 	bl	8003380 <TIM_ITRx_SetConfig>
      break;
 8003132:	e005      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003134:	230f      	movs	r3, #15
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	2201      	movs	r2, #1
 800313a:	701a      	strb	r2, [r3, #0]
      break;
 800313c:	e000      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800313e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	223d      	movs	r2, #61	@ 0x3d
 8003144:	2101      	movs	r1, #1
 8003146:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	223c      	movs	r2, #60	@ 0x3c
 800314c:	2100      	movs	r1, #0
 800314e:	5499      	strb	r1, [r3, r2]

  return status;
 8003150:	230f      	movs	r3, #15
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	781b      	ldrb	r3, [r3, #0]
}
 8003156:	0018      	movs	r0, r3
 8003158:	46bd      	mov	sp, r7
 800315a:	b004      	add	sp, #16
 800315c:	bd80      	pop	{r7, pc}
 800315e:	46c0      	nop			@ (mov r8, r8)
 8003160:	ffff00ff 	.word	0xffff00ff

08003164 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800316c:	46c0      	nop			@ (mov r8, r8)
 800316e:	46bd      	mov	sp, r7
 8003170:	b002      	add	sp, #8
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800317c:	46c0      	nop			@ (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	b002      	add	sp, #8
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800318c:	46c0      	nop			@ (mov r8, r8)
 800318e:	46bd      	mov	sp, r7
 8003190:	b002      	add	sp, #8
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800319c:	46c0      	nop			@ (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b002      	add	sp, #8
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a3b      	ldr	r2, [pc, #236]	@ (80032a4 <TIM_Base_SetConfig+0x100>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d008      	beq.n	80031ce <TIM_Base_SetConfig+0x2a>
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	2380      	movs	r3, #128	@ 0x80
 80031c0:	05db      	lsls	r3, r3, #23
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d003      	beq.n	80031ce <TIM_Base_SetConfig+0x2a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a37      	ldr	r2, [pc, #220]	@ (80032a8 <TIM_Base_SetConfig+0x104>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d108      	bne.n	80031e0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2270      	movs	r2, #112	@ 0x70
 80031d2:	4393      	bics	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a30      	ldr	r2, [pc, #192]	@ (80032a4 <TIM_Base_SetConfig+0x100>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d018      	beq.n	800321a <TIM_Base_SetConfig+0x76>
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	2380      	movs	r3, #128	@ 0x80
 80031ec:	05db      	lsls	r3, r3, #23
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d013      	beq.n	800321a <TIM_Base_SetConfig+0x76>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a2c      	ldr	r2, [pc, #176]	@ (80032a8 <TIM_Base_SetConfig+0x104>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00f      	beq.n	800321a <TIM_Base_SetConfig+0x76>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a2b      	ldr	r2, [pc, #172]	@ (80032ac <TIM_Base_SetConfig+0x108>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00b      	beq.n	800321a <TIM_Base_SetConfig+0x76>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a2a      	ldr	r2, [pc, #168]	@ (80032b0 <TIM_Base_SetConfig+0x10c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d007      	beq.n	800321a <TIM_Base_SetConfig+0x76>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a29      	ldr	r2, [pc, #164]	@ (80032b4 <TIM_Base_SetConfig+0x110>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d003      	beq.n	800321a <TIM_Base_SetConfig+0x76>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a28      	ldr	r2, [pc, #160]	@ (80032b8 <TIM_Base_SetConfig+0x114>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d108      	bne.n	800322c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4a27      	ldr	r2, [pc, #156]	@ (80032bc <TIM_Base_SetConfig+0x118>)
 800321e:	4013      	ands	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4313      	orrs	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2280      	movs	r2, #128	@ 0x80
 8003230:	4393      	bics	r3, r2
 8003232:	001a      	movs	r2, r3
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	4313      	orrs	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a13      	ldr	r2, [pc, #76]	@ (80032a4 <TIM_Base_SetConfig+0x100>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00b      	beq.n	8003272 <TIM_Base_SetConfig+0xce>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a14      	ldr	r2, [pc, #80]	@ (80032b0 <TIM_Base_SetConfig+0x10c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d007      	beq.n	8003272 <TIM_Base_SetConfig+0xce>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a13      	ldr	r2, [pc, #76]	@ (80032b4 <TIM_Base_SetConfig+0x110>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d003      	beq.n	8003272 <TIM_Base_SetConfig+0xce>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a12      	ldr	r2, [pc, #72]	@ (80032b8 <TIM_Base_SetConfig+0x114>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d103      	bne.n	800327a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	2201      	movs	r2, #1
 8003286:	4013      	ands	r3, r2
 8003288:	2b01      	cmp	r3, #1
 800328a:	d106      	bne.n	800329a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	2201      	movs	r2, #1
 8003292:	4393      	bics	r3, r2
 8003294:	001a      	movs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	611a      	str	r2, [r3, #16]
  }
}
 800329a:	46c0      	nop			@ (mov r8, r8)
 800329c:	46bd      	mov	sp, r7
 800329e:	b004      	add	sp, #16
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	40012c00 	.word	0x40012c00
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40002000 	.word	0x40002000
 80032b0:	40014000 	.word	0x40014000
 80032b4:	40014400 	.word	0x40014400
 80032b8:	40014800 	.word	0x40014800
 80032bc:	fffffcff 	.word	0xfffffcff

080032c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	2201      	movs	r2, #1
 80032d8:	4393      	bics	r3, r2
 80032da:	001a      	movs	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	22f0      	movs	r2, #240	@ 0xf0
 80032ea:	4393      	bics	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	220a      	movs	r2, #10
 80032fc:	4393      	bics	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	621a      	str	r2, [r3, #32]
}
 8003314:	46c0      	nop			@ (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b006      	add	sp, #24
 800331a:	bd80      	pop	{r7, pc}

0800331c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	2210      	movs	r2, #16
 8003334:	4393      	bics	r3, r2
 8003336:	001a      	movs	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4a0d      	ldr	r2, [pc, #52]	@ (800337c <TIM_TI2_ConfigInputStage+0x60>)
 8003346:	4013      	ands	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	031b      	lsls	r3, r3, #12
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	22a0      	movs	r2, #160	@ 0xa0
 8003358:	4393      	bics	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	4313      	orrs	r3, r2
 8003364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	621a      	str	r2, [r3, #32]
}
 8003372:	46c0      	nop			@ (mov r8, r8)
 8003374:	46bd      	mov	sp, r7
 8003376:	b006      	add	sp, #24
 8003378:	bd80      	pop	{r7, pc}
 800337a:	46c0      	nop			@ (mov r8, r8)
 800337c:	ffff0fff 	.word	0xffff0fff

08003380 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2270      	movs	r2, #112	@ 0x70
 8003394:	4393      	bics	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	2207      	movs	r2, #7
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	609a      	str	r2, [r3, #8]
}
 80033aa:	46c0      	nop			@ (mov r8, r8)
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b004      	add	sp, #16
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	4a09      	ldr	r2, [pc, #36]	@ (80033f0 <TIM_ETR_SetConfig+0x3c>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	021a      	lsls	r2, r3, #8
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4313      	orrs	r3, r2
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	4313      	orrs	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	609a      	str	r2, [r3, #8]
}
 80033e8:	46c0      	nop			@ (mov r8, r8)
 80033ea:	46bd      	mov	sp, r7
 80033ec:	b006      	add	sp, #24
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	ffff00ff 	.word	0xffff00ff

080033f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	223c      	movs	r2, #60	@ 0x3c
 8003402:	5c9b      	ldrb	r3, [r3, r2]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003408:	2302      	movs	r3, #2
 800340a:	e047      	b.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	223c      	movs	r2, #60	@ 0x3c
 8003410:	2101      	movs	r1, #1
 8003412:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	223d      	movs	r2, #61	@ 0x3d
 8003418:	2102      	movs	r1, #2
 800341a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2270      	movs	r2, #112	@ 0x70
 8003430:	4393      	bics	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	4313      	orrs	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a16      	ldr	r2, [pc, #88]	@ (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d00f      	beq.n	8003470 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	2380      	movs	r3, #128	@ 0x80
 8003456:	05db      	lsls	r3, r3, #23
 8003458:	429a      	cmp	r2, r3
 800345a:	d009      	beq.n	8003470 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a11      	ldr	r2, [pc, #68]	@ (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a10      	ldr	r2, [pc, #64]	@ (80034ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d10c      	bne.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2280      	movs	r2, #128	@ 0x80
 8003474:	4393      	bics	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	4313      	orrs	r3, r2
 8003480:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	223d      	movs	r2, #61	@ 0x3d
 800348e:	2101      	movs	r1, #1
 8003490:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	223c      	movs	r2, #60	@ 0x3c
 8003496:	2100      	movs	r1, #0
 8003498:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	0018      	movs	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	b004      	add	sp, #16
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40012c00 	.word	0x40012c00
 80034a8:	40000400 	.word	0x40000400
 80034ac:	40014000 	.word	0x40014000

080034b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034b8:	46c0      	nop			@ (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b002      	add	sp, #8
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034c8:	46c0      	nop			@ (mov r8, r8)
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b002      	add	sp, #8
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e044      	b.n	800356c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d107      	bne.n	80034fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2278      	movs	r2, #120	@ 0x78
 80034ee:	2100      	movs	r1, #0
 80034f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	0018      	movs	r0, r3
 80034f6:	f7fd fdbd 	bl	8001074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2224      	movs	r2, #36	@ 0x24
 80034fe:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2101      	movs	r1, #1
 800350c:	438a      	bics	r2, r1
 800350e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	0018      	movs	r0, r3
 800351c:	f000 fe38 	bl	8004190 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	0018      	movs	r0, r3
 8003524:	f000 fcac 	bl	8003e80 <UART_SetConfig>
 8003528:	0003      	movs	r3, r0
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e01c      	b.n	800356c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	490d      	ldr	r1, [pc, #52]	@ (8003574 <HAL_UART_Init+0xa4>)
 800353e:	400a      	ands	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	212a      	movs	r1, #42	@ 0x2a
 800354e:	438a      	bics	r2, r1
 8003550:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2101      	movs	r1, #1
 800355e:	430a      	orrs	r2, r1
 8003560:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	0018      	movs	r0, r3
 8003566:	f000 fec7 	bl	80042f8 <UART_CheckIdleState>
 800356a:	0003      	movs	r3, r0
}
 800356c:	0018      	movs	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	b002      	add	sp, #8
 8003572:	bd80      	pop	{r7, pc}
 8003574:	ffffb7ff 	.word	0xffffb7ff

08003578 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	@ 0x28
 800357c:	af02      	add	r7, sp, #8
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	1dbb      	adds	r3, r7, #6
 8003586:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800358c:	2b20      	cmp	r3, #32
 800358e:	d000      	beq.n	8003592 <HAL_UART_Transmit+0x1a>
 8003590:	e08c      	b.n	80036ac <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_UART_Transmit+0x28>
 8003598:	1dbb      	adds	r3, r7, #6
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e084      	b.n	80036ae <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	2380      	movs	r3, #128	@ 0x80
 80035aa:	015b      	lsls	r3, r3, #5
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d109      	bne.n	80035c4 <HAL_UART_Transmit+0x4c>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d105      	bne.n	80035c4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2201      	movs	r2, #1
 80035bc:	4013      	ands	r3, r2
 80035be:	d001      	beq.n	80035c4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e074      	b.n	80036ae <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2284      	movs	r2, #132	@ 0x84
 80035c8:	2100      	movs	r1, #0
 80035ca:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2221      	movs	r2, #33	@ 0x21
 80035d0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035d2:	f7fd ff65 	bl	80014a0 <HAL_GetTick>
 80035d6:	0003      	movs	r3, r0
 80035d8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1dba      	adds	r2, r7, #6
 80035de:	2150      	movs	r1, #80	@ 0x50
 80035e0:	8812      	ldrh	r2, [r2, #0]
 80035e2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1dba      	adds	r2, r7, #6
 80035e8:	2152      	movs	r1, #82	@ 0x52
 80035ea:	8812      	ldrh	r2, [r2, #0]
 80035ec:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	2380      	movs	r3, #128	@ 0x80
 80035f4:	015b      	lsls	r3, r3, #5
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d108      	bne.n	800360c <HAL_UART_Transmit+0x94>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d104      	bne.n	800360c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	61bb      	str	r3, [r7, #24]
 800360a:	e003      	b.n	8003614 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003610:	2300      	movs	r3, #0
 8003612:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003614:	e02f      	b.n	8003676 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	0013      	movs	r3, r2
 8003620:	2200      	movs	r2, #0
 8003622:	2180      	movs	r1, #128	@ 0x80
 8003624:	f000 ff10 	bl	8004448 <UART_WaitOnFlagUntilTimeout>
 8003628:	1e03      	subs	r3, r0, #0
 800362a:	d004      	beq.n	8003636 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e03b      	b.n	80036ae <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10b      	bne.n	8003654 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	881a      	ldrh	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	05d2      	lsls	r2, r2, #23
 8003646:	0dd2      	lsrs	r2, r2, #23
 8003648:	b292      	uxth	r2, r2
 800364a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	3302      	adds	r3, #2
 8003650:	61bb      	str	r3, [r7, #24]
 8003652:	e007      	b.n	8003664 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	781a      	ldrb	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3301      	adds	r3, #1
 8003662:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2252      	movs	r2, #82	@ 0x52
 8003668:	5a9b      	ldrh	r3, [r3, r2]
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b299      	uxth	r1, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2252      	movs	r2, #82	@ 0x52
 8003674:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2252      	movs	r2, #82	@ 0x52
 800367a:	5a9b      	ldrh	r3, [r3, r2]
 800367c:	b29b      	uxth	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1c9      	bne.n	8003616 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	0013      	movs	r3, r2
 800368c:	2200      	movs	r2, #0
 800368e:	2140      	movs	r1, #64	@ 0x40
 8003690:	f000 feda 	bl	8004448 <UART_WaitOnFlagUntilTimeout>
 8003694:	1e03      	subs	r3, r0, #0
 8003696:	d004      	beq.n	80036a2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e005      	b.n	80036ae <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	e000      	b.n	80036ae <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80036ac:	2302      	movs	r3, #2
  }
}
 80036ae:	0018      	movs	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b008      	add	sp, #32
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08a      	sub	sp, #40	@ 0x28
 80036bc:	af02      	add	r7, sp, #8
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	1dbb      	adds	r3, r7, #6
 80036c6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2280      	movs	r2, #128	@ 0x80
 80036cc:	589b      	ldr	r3, [r3, r2]
 80036ce:	2b20      	cmp	r3, #32
 80036d0:	d000      	beq.n	80036d4 <HAL_UART_Receive+0x1c>
 80036d2:	e0d1      	b.n	8003878 <HAL_UART_Receive+0x1c0>
  {
    if ((pData == NULL) || (Size == 0U))
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_UART_Receive+0x2a>
 80036da:	1dbb      	adds	r3, r7, #6
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e0c9      	b.n	800387a <HAL_UART_Receive+0x1c2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	2380      	movs	r3, #128	@ 0x80
 80036ec:	015b      	lsls	r3, r3, #5
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d109      	bne.n	8003706 <HAL_UART_Receive+0x4e>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d105      	bne.n	8003706 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2201      	movs	r2, #1
 80036fe:	4013      	ands	r3, r2
 8003700:	d001      	beq.n	8003706 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e0b9      	b.n	800387a <HAL_UART_Receive+0x1c2>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2284      	movs	r2, #132	@ 0x84
 800370a:	2100      	movs	r1, #0
 800370c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2280      	movs	r2, #128	@ 0x80
 8003712:	2122      	movs	r1, #34	@ 0x22
 8003714:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800371c:	f7fd fec0 	bl	80014a0 <HAL_GetTick>
 8003720:	0003      	movs	r3, r0
 8003722:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1dba      	adds	r2, r7, #6
 8003728:	2158      	movs	r1, #88	@ 0x58
 800372a:	8812      	ldrh	r2, [r2, #0]
 800372c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1dba      	adds	r2, r7, #6
 8003732:	215a      	movs	r1, #90	@ 0x5a
 8003734:	8812      	ldrh	r2, [r2, #0]
 8003736:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	2380      	movs	r3, #128	@ 0x80
 800373e:	015b      	lsls	r3, r3, #5
 8003740:	429a      	cmp	r2, r3
 8003742:	d10d      	bne.n	8003760 <HAL_UART_Receive+0xa8>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d104      	bne.n	8003756 <HAL_UART_Receive+0x9e>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	225c      	movs	r2, #92	@ 0x5c
 8003750:	494c      	ldr	r1, [pc, #304]	@ (8003884 <HAL_UART_Receive+0x1cc>)
 8003752:	5299      	strh	r1, [r3, r2]
 8003754:	e02e      	b.n	80037b4 <HAL_UART_Receive+0xfc>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	225c      	movs	r2, #92	@ 0x5c
 800375a:	21ff      	movs	r1, #255	@ 0xff
 800375c:	5299      	strh	r1, [r3, r2]
 800375e:	e029      	b.n	80037b4 <HAL_UART_Receive+0xfc>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10d      	bne.n	8003784 <HAL_UART_Receive+0xcc>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d104      	bne.n	800377a <HAL_UART_Receive+0xc2>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	225c      	movs	r2, #92	@ 0x5c
 8003774:	21ff      	movs	r1, #255	@ 0xff
 8003776:	5299      	strh	r1, [r3, r2]
 8003778:	e01c      	b.n	80037b4 <HAL_UART_Receive+0xfc>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	225c      	movs	r2, #92	@ 0x5c
 800377e:	217f      	movs	r1, #127	@ 0x7f
 8003780:	5299      	strh	r1, [r3, r2]
 8003782:	e017      	b.n	80037b4 <HAL_UART_Receive+0xfc>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	2380      	movs	r3, #128	@ 0x80
 800378a:	055b      	lsls	r3, r3, #21
 800378c:	429a      	cmp	r2, r3
 800378e:	d10d      	bne.n	80037ac <HAL_UART_Receive+0xf4>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d104      	bne.n	80037a2 <HAL_UART_Receive+0xea>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	225c      	movs	r2, #92	@ 0x5c
 800379c:	217f      	movs	r1, #127	@ 0x7f
 800379e:	5299      	strh	r1, [r3, r2]
 80037a0:	e008      	b.n	80037b4 <HAL_UART_Receive+0xfc>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	225c      	movs	r2, #92	@ 0x5c
 80037a6:	213f      	movs	r1, #63	@ 0x3f
 80037a8:	5299      	strh	r1, [r3, r2]
 80037aa:	e003      	b.n	80037b4 <HAL_UART_Receive+0xfc>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	225c      	movs	r2, #92	@ 0x5c
 80037b0:	2100      	movs	r1, #0
 80037b2:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80037b4:	2312      	movs	r3, #18
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	215c      	movs	r1, #92	@ 0x5c
 80037bc:	5a52      	ldrh	r2, [r2, r1]
 80037be:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	2380      	movs	r3, #128	@ 0x80
 80037c6:	015b      	lsls	r3, r3, #5
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d108      	bne.n	80037de <HAL_UART_Receive+0x126>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d104      	bne.n	80037de <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	61bb      	str	r3, [r7, #24]
 80037dc:	e003      	b.n	80037e6 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80037e6:	e03b      	b.n	8003860 <HAL_UART_Receive+0x1a8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	0013      	movs	r3, r2
 80037f2:	2200      	movs	r2, #0
 80037f4:	2120      	movs	r1, #32
 80037f6:	f000 fe27 	bl	8004448 <UART_WaitOnFlagUntilTimeout>
 80037fa:	1e03      	subs	r3, r0, #0
 80037fc:	d005      	beq.n	800380a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2280      	movs	r2, #128	@ 0x80
 8003802:	2120      	movs	r1, #32
 8003804:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e037      	b.n	800387a <HAL_UART_Receive+0x1c2>
      }
      if (pdata8bits == NULL)
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10e      	bne.n	800382e <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003816:	b29b      	uxth	r3, r3
 8003818:	2212      	movs	r2, #18
 800381a:	18ba      	adds	r2, r7, r2
 800381c:	8812      	ldrh	r2, [r2, #0]
 800381e:	4013      	ands	r3, r2
 8003820:	b29a      	uxth	r2, r3
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	3302      	adds	r3, #2
 800382a:	61bb      	str	r3, [r7, #24]
 800382c:	e00f      	b.n	800384e <HAL_UART_Receive+0x196>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003834:	b29b      	uxth	r3, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2212      	movs	r2, #18
 800383a:	18ba      	adds	r2, r7, r2
 800383c:	8812      	ldrh	r2, [r2, #0]
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	4013      	ands	r3, r2
 8003842:	b2da      	uxtb	r2, r3
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	3301      	adds	r3, #1
 800384c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	225a      	movs	r2, #90	@ 0x5a
 8003852:	5a9b      	ldrh	r3, [r3, r2]
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b01      	subs	r3, #1
 8003858:	b299      	uxth	r1, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	225a      	movs	r2, #90	@ 0x5a
 800385e:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	225a      	movs	r2, #90	@ 0x5a
 8003864:	5a9b      	ldrh	r3, [r3, r2]
 8003866:	b29b      	uxth	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1bd      	bne.n	80037e8 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2280      	movs	r2, #128	@ 0x80
 8003870:	2120      	movs	r1, #32
 8003872:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	e000      	b.n	800387a <HAL_UART_Receive+0x1c2>
  }
  else
  {
    return HAL_BUSY;
 8003878:	2302      	movs	r3, #2
  }
}
 800387a:	0018      	movs	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	b008      	add	sp, #32
 8003880:	bd80      	pop	{r7, pc}
 8003882:	46c0      	nop			@ (mov r8, r8)
 8003884:	000001ff 	.word	0x000001ff

08003888 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003888:	b590      	push	{r4, r7, lr}
 800388a:	b0ab      	sub	sp, #172	@ 0xac
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	22a4      	movs	r2, #164	@ 0xa4
 8003898:	18b9      	adds	r1, r7, r2
 800389a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	20a0      	movs	r0, #160	@ 0xa0
 80038a4:	1839      	adds	r1, r7, r0
 80038a6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	219c      	movs	r1, #156	@ 0x9c
 80038b0:	1879      	adds	r1, r7, r1
 80038b2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038b4:	0011      	movs	r1, r2
 80038b6:	18bb      	adds	r3, r7, r2
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a99      	ldr	r2, [pc, #612]	@ (8003b20 <HAL_UART_IRQHandler+0x298>)
 80038bc:	4013      	ands	r3, r2
 80038be:	2298      	movs	r2, #152	@ 0x98
 80038c0:	18bc      	adds	r4, r7, r2
 80038c2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80038c4:	18bb      	adds	r3, r7, r2
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d114      	bne.n	80038f6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80038cc:	187b      	adds	r3, r7, r1
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2220      	movs	r2, #32
 80038d2:	4013      	ands	r3, r2
 80038d4:	d00f      	beq.n	80038f6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038d6:	183b      	adds	r3, r7, r0
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2220      	movs	r2, #32
 80038dc:	4013      	ands	r3, r2
 80038de:	d00a      	beq.n	80038f6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d100      	bne.n	80038ea <HAL_UART_IRQHandler+0x62>
 80038e8:	e29e      	b.n	8003e28 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	0010      	movs	r0, r2
 80038f2:	4798      	blx	r3
      }
      return;
 80038f4:	e298      	b.n	8003e28 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80038f6:	2398      	movs	r3, #152	@ 0x98
 80038f8:	18fb      	adds	r3, r7, r3
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d100      	bne.n	8003902 <HAL_UART_IRQHandler+0x7a>
 8003900:	e114      	b.n	8003b2c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003902:	239c      	movs	r3, #156	@ 0x9c
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2201      	movs	r2, #1
 800390a:	4013      	ands	r3, r2
 800390c:	d106      	bne.n	800391c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800390e:	23a0      	movs	r3, #160	@ 0xa0
 8003910:	18fb      	adds	r3, r7, r3
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a83      	ldr	r2, [pc, #524]	@ (8003b24 <HAL_UART_IRQHandler+0x29c>)
 8003916:	4013      	ands	r3, r2
 8003918:	d100      	bne.n	800391c <HAL_UART_IRQHandler+0x94>
 800391a:	e107      	b.n	8003b2c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800391c:	23a4      	movs	r3, #164	@ 0xa4
 800391e:	18fb      	adds	r3, r7, r3
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2201      	movs	r2, #1
 8003924:	4013      	ands	r3, r2
 8003926:	d012      	beq.n	800394e <HAL_UART_IRQHandler+0xc6>
 8003928:	23a0      	movs	r3, #160	@ 0xa0
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	2380      	movs	r3, #128	@ 0x80
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	4013      	ands	r3, r2
 8003934:	d00b      	beq.n	800394e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2201      	movs	r2, #1
 800393c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2284      	movs	r2, #132	@ 0x84
 8003942:	589b      	ldr	r3, [r3, r2]
 8003944:	2201      	movs	r2, #1
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2184      	movs	r1, #132	@ 0x84
 800394c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800394e:	23a4      	movs	r3, #164	@ 0xa4
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2202      	movs	r2, #2
 8003956:	4013      	ands	r3, r2
 8003958:	d011      	beq.n	800397e <HAL_UART_IRQHandler+0xf6>
 800395a:	239c      	movs	r3, #156	@ 0x9c
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2201      	movs	r2, #1
 8003962:	4013      	ands	r3, r2
 8003964:	d00b      	beq.n	800397e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2202      	movs	r2, #2
 800396c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2284      	movs	r2, #132	@ 0x84
 8003972:	589b      	ldr	r3, [r3, r2]
 8003974:	2204      	movs	r2, #4
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2184      	movs	r1, #132	@ 0x84
 800397c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800397e:	23a4      	movs	r3, #164	@ 0xa4
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2204      	movs	r2, #4
 8003986:	4013      	ands	r3, r2
 8003988:	d011      	beq.n	80039ae <HAL_UART_IRQHandler+0x126>
 800398a:	239c      	movs	r3, #156	@ 0x9c
 800398c:	18fb      	adds	r3, r7, r3
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2201      	movs	r2, #1
 8003992:	4013      	ands	r3, r2
 8003994:	d00b      	beq.n	80039ae <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2204      	movs	r2, #4
 800399c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2284      	movs	r2, #132	@ 0x84
 80039a2:	589b      	ldr	r3, [r3, r2]
 80039a4:	2202      	movs	r2, #2
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2184      	movs	r1, #132	@ 0x84
 80039ac:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039ae:	23a4      	movs	r3, #164	@ 0xa4
 80039b0:	18fb      	adds	r3, r7, r3
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2208      	movs	r2, #8
 80039b6:	4013      	ands	r3, r2
 80039b8:	d017      	beq.n	80039ea <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039ba:	23a0      	movs	r3, #160	@ 0xa0
 80039bc:	18fb      	adds	r3, r7, r3
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2220      	movs	r2, #32
 80039c2:	4013      	ands	r3, r2
 80039c4:	d105      	bne.n	80039d2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80039c6:	239c      	movs	r3, #156	@ 0x9c
 80039c8:	18fb      	adds	r3, r7, r3
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2201      	movs	r2, #1
 80039ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039d0:	d00b      	beq.n	80039ea <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2208      	movs	r2, #8
 80039d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2284      	movs	r2, #132	@ 0x84
 80039de:	589b      	ldr	r3, [r3, r2]
 80039e0:	2208      	movs	r2, #8
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2184      	movs	r1, #132	@ 0x84
 80039e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039ea:	23a4      	movs	r3, #164	@ 0xa4
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	2380      	movs	r3, #128	@ 0x80
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	4013      	ands	r3, r2
 80039f6:	d013      	beq.n	8003a20 <HAL_UART_IRQHandler+0x198>
 80039f8:	23a0      	movs	r3, #160	@ 0xa0
 80039fa:	18fb      	adds	r3, r7, r3
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	2380      	movs	r3, #128	@ 0x80
 8003a00:	04db      	lsls	r3, r3, #19
 8003a02:	4013      	ands	r3, r2
 8003a04:	d00c      	beq.n	8003a20 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2280      	movs	r2, #128	@ 0x80
 8003a0c:	0112      	lsls	r2, r2, #4
 8003a0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2284      	movs	r2, #132	@ 0x84
 8003a14:	589b      	ldr	r3, [r3, r2]
 8003a16:	2220      	movs	r2, #32
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2184      	movs	r1, #132	@ 0x84
 8003a1e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2284      	movs	r2, #132	@ 0x84
 8003a24:	589b      	ldr	r3, [r3, r2]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d100      	bne.n	8003a2c <HAL_UART_IRQHandler+0x1a4>
 8003a2a:	e1ff      	b.n	8003e2c <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a2c:	23a4      	movs	r3, #164	@ 0xa4
 8003a2e:	18fb      	adds	r3, r7, r3
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2220      	movs	r2, #32
 8003a34:	4013      	ands	r3, r2
 8003a36:	d00e      	beq.n	8003a56 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a38:	23a0      	movs	r3, #160	@ 0xa0
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	4013      	ands	r3, r2
 8003a42:	d008      	beq.n	8003a56 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d004      	beq.n	8003a56 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	0010      	movs	r0, r2
 8003a54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2284      	movs	r2, #132	@ 0x84
 8003a5a:	589b      	ldr	r3, [r3, r2]
 8003a5c:	2194      	movs	r1, #148	@ 0x94
 8003a5e:	187a      	adds	r2, r7, r1
 8003a60:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2240      	movs	r2, #64	@ 0x40
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b40      	cmp	r3, #64	@ 0x40
 8003a6e:	d004      	beq.n	8003a7a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a70:	187b      	adds	r3, r7, r1
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2228      	movs	r2, #40	@ 0x28
 8003a76:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a78:	d047      	beq.n	8003b0a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f000 fd53 	bl	8004528 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2240      	movs	r2, #64	@ 0x40
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b40      	cmp	r3, #64	@ 0x40
 8003a8e:	d137      	bne.n	8003b00 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a90:	f3ef 8310 	mrs	r3, PRIMASK
 8003a94:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003a96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a98:	2090      	movs	r0, #144	@ 0x90
 8003a9a:	183a      	adds	r2, r7, r0
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003aa4:	f383 8810 	msr	PRIMASK, r3
}
 8003aa8:	46c0      	nop			@ (mov r8, r8)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2140      	movs	r1, #64	@ 0x40
 8003ab6:	438a      	bics	r2, r1
 8003ab8:	609a      	str	r2, [r3, #8]
 8003aba:	183b      	adds	r3, r7, r0
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ac2:	f383 8810 	msr	PRIMASK, r3
}
 8003ac6:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d012      	beq.n	8003af6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ad4:	4a14      	ldr	r2, [pc, #80]	@ (8003b28 <HAL_UART_IRQHandler+0x2a0>)
 8003ad6:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003adc:	0018      	movs	r0, r3
 8003ade:	f7fd fe47 	bl	8001770 <HAL_DMA_Abort_IT>
 8003ae2:	1e03      	subs	r3, r0, #0
 8003ae4:	d01a      	beq.n	8003b1c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af0:	0018      	movs	r0, r3
 8003af2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af4:	e012      	b.n	8003b1c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	0018      	movs	r0, r3
 8003afa:	f000 f9ad 	bl	8003e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afe:	e00d      	b.n	8003b1c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	0018      	movs	r0, r3
 8003b04:	f000 f9a8 	bl	8003e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b08:	e008      	b.n	8003b1c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f000 f9a3 	bl	8003e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2284      	movs	r2, #132	@ 0x84
 8003b16:	2100      	movs	r1, #0
 8003b18:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003b1a:	e187      	b.n	8003e2c <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b1c:	46c0      	nop			@ (mov r8, r8)
    return;
 8003b1e:	e185      	b.n	8003e2c <HAL_UART_IRQHandler+0x5a4>
 8003b20:	0000080f 	.word	0x0000080f
 8003b24:	04000120 	.word	0x04000120
 8003b28:	080045f1 	.word	0x080045f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d000      	beq.n	8003b36 <HAL_UART_IRQHandler+0x2ae>
 8003b34:	e139      	b.n	8003daa <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b36:	23a4      	movs	r3, #164	@ 0xa4
 8003b38:	18fb      	adds	r3, r7, r3
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2210      	movs	r2, #16
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d100      	bne.n	8003b44 <HAL_UART_IRQHandler+0x2bc>
 8003b42:	e132      	b.n	8003daa <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b44:	23a0      	movs	r3, #160	@ 0xa0
 8003b46:	18fb      	adds	r3, r7, r3
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2210      	movs	r2, #16
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d100      	bne.n	8003b52 <HAL_UART_IRQHandler+0x2ca>
 8003b50:	e12b      	b.n	8003daa <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2210      	movs	r2, #16
 8003b58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2240      	movs	r2, #64	@ 0x40
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b40      	cmp	r3, #64	@ 0x40
 8003b66:	d000      	beq.n	8003b6a <HAL_UART_IRQHandler+0x2e2>
 8003b68:	e09f      	b.n	8003caa <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	217e      	movs	r1, #126	@ 0x7e
 8003b74:	187b      	adds	r3, r7, r1
 8003b76:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003b78:	187b      	adds	r3, r7, r1
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d100      	bne.n	8003b82 <HAL_UART_IRQHandler+0x2fa>
 8003b80:	e156      	b.n	8003e30 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2258      	movs	r2, #88	@ 0x58
 8003b86:	5a9b      	ldrh	r3, [r3, r2]
 8003b88:	187a      	adds	r2, r7, r1
 8003b8a:	8812      	ldrh	r2, [r2, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d300      	bcc.n	8003b92 <HAL_UART_IRQHandler+0x30a>
 8003b90:	e14e      	b.n	8003e30 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	187a      	adds	r2, r7, r1
 8003b96:	215a      	movs	r1, #90	@ 0x5a
 8003b98:	8812      	ldrh	r2, [r2, #0]
 8003b9a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	d06f      	beq.n	8003c86 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8003baa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bae:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bb6:	f383 8810 	msr	PRIMASK, r3
}
 8003bba:	46c0      	nop			@ (mov r8, r8)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	499e      	ldr	r1, [pc, #632]	@ (8003e40 <HAL_UART_IRQHandler+0x5b8>)
 8003bc8:	400a      	ands	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bce:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd2:	f383 8810 	msr	PRIMASK, r3
}
 8003bd6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be0:	677b      	str	r3, [r7, #116]	@ 0x74
 8003be2:	2301      	movs	r3, #1
 8003be4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003be8:	f383 8810 	msr	PRIMASK, r3
}
 8003bec:	46c0      	nop			@ (mov r8, r8)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	438a      	bics	r2, r1
 8003bfc:	609a      	str	r2, [r3, #8]
 8003bfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c00:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c04:	f383 8810 	msr	PRIMASK, r3
}
 8003c08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003c10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c12:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c14:	2301      	movs	r3, #1
 8003c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c1a:	f383 8810 	msr	PRIMASK, r3
}
 8003c1e:	46c0      	nop			@ (mov r8, r8)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2140      	movs	r1, #64	@ 0x40
 8003c2c:	438a      	bics	r2, r1
 8003c2e:	609a      	str	r2, [r3, #8]
 8003c30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c32:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c36:	f383 8810 	msr	PRIMASK, r3
}
 8003c3a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2280      	movs	r2, #128	@ 0x80
 8003c40:	2120      	movs	r1, #32
 8003c42:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c4e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c54:	2301      	movs	r3, #1
 8003c56:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c5a:	f383 8810 	msr	PRIMASK, r3
}
 8003c5e:	46c0      	nop			@ (mov r8, r8)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2110      	movs	r1, #16
 8003c6c:	438a      	bics	r2, r1
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c72:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c76:	f383 8810 	msr	PRIMASK, r3
}
 8003c7a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c80:	0018      	movs	r0, r3
 8003c82:	f7fd fd3d 	bl	8001700 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2202      	movs	r2, #2
 8003c8a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2258      	movs	r2, #88	@ 0x58
 8003c90:	5a9a      	ldrh	r2, [r3, r2]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	215a      	movs	r1, #90	@ 0x5a
 8003c96:	5a5b      	ldrh	r3, [r3, r1]
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	0011      	movs	r1, r2
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f000 f8e0 	bl	8003e68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ca8:	e0c2      	b.n	8003e30 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2258      	movs	r2, #88	@ 0x58
 8003cae:	5a99      	ldrh	r1, [r3, r2]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	225a      	movs	r2, #90	@ 0x5a
 8003cb4:	5a9b      	ldrh	r3, [r3, r2]
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	208e      	movs	r0, #142	@ 0x8e
 8003cba:	183b      	adds	r3, r7, r0
 8003cbc:	1a8a      	subs	r2, r1, r2
 8003cbe:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	225a      	movs	r2, #90	@ 0x5a
 8003cc4:	5a9b      	ldrh	r3, [r3, r2]
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d100      	bne.n	8003cce <HAL_UART_IRQHandler+0x446>
 8003ccc:	e0b2      	b.n	8003e34 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8003cce:	183b      	adds	r3, r7, r0
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d100      	bne.n	8003cd8 <HAL_UART_IRQHandler+0x450>
 8003cd6:	e0ad      	b.n	8003e34 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cdc:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cde:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce0:	2488      	movs	r4, #136	@ 0x88
 8003ce2:	193a      	adds	r2, r7, r4
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f383 8810 	msr	PRIMASK, r3
}
 8003cf0:	46c0      	nop			@ (mov r8, r8)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4951      	ldr	r1, [pc, #324]	@ (8003e44 <HAL_UART_IRQHandler+0x5bc>)
 8003cfe:	400a      	ands	r2, r1
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	193b      	adds	r3, r7, r4
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f383 8810 	msr	PRIMASK, r3
}
 8003d0e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d10:	f3ef 8310 	mrs	r3, PRIMASK
 8003d14:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d16:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d18:	2484      	movs	r4, #132	@ 0x84
 8003d1a:	193a      	adds	r2, r7, r4
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	2301      	movs	r3, #1
 8003d20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f383 8810 	msr	PRIMASK, r3
}
 8003d28:	46c0      	nop			@ (mov r8, r8)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2101      	movs	r1, #1
 8003d36:	438a      	bics	r2, r1
 8003d38:	609a      	str	r2, [r3, #8]
 8003d3a:	193b      	adds	r3, r7, r4
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	f383 8810 	msr	PRIMASK, r3
}
 8003d46:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2280      	movs	r2, #128	@ 0x80
 8003d4c:	2120      	movs	r1, #32
 8003d4e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d60:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d64:	2480      	movs	r4, #128	@ 0x80
 8003d66:	193a      	adds	r2, r7, r4
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d70:	f383 8810 	msr	PRIMASK, r3
}
 8003d74:	46c0      	nop			@ (mov r8, r8)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2110      	movs	r1, #16
 8003d82:	438a      	bics	r2, r1
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	193b      	adds	r3, r7, r4
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8e:	f383 8810 	msr	PRIMASK, r3
}
 8003d92:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d9a:	183b      	adds	r3, r7, r0
 8003d9c:	881a      	ldrh	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	0011      	movs	r1, r2
 8003da2:	0018      	movs	r0, r3
 8003da4:	f000 f860 	bl	8003e68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003da8:	e044      	b.n	8003e34 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003daa:	23a4      	movs	r3, #164	@ 0xa4
 8003dac:	18fb      	adds	r3, r7, r3
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	2380      	movs	r3, #128	@ 0x80
 8003db2:	035b      	lsls	r3, r3, #13
 8003db4:	4013      	ands	r3, r2
 8003db6:	d010      	beq.n	8003dda <HAL_UART_IRQHandler+0x552>
 8003db8:	239c      	movs	r3, #156	@ 0x9c
 8003dba:	18fb      	adds	r3, r7, r3
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	2380      	movs	r3, #128	@ 0x80
 8003dc0:	03db      	lsls	r3, r3, #15
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d009      	beq.n	8003dda <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2280      	movs	r2, #128	@ 0x80
 8003dcc:	0352      	lsls	r2, r2, #13
 8003dce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f000 fc4e 	bl	8004674 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003dd8:	e02f      	b.n	8003e3a <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003dda:	23a4      	movs	r3, #164	@ 0xa4
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2280      	movs	r2, #128	@ 0x80
 8003de2:	4013      	ands	r3, r2
 8003de4:	d00f      	beq.n	8003e06 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003de6:	23a0      	movs	r3, #160	@ 0xa0
 8003de8:	18fb      	adds	r3, r7, r3
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2280      	movs	r2, #128	@ 0x80
 8003dee:	4013      	ands	r3, r2
 8003df0:	d009      	beq.n	8003e06 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d01e      	beq.n	8003e38 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	0010      	movs	r0, r2
 8003e02:	4798      	blx	r3
    }
    return;
 8003e04:	e018      	b.n	8003e38 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e06:	23a4      	movs	r3, #164	@ 0xa4
 8003e08:	18fb      	adds	r3, r7, r3
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2240      	movs	r2, #64	@ 0x40
 8003e0e:	4013      	ands	r3, r2
 8003e10:	d013      	beq.n	8003e3a <HAL_UART_IRQHandler+0x5b2>
 8003e12:	23a0      	movs	r3, #160	@ 0xa0
 8003e14:	18fb      	adds	r3, r7, r3
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2240      	movs	r2, #64	@ 0x40
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d00d      	beq.n	8003e3a <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	0018      	movs	r0, r3
 8003e22:	f000 fbfc 	bl	800461e <UART_EndTransmit_IT>
    return;
 8003e26:	e008      	b.n	8003e3a <HAL_UART_IRQHandler+0x5b2>
      return;
 8003e28:	46c0      	nop			@ (mov r8, r8)
 8003e2a:	e006      	b.n	8003e3a <HAL_UART_IRQHandler+0x5b2>
    return;
 8003e2c:	46c0      	nop			@ (mov r8, r8)
 8003e2e:	e004      	b.n	8003e3a <HAL_UART_IRQHandler+0x5b2>
      return;
 8003e30:	46c0      	nop			@ (mov r8, r8)
 8003e32:	e002      	b.n	8003e3a <HAL_UART_IRQHandler+0x5b2>
      return;
 8003e34:	46c0      	nop			@ (mov r8, r8)
 8003e36:	e000      	b.n	8003e3a <HAL_UART_IRQHandler+0x5b2>
    return;
 8003e38:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b02b      	add	sp, #172	@ 0xac
 8003e3e:	bd90      	pop	{r4, r7, pc}
 8003e40:	fffffeff 	.word	0xfffffeff
 8003e44:	fffffedf 	.word	0xfffffedf

08003e48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e50:	46c0      	nop			@ (mov r8, r8)
 8003e52:	46bd      	mov	sp, r7
 8003e54:	b002      	add	sp, #8
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e60:	46c0      	nop			@ (mov r8, r8)
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b002      	add	sp, #8
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	000a      	movs	r2, r1
 8003e72:	1cbb      	adds	r3, r7, #2
 8003e74:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e76:	46c0      	nop			@ (mov r8, r8)
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b002      	add	sp, #8
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e88:	231e      	movs	r3, #30
 8003e8a:	18fb      	adds	r3, r7, r3
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4aaf      	ldr	r2, [pc, #700]	@ (800416c <UART_SetConfig+0x2ec>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	4aaa      	ldr	r2, [pc, #680]	@ (8004170 <UART_SetConfig+0x2f0>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	0019      	movs	r1, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	4aa1      	ldr	r2, [pc, #644]	@ (8004174 <UART_SetConfig+0x2f4>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a9d      	ldr	r2, [pc, #628]	@ (8004178 <UART_SetConfig+0x2f8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d127      	bne.n	8003f56 <UART_SetConfig+0xd6>
 8003f06:	4b9d      	ldr	r3, [pc, #628]	@ (800417c <UART_SetConfig+0x2fc>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0a:	2203      	movs	r2, #3
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	d00d      	beq.n	8003f2e <UART_SetConfig+0xae>
 8003f12:	d81b      	bhi.n	8003f4c <UART_SetConfig+0xcc>
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d014      	beq.n	8003f42 <UART_SetConfig+0xc2>
 8003f18:	d818      	bhi.n	8003f4c <UART_SetConfig+0xcc>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <UART_SetConfig+0xa4>
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d00a      	beq.n	8003f38 <UART_SetConfig+0xb8>
 8003f22:	e013      	b.n	8003f4c <UART_SetConfig+0xcc>
 8003f24:	231f      	movs	r3, #31
 8003f26:	18fb      	adds	r3, r7, r3
 8003f28:	2200      	movs	r2, #0
 8003f2a:	701a      	strb	r2, [r3, #0]
 8003f2c:	e065      	b.n	8003ffa <UART_SetConfig+0x17a>
 8003f2e:	231f      	movs	r3, #31
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	2202      	movs	r2, #2
 8003f34:	701a      	strb	r2, [r3, #0]
 8003f36:	e060      	b.n	8003ffa <UART_SetConfig+0x17a>
 8003f38:	231f      	movs	r3, #31
 8003f3a:	18fb      	adds	r3, r7, r3
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	701a      	strb	r2, [r3, #0]
 8003f40:	e05b      	b.n	8003ffa <UART_SetConfig+0x17a>
 8003f42:	231f      	movs	r3, #31
 8003f44:	18fb      	adds	r3, r7, r3
 8003f46:	2208      	movs	r2, #8
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	e056      	b.n	8003ffa <UART_SetConfig+0x17a>
 8003f4c:	231f      	movs	r3, #31
 8003f4e:	18fb      	adds	r3, r7, r3
 8003f50:	2210      	movs	r2, #16
 8003f52:	701a      	strb	r2, [r3, #0]
 8003f54:	e051      	b.n	8003ffa <UART_SetConfig+0x17a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a89      	ldr	r2, [pc, #548]	@ (8004180 <UART_SetConfig+0x300>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d134      	bne.n	8003fca <UART_SetConfig+0x14a>
 8003f60:	4b86      	ldr	r3, [pc, #536]	@ (800417c <UART_SetConfig+0x2fc>)
 8003f62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f64:	23c0      	movs	r3, #192	@ 0xc0
 8003f66:	029b      	lsls	r3, r3, #10
 8003f68:	4013      	ands	r3, r2
 8003f6a:	22c0      	movs	r2, #192	@ 0xc0
 8003f6c:	0292      	lsls	r2, r2, #10
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d017      	beq.n	8003fa2 <UART_SetConfig+0x122>
 8003f72:	22c0      	movs	r2, #192	@ 0xc0
 8003f74:	0292      	lsls	r2, r2, #10
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d822      	bhi.n	8003fc0 <UART_SetConfig+0x140>
 8003f7a:	2280      	movs	r2, #128	@ 0x80
 8003f7c:	0292      	lsls	r2, r2, #10
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d019      	beq.n	8003fb6 <UART_SetConfig+0x136>
 8003f82:	2280      	movs	r2, #128	@ 0x80
 8003f84:	0292      	lsls	r2, r2, #10
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d81a      	bhi.n	8003fc0 <UART_SetConfig+0x140>
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d004      	beq.n	8003f98 <UART_SetConfig+0x118>
 8003f8e:	2280      	movs	r2, #128	@ 0x80
 8003f90:	0252      	lsls	r2, r2, #9
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00a      	beq.n	8003fac <UART_SetConfig+0x12c>
 8003f96:	e013      	b.n	8003fc0 <UART_SetConfig+0x140>
 8003f98:	231f      	movs	r3, #31
 8003f9a:	18fb      	adds	r3, r7, r3
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]
 8003fa0:	e02b      	b.n	8003ffa <UART_SetConfig+0x17a>
 8003fa2:	231f      	movs	r3, #31
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	701a      	strb	r2, [r3, #0]
 8003faa:	e026      	b.n	8003ffa <UART_SetConfig+0x17a>
 8003fac:	231f      	movs	r3, #31
 8003fae:	18fb      	adds	r3, r7, r3
 8003fb0:	2204      	movs	r2, #4
 8003fb2:	701a      	strb	r2, [r3, #0]
 8003fb4:	e021      	b.n	8003ffa <UART_SetConfig+0x17a>
 8003fb6:	231f      	movs	r3, #31
 8003fb8:	18fb      	adds	r3, r7, r3
 8003fba:	2208      	movs	r2, #8
 8003fbc:	701a      	strb	r2, [r3, #0]
 8003fbe:	e01c      	b.n	8003ffa <UART_SetConfig+0x17a>
 8003fc0:	231f      	movs	r3, #31
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	2210      	movs	r2, #16
 8003fc6:	701a      	strb	r2, [r3, #0]
 8003fc8:	e017      	b.n	8003ffa <UART_SetConfig+0x17a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a6d      	ldr	r2, [pc, #436]	@ (8004184 <UART_SetConfig+0x304>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d104      	bne.n	8003fde <UART_SetConfig+0x15e>
 8003fd4:	231f      	movs	r3, #31
 8003fd6:	18fb      	adds	r3, r7, r3
 8003fd8:	2200      	movs	r2, #0
 8003fda:	701a      	strb	r2, [r3, #0]
 8003fdc:	e00d      	b.n	8003ffa <UART_SetConfig+0x17a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a69      	ldr	r2, [pc, #420]	@ (8004188 <UART_SetConfig+0x308>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d104      	bne.n	8003ff2 <UART_SetConfig+0x172>
 8003fe8:	231f      	movs	r3, #31
 8003fea:	18fb      	adds	r3, r7, r3
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]
 8003ff0:	e003      	b.n	8003ffa <UART_SetConfig+0x17a>
 8003ff2:	231f      	movs	r3, #31
 8003ff4:	18fb      	adds	r3, r7, r3
 8003ff6:	2210      	movs	r2, #16
 8003ff8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69da      	ldr	r2, [r3, #28]
 8003ffe:	2380      	movs	r3, #128	@ 0x80
 8004000:	021b      	lsls	r3, r3, #8
 8004002:	429a      	cmp	r2, r3
 8004004:	d15c      	bne.n	80040c0 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8004006:	231f      	movs	r3, #31
 8004008:	18fb      	adds	r3, r7, r3
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b08      	cmp	r3, #8
 800400e:	d015      	beq.n	800403c <UART_SetConfig+0x1bc>
 8004010:	dc18      	bgt.n	8004044 <UART_SetConfig+0x1c4>
 8004012:	2b04      	cmp	r3, #4
 8004014:	d00d      	beq.n	8004032 <UART_SetConfig+0x1b2>
 8004016:	dc15      	bgt.n	8004044 <UART_SetConfig+0x1c4>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <UART_SetConfig+0x1a2>
 800401c:	2b02      	cmp	r3, #2
 800401e:	d005      	beq.n	800402c <UART_SetConfig+0x1ac>
 8004020:	e010      	b.n	8004044 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004022:	f7fe fd37 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 8004026:	0003      	movs	r3, r0
 8004028:	61bb      	str	r3, [r7, #24]
        break;
 800402a:	e012      	b.n	8004052 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800402c:	4b57      	ldr	r3, [pc, #348]	@ (800418c <UART_SetConfig+0x30c>)
 800402e:	61bb      	str	r3, [r7, #24]
        break;
 8004030:	e00f      	b.n	8004052 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004032:	f7fe fcb3 	bl	800299c <HAL_RCC_GetSysClockFreq>
 8004036:	0003      	movs	r3, r0
 8004038:	61bb      	str	r3, [r7, #24]
        break;
 800403a:	e00a      	b.n	8004052 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800403c:	2380      	movs	r3, #128	@ 0x80
 800403e:	021b      	lsls	r3, r3, #8
 8004040:	61bb      	str	r3, [r7, #24]
        break;
 8004042:	e006      	b.n	8004052 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004048:	231e      	movs	r3, #30
 800404a:	18fb      	adds	r3, r7, r3
 800404c:	2201      	movs	r2, #1
 800404e:	701a      	strb	r2, [r3, #0]
        break;
 8004050:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d100      	bne.n	800405a <UART_SetConfig+0x1da>
 8004058:	e07a      	b.n	8004150 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	005a      	lsls	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	18d2      	adds	r2, r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	0019      	movs	r1, r3
 800406c:	0010      	movs	r0, r2
 800406e:	f7fc f85d 	bl	800012c <__udivsi3>
 8004072:	0003      	movs	r3, r0
 8004074:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2b0f      	cmp	r3, #15
 800407a:	d91c      	bls.n	80040b6 <UART_SetConfig+0x236>
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	2380      	movs	r3, #128	@ 0x80
 8004080:	025b      	lsls	r3, r3, #9
 8004082:	429a      	cmp	r2, r3
 8004084:	d217      	bcs.n	80040b6 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	b29a      	uxth	r2, r3
 800408a:	200e      	movs	r0, #14
 800408c:	183b      	adds	r3, r7, r0
 800408e:	210f      	movs	r1, #15
 8004090:	438a      	bics	r2, r1
 8004092:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	085b      	lsrs	r3, r3, #1
 8004098:	b29b      	uxth	r3, r3
 800409a:	2207      	movs	r2, #7
 800409c:	4013      	ands	r3, r2
 800409e:	b299      	uxth	r1, r3
 80040a0:	183b      	adds	r3, r7, r0
 80040a2:	183a      	adds	r2, r7, r0
 80040a4:	8812      	ldrh	r2, [r2, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	183a      	adds	r2, r7, r0
 80040b0:	8812      	ldrh	r2, [r2, #0]
 80040b2:	60da      	str	r2, [r3, #12]
 80040b4:	e04c      	b.n	8004150 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80040b6:	231e      	movs	r3, #30
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	2201      	movs	r2, #1
 80040bc:	701a      	strb	r2, [r3, #0]
 80040be:	e047      	b.n	8004150 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040c0:	231f      	movs	r3, #31
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d015      	beq.n	80040f6 <UART_SetConfig+0x276>
 80040ca:	dc18      	bgt.n	80040fe <UART_SetConfig+0x27e>
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d00d      	beq.n	80040ec <UART_SetConfig+0x26c>
 80040d0:	dc15      	bgt.n	80040fe <UART_SetConfig+0x27e>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <UART_SetConfig+0x25c>
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d005      	beq.n	80040e6 <UART_SetConfig+0x266>
 80040da:	e010      	b.n	80040fe <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040dc:	f7fe fcda 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 80040e0:	0003      	movs	r3, r0
 80040e2:	61bb      	str	r3, [r7, #24]
        break;
 80040e4:	e012      	b.n	800410c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040e6:	4b29      	ldr	r3, [pc, #164]	@ (800418c <UART_SetConfig+0x30c>)
 80040e8:	61bb      	str	r3, [r7, #24]
        break;
 80040ea:	e00f      	b.n	800410c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ec:	f7fe fc56 	bl	800299c <HAL_RCC_GetSysClockFreq>
 80040f0:	0003      	movs	r3, r0
 80040f2:	61bb      	str	r3, [r7, #24]
        break;
 80040f4:	e00a      	b.n	800410c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040f6:	2380      	movs	r3, #128	@ 0x80
 80040f8:	021b      	lsls	r3, r3, #8
 80040fa:	61bb      	str	r3, [r7, #24]
        break;
 80040fc:	e006      	b.n	800410c <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 80040fe:	2300      	movs	r3, #0
 8004100:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004102:	231e      	movs	r3, #30
 8004104:	18fb      	adds	r3, r7, r3
 8004106:	2201      	movs	r2, #1
 8004108:	701a      	strb	r2, [r3, #0]
        break;
 800410a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d01e      	beq.n	8004150 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	085a      	lsrs	r2, r3, #1
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	18d2      	adds	r2, r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	0019      	movs	r1, r3
 8004122:	0010      	movs	r0, r2
 8004124:	f7fc f802 	bl	800012c <__udivsi3>
 8004128:	0003      	movs	r3, r0
 800412a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	2b0f      	cmp	r3, #15
 8004130:	d90a      	bls.n	8004148 <UART_SetConfig+0x2c8>
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	2380      	movs	r3, #128	@ 0x80
 8004136:	025b      	lsls	r3, r3, #9
 8004138:	429a      	cmp	r2, r3
 800413a:	d205      	bcs.n	8004148 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	b29a      	uxth	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	60da      	str	r2, [r3, #12]
 8004146:	e003      	b.n	8004150 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8004148:	231e      	movs	r3, #30
 800414a:	18fb      	adds	r3, r7, r3
 800414c:	2201      	movs	r2, #1
 800414e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800415c:	231e      	movs	r3, #30
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	781b      	ldrb	r3, [r3, #0]
}
 8004162:	0018      	movs	r0, r3
 8004164:	46bd      	mov	sp, r7
 8004166:	b008      	add	sp, #32
 8004168:	bd80      	pop	{r7, pc}
 800416a:	46c0      	nop			@ (mov r8, r8)
 800416c:	efff69f3 	.word	0xefff69f3
 8004170:	ffffcfff 	.word	0xffffcfff
 8004174:	fffff4ff 	.word	0xfffff4ff
 8004178:	40013800 	.word	0x40013800
 800417c:	40021000 	.word	0x40021000
 8004180:	40004400 	.word	0x40004400
 8004184:	40004800 	.word	0x40004800
 8004188:	40004c00 	.word	0x40004c00
 800418c:	007a1200 	.word	0x007a1200

08004190 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419c:	2208      	movs	r2, #8
 800419e:	4013      	ands	r3, r2
 80041a0:	d00b      	beq.n	80041ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	4a4a      	ldr	r2, [pc, #296]	@ (80042d4 <UART_AdvFeatureConfig+0x144>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	0019      	movs	r1, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041be:	2201      	movs	r2, #1
 80041c0:	4013      	ands	r3, r2
 80041c2:	d00b      	beq.n	80041dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	4a43      	ldr	r2, [pc, #268]	@ (80042d8 <UART_AdvFeatureConfig+0x148>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	0019      	movs	r1, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	2202      	movs	r2, #2
 80041e2:	4013      	ands	r3, r2
 80041e4:	d00b      	beq.n	80041fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	4a3b      	ldr	r2, [pc, #236]	@ (80042dc <UART_AdvFeatureConfig+0x14c>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	0019      	movs	r1, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004202:	2204      	movs	r2, #4
 8004204:	4013      	ands	r3, r2
 8004206:	d00b      	beq.n	8004220 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	4a34      	ldr	r2, [pc, #208]	@ (80042e0 <UART_AdvFeatureConfig+0x150>)
 8004210:	4013      	ands	r3, r2
 8004212:	0019      	movs	r1, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004224:	2210      	movs	r2, #16
 8004226:	4013      	ands	r3, r2
 8004228:	d00b      	beq.n	8004242 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4a2c      	ldr	r2, [pc, #176]	@ (80042e4 <UART_AdvFeatureConfig+0x154>)
 8004232:	4013      	ands	r3, r2
 8004234:	0019      	movs	r1, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004246:	2220      	movs	r2, #32
 8004248:	4013      	ands	r3, r2
 800424a:	d00b      	beq.n	8004264 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	4a25      	ldr	r2, [pc, #148]	@ (80042e8 <UART_AdvFeatureConfig+0x158>)
 8004254:	4013      	ands	r3, r2
 8004256:	0019      	movs	r1, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004268:	2240      	movs	r2, #64	@ 0x40
 800426a:	4013      	ands	r3, r2
 800426c:	d01d      	beq.n	80042aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	4a1d      	ldr	r2, [pc, #116]	@ (80042ec <UART_AdvFeatureConfig+0x15c>)
 8004276:	4013      	ands	r3, r2
 8004278:	0019      	movs	r1, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800428a:	2380      	movs	r3, #128	@ 0x80
 800428c:	035b      	lsls	r3, r3, #13
 800428e:	429a      	cmp	r2, r3
 8004290:	d10b      	bne.n	80042aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	4a15      	ldr	r2, [pc, #84]	@ (80042f0 <UART_AdvFeatureConfig+0x160>)
 800429a:	4013      	ands	r3, r2
 800429c:	0019      	movs	r1, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ae:	2280      	movs	r2, #128	@ 0x80
 80042b0:	4013      	ands	r3, r2
 80042b2:	d00b      	beq.n	80042cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	4a0e      	ldr	r2, [pc, #56]	@ (80042f4 <UART_AdvFeatureConfig+0x164>)
 80042bc:	4013      	ands	r3, r2
 80042be:	0019      	movs	r1, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	605a      	str	r2, [r3, #4]
  }
}
 80042cc:	46c0      	nop			@ (mov r8, r8)
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b002      	add	sp, #8
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	ffff7fff 	.word	0xffff7fff
 80042d8:	fffdffff 	.word	0xfffdffff
 80042dc:	fffeffff 	.word	0xfffeffff
 80042e0:	fffbffff 	.word	0xfffbffff
 80042e4:	ffffefff 	.word	0xffffefff
 80042e8:	ffffdfff 	.word	0xffffdfff
 80042ec:	ffefffff 	.word	0xffefffff
 80042f0:	ff9fffff 	.word	0xff9fffff
 80042f4:	fff7ffff 	.word	0xfff7ffff

080042f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b092      	sub	sp, #72	@ 0x48
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2284      	movs	r2, #132	@ 0x84
 8004304:	2100      	movs	r1, #0
 8004306:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004308:	f7fd f8ca 	bl	80014a0 <HAL_GetTick>
 800430c:	0003      	movs	r3, r0
 800430e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2208      	movs	r2, #8
 8004318:	4013      	ands	r3, r2
 800431a:	2b08      	cmp	r3, #8
 800431c:	d12c      	bne.n	8004378 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800431e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004320:	2280      	movs	r2, #128	@ 0x80
 8004322:	0391      	lsls	r1, r2, #14
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	4a46      	ldr	r2, [pc, #280]	@ (8004440 <UART_CheckIdleState+0x148>)
 8004328:	9200      	str	r2, [sp, #0]
 800432a:	2200      	movs	r2, #0
 800432c:	f000 f88c 	bl	8004448 <UART_WaitOnFlagUntilTimeout>
 8004330:	1e03      	subs	r3, r0, #0
 8004332:	d021      	beq.n	8004378 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004334:	f3ef 8310 	mrs	r3, PRIMASK
 8004338:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800433c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800433e:	2301      	movs	r3, #1
 8004340:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004344:	f383 8810 	msr	PRIMASK, r3
}
 8004348:	46c0      	nop			@ (mov r8, r8)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2180      	movs	r1, #128	@ 0x80
 8004356:	438a      	bics	r2, r1
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800435e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004360:	f383 8810 	msr	PRIMASK, r3
}
 8004364:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2278      	movs	r2, #120	@ 0x78
 8004370:	2100      	movs	r1, #0
 8004372:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e05f      	b.n	8004438 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2204      	movs	r2, #4
 8004380:	4013      	ands	r3, r2
 8004382:	2b04      	cmp	r3, #4
 8004384:	d146      	bne.n	8004414 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004388:	2280      	movs	r2, #128	@ 0x80
 800438a:	03d1      	lsls	r1, r2, #15
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	4a2c      	ldr	r2, [pc, #176]	@ (8004440 <UART_CheckIdleState+0x148>)
 8004390:	9200      	str	r2, [sp, #0]
 8004392:	2200      	movs	r2, #0
 8004394:	f000 f858 	bl	8004448 <UART_WaitOnFlagUntilTimeout>
 8004398:	1e03      	subs	r3, r0, #0
 800439a:	d03b      	beq.n	8004414 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800439c:	f3ef 8310 	mrs	r3, PRIMASK
 80043a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80043a2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80043a6:	2301      	movs	r3, #1
 80043a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f383 8810 	msr	PRIMASK, r3
}
 80043b0:	46c0      	nop			@ (mov r8, r8)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4921      	ldr	r1, [pc, #132]	@ (8004444 <UART_CheckIdleState+0x14c>)
 80043be:	400a      	ands	r2, r1
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f383 8810 	msr	PRIMASK, r3
}
 80043cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ce:	f3ef 8310 	mrs	r3, PRIMASK
 80043d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80043d4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80043d8:	2301      	movs	r3, #1
 80043da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f383 8810 	msr	PRIMASK, r3
}
 80043e2:	46c0      	nop			@ (mov r8, r8)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2101      	movs	r1, #1
 80043f0:	438a      	bics	r2, r1
 80043f2:	609a      	str	r2, [r3, #8]
 80043f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	f383 8810 	msr	PRIMASK, r3
}
 80043fe:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2280      	movs	r2, #128	@ 0x80
 8004404:	2120      	movs	r1, #32
 8004406:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2278      	movs	r2, #120	@ 0x78
 800440c:	2100      	movs	r1, #0
 800440e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e011      	b.n	8004438 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2220      	movs	r2, #32
 8004418:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2280      	movs	r2, #128	@ 0x80
 800441e:	2120      	movs	r1, #32
 8004420:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2278      	movs	r2, #120	@ 0x78
 8004432:	2100      	movs	r1, #0
 8004434:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	0018      	movs	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	b010      	add	sp, #64	@ 0x40
 800443e:	bd80      	pop	{r7, pc}
 8004440:	01ffffff 	.word	0x01ffffff
 8004444:	fffffedf 	.word	0xfffffedf

08004448 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	1dfb      	adds	r3, r7, #7
 8004456:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004458:	e051      	b.n	80044fe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	3301      	adds	r3, #1
 800445e:	d04e      	beq.n	80044fe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004460:	f7fd f81e 	bl	80014a0 <HAL_GetTick>
 8004464:	0002      	movs	r2, r0
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	429a      	cmp	r2, r3
 800446e:	d302      	bcc.n	8004476 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e051      	b.n	800451e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2204      	movs	r2, #4
 8004482:	4013      	ands	r3, r2
 8004484:	d03b      	beq.n	80044fe <UART_WaitOnFlagUntilTimeout+0xb6>
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b80      	cmp	r3, #128	@ 0x80
 800448a:	d038      	beq.n	80044fe <UART_WaitOnFlagUntilTimeout+0xb6>
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b40      	cmp	r3, #64	@ 0x40
 8004490:	d035      	beq.n	80044fe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	2208      	movs	r2, #8
 800449a:	4013      	ands	r3, r2
 800449c:	2b08      	cmp	r3, #8
 800449e:	d111      	bne.n	80044c4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2208      	movs	r2, #8
 80044a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	0018      	movs	r0, r3
 80044ac:	f000 f83c 	bl	8004528 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2284      	movs	r2, #132	@ 0x84
 80044b4:	2108      	movs	r1, #8
 80044b6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2278      	movs	r2, #120	@ 0x78
 80044bc:	2100      	movs	r1, #0
 80044be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e02c      	b.n	800451e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69da      	ldr	r2, [r3, #28]
 80044ca:	2380      	movs	r3, #128	@ 0x80
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	401a      	ands	r2, r3
 80044d0:	2380      	movs	r3, #128	@ 0x80
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d112      	bne.n	80044fe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2280      	movs	r2, #128	@ 0x80
 80044de:	0112      	lsls	r2, r2, #4
 80044e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	0018      	movs	r0, r3
 80044e6:	f000 f81f 	bl	8004528 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2284      	movs	r2, #132	@ 0x84
 80044ee:	2120      	movs	r1, #32
 80044f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2278      	movs	r2, #120	@ 0x78
 80044f6:	2100      	movs	r1, #0
 80044f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e00f      	b.n	800451e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	4013      	ands	r3, r2
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	425a      	negs	r2, r3
 800450e:	4153      	adcs	r3, r2
 8004510:	b2db      	uxtb	r3, r3
 8004512:	001a      	movs	r2, r3
 8004514:	1dfb      	adds	r3, r7, #7
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d09e      	beq.n	800445a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	0018      	movs	r0, r3
 8004520:	46bd      	mov	sp, r7
 8004522:	b004      	add	sp, #16
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08e      	sub	sp, #56	@ 0x38
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004530:	f3ef 8310 	mrs	r3, PRIMASK
 8004534:	617b      	str	r3, [r7, #20]
  return(result);
 8004536:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004538:	637b      	str	r3, [r7, #52]	@ 0x34
 800453a:	2301      	movs	r3, #1
 800453c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	f383 8810 	msr	PRIMASK, r3
}
 8004544:	46c0      	nop			@ (mov r8, r8)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4926      	ldr	r1, [pc, #152]	@ (80045ec <UART_EndRxTransfer+0xc4>)
 8004552:	400a      	ands	r2, r1
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004558:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	f383 8810 	msr	PRIMASK, r3
}
 8004560:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004562:	f3ef 8310 	mrs	r3, PRIMASK
 8004566:	623b      	str	r3, [r7, #32]
  return(result);
 8004568:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456a:	633b      	str	r3, [r7, #48]	@ 0x30
 800456c:	2301      	movs	r3, #1
 800456e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004572:	f383 8810 	msr	PRIMASK, r3
}
 8004576:	46c0      	nop			@ (mov r8, r8)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2101      	movs	r1, #1
 8004584:	438a      	bics	r2, r1
 8004586:	609a      	str	r2, [r3, #8]
 8004588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458e:	f383 8810 	msr	PRIMASK, r3
}
 8004592:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004598:	2b01      	cmp	r3, #1
 800459a:	d118      	bne.n	80045ce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800459c:	f3ef 8310 	mrs	r3, PRIMASK
 80045a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80045a2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045a6:	2301      	movs	r3, #1
 80045a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f383 8810 	msr	PRIMASK, r3
}
 80045b0:	46c0      	nop			@ (mov r8, r8)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2110      	movs	r1, #16
 80045be:	438a      	bics	r2, r1
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f383 8810 	msr	PRIMASK, r3
}
 80045cc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2280      	movs	r2, #128	@ 0x80
 80045d2:	2120      	movs	r1, #32
 80045d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80045e2:	46c0      	nop			@ (mov r8, r8)
 80045e4:	46bd      	mov	sp, r7
 80045e6:	b00e      	add	sp, #56	@ 0x38
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	46c0      	nop			@ (mov r8, r8)
 80045ec:	fffffedf 	.word	0xfffffedf

080045f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	225a      	movs	r2, #90	@ 0x5a
 8004602:	2100      	movs	r1, #0
 8004604:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2252      	movs	r2, #82	@ 0x52
 800460a:	2100      	movs	r1, #0
 800460c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	0018      	movs	r0, r3
 8004612:	f7ff fc21 	bl	8003e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004616:	46c0      	nop			@ (mov r8, r8)
 8004618:	46bd      	mov	sp, r7
 800461a:	b004      	add	sp, #16
 800461c:	bd80      	pop	{r7, pc}

0800461e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b086      	sub	sp, #24
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004626:	f3ef 8310 	mrs	r3, PRIMASK
 800462a:	60bb      	str	r3, [r7, #8]
  return(result);
 800462c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	2301      	movs	r3, #1
 8004632:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f383 8810 	msr	PRIMASK, r3
}
 800463a:	46c0      	nop			@ (mov r8, r8)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2140      	movs	r1, #64	@ 0x40
 8004648:	438a      	bics	r2, r1
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f383 8810 	msr	PRIMASK, r3
}
 8004656:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	0018      	movs	r0, r3
 8004668:	f7ff fbee 	bl	8003e48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800466c:	46c0      	nop			@ (mov r8, r8)
 800466e:	46bd      	mov	sp, r7
 8004670:	b006      	add	sp, #24
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800467c:	46c0      	nop			@ (mov r8, r8)
 800467e:	46bd      	mov	sp, r7
 8004680:	b002      	add	sp, #8
 8004682:	bd80      	pop	{r7, pc}

08004684 <siprintf>:
 8004684:	b40e      	push	{r1, r2, r3}
 8004686:	b500      	push	{lr}
 8004688:	490b      	ldr	r1, [pc, #44]	@ (80046b8 <siprintf+0x34>)
 800468a:	b09c      	sub	sp, #112	@ 0x70
 800468c:	ab1d      	add	r3, sp, #116	@ 0x74
 800468e:	9002      	str	r0, [sp, #8]
 8004690:	9006      	str	r0, [sp, #24]
 8004692:	9107      	str	r1, [sp, #28]
 8004694:	9104      	str	r1, [sp, #16]
 8004696:	4809      	ldr	r0, [pc, #36]	@ (80046bc <siprintf+0x38>)
 8004698:	4909      	ldr	r1, [pc, #36]	@ (80046c0 <siprintf+0x3c>)
 800469a:	cb04      	ldmia	r3!, {r2}
 800469c:	9105      	str	r1, [sp, #20]
 800469e:	6800      	ldr	r0, [r0, #0]
 80046a0:	a902      	add	r1, sp, #8
 80046a2:	9301      	str	r3, [sp, #4]
 80046a4:	f000 f9a8 	bl	80049f8 <_svfiprintf_r>
 80046a8:	2200      	movs	r2, #0
 80046aa:	9b02      	ldr	r3, [sp, #8]
 80046ac:	701a      	strb	r2, [r3, #0]
 80046ae:	b01c      	add	sp, #112	@ 0x70
 80046b0:	bc08      	pop	{r3}
 80046b2:	b003      	add	sp, #12
 80046b4:	4718      	bx	r3
 80046b6:	46c0      	nop			@ (mov r8, r8)
 80046b8:	7fffffff 	.word	0x7fffffff
 80046bc:	2000000c 	.word	0x2000000c
 80046c0:	ffff0208 	.word	0xffff0208

080046c4 <memset>:
 80046c4:	0003      	movs	r3, r0
 80046c6:	1882      	adds	r2, r0, r2
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d100      	bne.n	80046ce <memset+0xa>
 80046cc:	4770      	bx	lr
 80046ce:	7019      	strb	r1, [r3, #0]
 80046d0:	3301      	adds	r3, #1
 80046d2:	e7f9      	b.n	80046c8 <memset+0x4>

080046d4 <__errno>:
 80046d4:	4b01      	ldr	r3, [pc, #4]	@ (80046dc <__errno+0x8>)
 80046d6:	6818      	ldr	r0, [r3, #0]
 80046d8:	4770      	bx	lr
 80046da:	46c0      	nop			@ (mov r8, r8)
 80046dc:	2000000c 	.word	0x2000000c

080046e0 <__libc_init_array>:
 80046e0:	b570      	push	{r4, r5, r6, lr}
 80046e2:	2600      	movs	r6, #0
 80046e4:	4c0c      	ldr	r4, [pc, #48]	@ (8004718 <__libc_init_array+0x38>)
 80046e6:	4d0d      	ldr	r5, [pc, #52]	@ (800471c <__libc_init_array+0x3c>)
 80046e8:	1b64      	subs	r4, r4, r5
 80046ea:	10a4      	asrs	r4, r4, #2
 80046ec:	42a6      	cmp	r6, r4
 80046ee:	d109      	bne.n	8004704 <__libc_init_array+0x24>
 80046f0:	2600      	movs	r6, #0
 80046f2:	f000 fc65 	bl	8004fc0 <_init>
 80046f6:	4c0a      	ldr	r4, [pc, #40]	@ (8004720 <__libc_init_array+0x40>)
 80046f8:	4d0a      	ldr	r5, [pc, #40]	@ (8004724 <__libc_init_array+0x44>)
 80046fa:	1b64      	subs	r4, r4, r5
 80046fc:	10a4      	asrs	r4, r4, #2
 80046fe:	42a6      	cmp	r6, r4
 8004700:	d105      	bne.n	800470e <__libc_init_array+0x2e>
 8004702:	bd70      	pop	{r4, r5, r6, pc}
 8004704:	00b3      	lsls	r3, r6, #2
 8004706:	58eb      	ldr	r3, [r5, r3]
 8004708:	4798      	blx	r3
 800470a:	3601      	adds	r6, #1
 800470c:	e7ee      	b.n	80046ec <__libc_init_array+0xc>
 800470e:	00b3      	lsls	r3, r6, #2
 8004710:	58eb      	ldr	r3, [r5, r3]
 8004712:	4798      	blx	r3
 8004714:	3601      	adds	r6, #1
 8004716:	e7f2      	b.n	80046fe <__libc_init_array+0x1e>
 8004718:	080051dc 	.word	0x080051dc
 800471c:	080051dc 	.word	0x080051dc
 8004720:	080051e0 	.word	0x080051e0
 8004724:	080051dc 	.word	0x080051dc

08004728 <__retarget_lock_acquire_recursive>:
 8004728:	4770      	bx	lr

0800472a <__retarget_lock_release_recursive>:
 800472a:	4770      	bx	lr

0800472c <memcpy>:
 800472c:	2300      	movs	r3, #0
 800472e:	b510      	push	{r4, lr}
 8004730:	429a      	cmp	r2, r3
 8004732:	d100      	bne.n	8004736 <memcpy+0xa>
 8004734:	bd10      	pop	{r4, pc}
 8004736:	5ccc      	ldrb	r4, [r1, r3]
 8004738:	54c4      	strb	r4, [r0, r3]
 800473a:	3301      	adds	r3, #1
 800473c:	e7f8      	b.n	8004730 <memcpy+0x4>
	...

08004740 <_free_r>:
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	0005      	movs	r5, r0
 8004744:	1e0c      	subs	r4, r1, #0
 8004746:	d010      	beq.n	800476a <_free_r+0x2a>
 8004748:	3c04      	subs	r4, #4
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	da00      	bge.n	8004752 <_free_r+0x12>
 8004750:	18e4      	adds	r4, r4, r3
 8004752:	0028      	movs	r0, r5
 8004754:	f000 f8e0 	bl	8004918 <__malloc_lock>
 8004758:	4a1d      	ldr	r2, [pc, #116]	@ (80047d0 <_free_r+0x90>)
 800475a:	6813      	ldr	r3, [r2, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d105      	bne.n	800476c <_free_r+0x2c>
 8004760:	6063      	str	r3, [r4, #4]
 8004762:	6014      	str	r4, [r2, #0]
 8004764:	0028      	movs	r0, r5
 8004766:	f000 f8df 	bl	8004928 <__malloc_unlock>
 800476a:	bd70      	pop	{r4, r5, r6, pc}
 800476c:	42a3      	cmp	r3, r4
 800476e:	d908      	bls.n	8004782 <_free_r+0x42>
 8004770:	6820      	ldr	r0, [r4, #0]
 8004772:	1821      	adds	r1, r4, r0
 8004774:	428b      	cmp	r3, r1
 8004776:	d1f3      	bne.n	8004760 <_free_r+0x20>
 8004778:	6819      	ldr	r1, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	1809      	adds	r1, r1, r0
 800477e:	6021      	str	r1, [r4, #0]
 8004780:	e7ee      	b.n	8004760 <_free_r+0x20>
 8004782:	001a      	movs	r2, r3
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <_free_r+0x4e>
 800478a:	42a3      	cmp	r3, r4
 800478c:	d9f9      	bls.n	8004782 <_free_r+0x42>
 800478e:	6811      	ldr	r1, [r2, #0]
 8004790:	1850      	adds	r0, r2, r1
 8004792:	42a0      	cmp	r0, r4
 8004794:	d10b      	bne.n	80047ae <_free_r+0x6e>
 8004796:	6820      	ldr	r0, [r4, #0]
 8004798:	1809      	adds	r1, r1, r0
 800479a:	1850      	adds	r0, r2, r1
 800479c:	6011      	str	r1, [r2, #0]
 800479e:	4283      	cmp	r3, r0
 80047a0:	d1e0      	bne.n	8004764 <_free_r+0x24>
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	1841      	adds	r1, r0, r1
 80047a8:	6011      	str	r1, [r2, #0]
 80047aa:	6053      	str	r3, [r2, #4]
 80047ac:	e7da      	b.n	8004764 <_free_r+0x24>
 80047ae:	42a0      	cmp	r0, r4
 80047b0:	d902      	bls.n	80047b8 <_free_r+0x78>
 80047b2:	230c      	movs	r3, #12
 80047b4:	602b      	str	r3, [r5, #0]
 80047b6:	e7d5      	b.n	8004764 <_free_r+0x24>
 80047b8:	6820      	ldr	r0, [r4, #0]
 80047ba:	1821      	adds	r1, r4, r0
 80047bc:	428b      	cmp	r3, r1
 80047be:	d103      	bne.n	80047c8 <_free_r+0x88>
 80047c0:	6819      	ldr	r1, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	1809      	adds	r1, r1, r0
 80047c6:	6021      	str	r1, [r4, #0]
 80047c8:	6063      	str	r3, [r4, #4]
 80047ca:	6054      	str	r4, [r2, #4]
 80047cc:	e7ca      	b.n	8004764 <_free_r+0x24>
 80047ce:	46c0      	nop			@ (mov r8, r8)
 80047d0:	200003cc 	.word	0x200003cc

080047d4 <sbrk_aligned>:
 80047d4:	b570      	push	{r4, r5, r6, lr}
 80047d6:	4e0f      	ldr	r6, [pc, #60]	@ (8004814 <sbrk_aligned+0x40>)
 80047d8:	000d      	movs	r5, r1
 80047da:	6831      	ldr	r1, [r6, #0]
 80047dc:	0004      	movs	r4, r0
 80047de:	2900      	cmp	r1, #0
 80047e0:	d102      	bne.n	80047e8 <sbrk_aligned+0x14>
 80047e2:	f000 fb99 	bl	8004f18 <_sbrk_r>
 80047e6:	6030      	str	r0, [r6, #0]
 80047e8:	0029      	movs	r1, r5
 80047ea:	0020      	movs	r0, r4
 80047ec:	f000 fb94 	bl	8004f18 <_sbrk_r>
 80047f0:	1c43      	adds	r3, r0, #1
 80047f2:	d103      	bne.n	80047fc <sbrk_aligned+0x28>
 80047f4:	2501      	movs	r5, #1
 80047f6:	426d      	negs	r5, r5
 80047f8:	0028      	movs	r0, r5
 80047fa:	bd70      	pop	{r4, r5, r6, pc}
 80047fc:	2303      	movs	r3, #3
 80047fe:	1cc5      	adds	r5, r0, #3
 8004800:	439d      	bics	r5, r3
 8004802:	42a8      	cmp	r0, r5
 8004804:	d0f8      	beq.n	80047f8 <sbrk_aligned+0x24>
 8004806:	1a29      	subs	r1, r5, r0
 8004808:	0020      	movs	r0, r4
 800480a:	f000 fb85 	bl	8004f18 <_sbrk_r>
 800480e:	3001      	adds	r0, #1
 8004810:	d1f2      	bne.n	80047f8 <sbrk_aligned+0x24>
 8004812:	e7ef      	b.n	80047f4 <sbrk_aligned+0x20>
 8004814:	200003c8 	.word	0x200003c8

08004818 <_malloc_r>:
 8004818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800481a:	2203      	movs	r2, #3
 800481c:	1ccb      	adds	r3, r1, #3
 800481e:	4393      	bics	r3, r2
 8004820:	3308      	adds	r3, #8
 8004822:	0005      	movs	r5, r0
 8004824:	001f      	movs	r7, r3
 8004826:	2b0c      	cmp	r3, #12
 8004828:	d234      	bcs.n	8004894 <_malloc_r+0x7c>
 800482a:	270c      	movs	r7, #12
 800482c:	42b9      	cmp	r1, r7
 800482e:	d833      	bhi.n	8004898 <_malloc_r+0x80>
 8004830:	0028      	movs	r0, r5
 8004832:	f000 f871 	bl	8004918 <__malloc_lock>
 8004836:	4e37      	ldr	r6, [pc, #220]	@ (8004914 <_malloc_r+0xfc>)
 8004838:	6833      	ldr	r3, [r6, #0]
 800483a:	001c      	movs	r4, r3
 800483c:	2c00      	cmp	r4, #0
 800483e:	d12f      	bne.n	80048a0 <_malloc_r+0x88>
 8004840:	0039      	movs	r1, r7
 8004842:	0028      	movs	r0, r5
 8004844:	f7ff ffc6 	bl	80047d4 <sbrk_aligned>
 8004848:	0004      	movs	r4, r0
 800484a:	1c43      	adds	r3, r0, #1
 800484c:	d15f      	bne.n	800490e <_malloc_r+0xf6>
 800484e:	6834      	ldr	r4, [r6, #0]
 8004850:	9400      	str	r4, [sp, #0]
 8004852:	9b00      	ldr	r3, [sp, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d14a      	bne.n	80048ee <_malloc_r+0xd6>
 8004858:	2c00      	cmp	r4, #0
 800485a:	d052      	beq.n	8004902 <_malloc_r+0xea>
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	0028      	movs	r0, r5
 8004860:	18e3      	adds	r3, r4, r3
 8004862:	9900      	ldr	r1, [sp, #0]
 8004864:	9301      	str	r3, [sp, #4]
 8004866:	f000 fb57 	bl	8004f18 <_sbrk_r>
 800486a:	9b01      	ldr	r3, [sp, #4]
 800486c:	4283      	cmp	r3, r0
 800486e:	d148      	bne.n	8004902 <_malloc_r+0xea>
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	0028      	movs	r0, r5
 8004874:	1aff      	subs	r7, r7, r3
 8004876:	0039      	movs	r1, r7
 8004878:	f7ff ffac 	bl	80047d4 <sbrk_aligned>
 800487c:	3001      	adds	r0, #1
 800487e:	d040      	beq.n	8004902 <_malloc_r+0xea>
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	19db      	adds	r3, r3, r7
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	6833      	ldr	r3, [r6, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	2a00      	cmp	r2, #0
 800488c:	d133      	bne.n	80048f6 <_malloc_r+0xde>
 800488e:	9b00      	ldr	r3, [sp, #0]
 8004890:	6033      	str	r3, [r6, #0]
 8004892:	e019      	b.n	80048c8 <_malloc_r+0xb0>
 8004894:	2b00      	cmp	r3, #0
 8004896:	dac9      	bge.n	800482c <_malloc_r+0x14>
 8004898:	230c      	movs	r3, #12
 800489a:	602b      	str	r3, [r5, #0]
 800489c:	2000      	movs	r0, #0
 800489e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048a0:	6821      	ldr	r1, [r4, #0]
 80048a2:	1bc9      	subs	r1, r1, r7
 80048a4:	d420      	bmi.n	80048e8 <_malloc_r+0xd0>
 80048a6:	290b      	cmp	r1, #11
 80048a8:	d90a      	bls.n	80048c0 <_malloc_r+0xa8>
 80048aa:	19e2      	adds	r2, r4, r7
 80048ac:	6027      	str	r7, [r4, #0]
 80048ae:	42a3      	cmp	r3, r4
 80048b0:	d104      	bne.n	80048bc <_malloc_r+0xa4>
 80048b2:	6032      	str	r2, [r6, #0]
 80048b4:	6863      	ldr	r3, [r4, #4]
 80048b6:	6011      	str	r1, [r2, #0]
 80048b8:	6053      	str	r3, [r2, #4]
 80048ba:	e005      	b.n	80048c8 <_malloc_r+0xb0>
 80048bc:	605a      	str	r2, [r3, #4]
 80048be:	e7f9      	b.n	80048b4 <_malloc_r+0x9c>
 80048c0:	6862      	ldr	r2, [r4, #4]
 80048c2:	42a3      	cmp	r3, r4
 80048c4:	d10e      	bne.n	80048e4 <_malloc_r+0xcc>
 80048c6:	6032      	str	r2, [r6, #0]
 80048c8:	0028      	movs	r0, r5
 80048ca:	f000 f82d 	bl	8004928 <__malloc_unlock>
 80048ce:	0020      	movs	r0, r4
 80048d0:	2207      	movs	r2, #7
 80048d2:	300b      	adds	r0, #11
 80048d4:	1d23      	adds	r3, r4, #4
 80048d6:	4390      	bics	r0, r2
 80048d8:	1ac2      	subs	r2, r0, r3
 80048da:	4298      	cmp	r0, r3
 80048dc:	d0df      	beq.n	800489e <_malloc_r+0x86>
 80048de:	1a1b      	subs	r3, r3, r0
 80048e0:	50a3      	str	r3, [r4, r2]
 80048e2:	e7dc      	b.n	800489e <_malloc_r+0x86>
 80048e4:	605a      	str	r2, [r3, #4]
 80048e6:	e7ef      	b.n	80048c8 <_malloc_r+0xb0>
 80048e8:	0023      	movs	r3, r4
 80048ea:	6864      	ldr	r4, [r4, #4]
 80048ec:	e7a6      	b.n	800483c <_malloc_r+0x24>
 80048ee:	9c00      	ldr	r4, [sp, #0]
 80048f0:	6863      	ldr	r3, [r4, #4]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	e7ad      	b.n	8004852 <_malloc_r+0x3a>
 80048f6:	001a      	movs	r2, r3
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	42a3      	cmp	r3, r4
 80048fc:	d1fb      	bne.n	80048f6 <_malloc_r+0xde>
 80048fe:	2300      	movs	r3, #0
 8004900:	e7da      	b.n	80048b8 <_malloc_r+0xa0>
 8004902:	230c      	movs	r3, #12
 8004904:	0028      	movs	r0, r5
 8004906:	602b      	str	r3, [r5, #0]
 8004908:	f000 f80e 	bl	8004928 <__malloc_unlock>
 800490c:	e7c6      	b.n	800489c <_malloc_r+0x84>
 800490e:	6007      	str	r7, [r0, #0]
 8004910:	e7da      	b.n	80048c8 <_malloc_r+0xb0>
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	200003cc 	.word	0x200003cc

08004918 <__malloc_lock>:
 8004918:	b510      	push	{r4, lr}
 800491a:	4802      	ldr	r0, [pc, #8]	@ (8004924 <__malloc_lock+0xc>)
 800491c:	f7ff ff04 	bl	8004728 <__retarget_lock_acquire_recursive>
 8004920:	bd10      	pop	{r4, pc}
 8004922:	46c0      	nop			@ (mov r8, r8)
 8004924:	200003c4 	.word	0x200003c4

08004928 <__malloc_unlock>:
 8004928:	b510      	push	{r4, lr}
 800492a:	4802      	ldr	r0, [pc, #8]	@ (8004934 <__malloc_unlock+0xc>)
 800492c:	f7ff fefd 	bl	800472a <__retarget_lock_release_recursive>
 8004930:	bd10      	pop	{r4, pc}
 8004932:	46c0      	nop			@ (mov r8, r8)
 8004934:	200003c4 	.word	0x200003c4

08004938 <__ssputs_r>:
 8004938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800493a:	688e      	ldr	r6, [r1, #8]
 800493c:	b085      	sub	sp, #20
 800493e:	001f      	movs	r7, r3
 8004940:	000c      	movs	r4, r1
 8004942:	680b      	ldr	r3, [r1, #0]
 8004944:	9002      	str	r0, [sp, #8]
 8004946:	9203      	str	r2, [sp, #12]
 8004948:	42be      	cmp	r6, r7
 800494a:	d830      	bhi.n	80049ae <__ssputs_r+0x76>
 800494c:	210c      	movs	r1, #12
 800494e:	5e62      	ldrsh	r2, [r4, r1]
 8004950:	2190      	movs	r1, #144	@ 0x90
 8004952:	00c9      	lsls	r1, r1, #3
 8004954:	420a      	tst	r2, r1
 8004956:	d028      	beq.n	80049aa <__ssputs_r+0x72>
 8004958:	2003      	movs	r0, #3
 800495a:	6921      	ldr	r1, [r4, #16]
 800495c:	1a5b      	subs	r3, r3, r1
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	6963      	ldr	r3, [r4, #20]
 8004962:	4343      	muls	r3, r0
 8004964:	9801      	ldr	r0, [sp, #4]
 8004966:	0fdd      	lsrs	r5, r3, #31
 8004968:	18ed      	adds	r5, r5, r3
 800496a:	1c7b      	adds	r3, r7, #1
 800496c:	181b      	adds	r3, r3, r0
 800496e:	106d      	asrs	r5, r5, #1
 8004970:	42ab      	cmp	r3, r5
 8004972:	d900      	bls.n	8004976 <__ssputs_r+0x3e>
 8004974:	001d      	movs	r5, r3
 8004976:	0552      	lsls	r2, r2, #21
 8004978:	d528      	bpl.n	80049cc <__ssputs_r+0x94>
 800497a:	0029      	movs	r1, r5
 800497c:	9802      	ldr	r0, [sp, #8]
 800497e:	f7ff ff4b 	bl	8004818 <_malloc_r>
 8004982:	1e06      	subs	r6, r0, #0
 8004984:	d02c      	beq.n	80049e0 <__ssputs_r+0xa8>
 8004986:	9a01      	ldr	r2, [sp, #4]
 8004988:	6921      	ldr	r1, [r4, #16]
 800498a:	f7ff fecf 	bl	800472c <memcpy>
 800498e:	89a2      	ldrh	r2, [r4, #12]
 8004990:	4b18      	ldr	r3, [pc, #96]	@ (80049f4 <__ssputs_r+0xbc>)
 8004992:	401a      	ands	r2, r3
 8004994:	2380      	movs	r3, #128	@ 0x80
 8004996:	4313      	orrs	r3, r2
 8004998:	81a3      	strh	r3, [r4, #12]
 800499a:	9b01      	ldr	r3, [sp, #4]
 800499c:	6126      	str	r6, [r4, #16]
 800499e:	18f6      	adds	r6, r6, r3
 80049a0:	6026      	str	r6, [r4, #0]
 80049a2:	003e      	movs	r6, r7
 80049a4:	6165      	str	r5, [r4, #20]
 80049a6:	1aed      	subs	r5, r5, r3
 80049a8:	60a5      	str	r5, [r4, #8]
 80049aa:	42be      	cmp	r6, r7
 80049ac:	d900      	bls.n	80049b0 <__ssputs_r+0x78>
 80049ae:	003e      	movs	r6, r7
 80049b0:	0032      	movs	r2, r6
 80049b2:	9903      	ldr	r1, [sp, #12]
 80049b4:	6820      	ldr	r0, [r4, #0]
 80049b6:	f000 fa9b 	bl	8004ef0 <memmove>
 80049ba:	2000      	movs	r0, #0
 80049bc:	68a3      	ldr	r3, [r4, #8]
 80049be:	1b9b      	subs	r3, r3, r6
 80049c0:	60a3      	str	r3, [r4, #8]
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	199b      	adds	r3, r3, r6
 80049c6:	6023      	str	r3, [r4, #0]
 80049c8:	b005      	add	sp, #20
 80049ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049cc:	002a      	movs	r2, r5
 80049ce:	9802      	ldr	r0, [sp, #8]
 80049d0:	f000 fabf 	bl	8004f52 <_realloc_r>
 80049d4:	1e06      	subs	r6, r0, #0
 80049d6:	d1e0      	bne.n	800499a <__ssputs_r+0x62>
 80049d8:	6921      	ldr	r1, [r4, #16]
 80049da:	9802      	ldr	r0, [sp, #8]
 80049dc:	f7ff feb0 	bl	8004740 <_free_r>
 80049e0:	230c      	movs	r3, #12
 80049e2:	2001      	movs	r0, #1
 80049e4:	9a02      	ldr	r2, [sp, #8]
 80049e6:	4240      	negs	r0, r0
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	89a2      	ldrh	r2, [r4, #12]
 80049ec:	3334      	adds	r3, #52	@ 0x34
 80049ee:	4313      	orrs	r3, r2
 80049f0:	81a3      	strh	r3, [r4, #12]
 80049f2:	e7e9      	b.n	80049c8 <__ssputs_r+0x90>
 80049f4:	fffffb7f 	.word	0xfffffb7f

080049f8 <_svfiprintf_r>:
 80049f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049fa:	b0a1      	sub	sp, #132	@ 0x84
 80049fc:	9003      	str	r0, [sp, #12]
 80049fe:	001d      	movs	r5, r3
 8004a00:	898b      	ldrh	r3, [r1, #12]
 8004a02:	000f      	movs	r7, r1
 8004a04:	0016      	movs	r6, r2
 8004a06:	061b      	lsls	r3, r3, #24
 8004a08:	d511      	bpl.n	8004a2e <_svfiprintf_r+0x36>
 8004a0a:	690b      	ldr	r3, [r1, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10e      	bne.n	8004a2e <_svfiprintf_r+0x36>
 8004a10:	2140      	movs	r1, #64	@ 0x40
 8004a12:	f7ff ff01 	bl	8004818 <_malloc_r>
 8004a16:	6038      	str	r0, [r7, #0]
 8004a18:	6138      	str	r0, [r7, #16]
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	d105      	bne.n	8004a2a <_svfiprintf_r+0x32>
 8004a1e:	230c      	movs	r3, #12
 8004a20:	9a03      	ldr	r2, [sp, #12]
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	2001      	movs	r0, #1
 8004a26:	4240      	negs	r0, r0
 8004a28:	e0cf      	b.n	8004bca <_svfiprintf_r+0x1d2>
 8004a2a:	2340      	movs	r3, #64	@ 0x40
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	ac08      	add	r4, sp, #32
 8004a32:	6163      	str	r3, [r4, #20]
 8004a34:	3320      	adds	r3, #32
 8004a36:	7663      	strb	r3, [r4, #25]
 8004a38:	3310      	adds	r3, #16
 8004a3a:	76a3      	strb	r3, [r4, #26]
 8004a3c:	9507      	str	r5, [sp, #28]
 8004a3e:	0035      	movs	r5, r6
 8004a40:	782b      	ldrb	r3, [r5, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <_svfiprintf_r+0x52>
 8004a46:	2b25      	cmp	r3, #37	@ 0x25
 8004a48:	d148      	bne.n	8004adc <_svfiprintf_r+0xe4>
 8004a4a:	1bab      	subs	r3, r5, r6
 8004a4c:	9305      	str	r3, [sp, #20]
 8004a4e:	42b5      	cmp	r5, r6
 8004a50:	d00b      	beq.n	8004a6a <_svfiprintf_r+0x72>
 8004a52:	0032      	movs	r2, r6
 8004a54:	0039      	movs	r1, r7
 8004a56:	9803      	ldr	r0, [sp, #12]
 8004a58:	f7ff ff6e 	bl	8004938 <__ssputs_r>
 8004a5c:	3001      	adds	r0, #1
 8004a5e:	d100      	bne.n	8004a62 <_svfiprintf_r+0x6a>
 8004a60:	e0ae      	b.n	8004bc0 <_svfiprintf_r+0x1c8>
 8004a62:	6963      	ldr	r3, [r4, #20]
 8004a64:	9a05      	ldr	r2, [sp, #20]
 8004a66:	189b      	adds	r3, r3, r2
 8004a68:	6163      	str	r3, [r4, #20]
 8004a6a:	782b      	ldrb	r3, [r5, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d100      	bne.n	8004a72 <_svfiprintf_r+0x7a>
 8004a70:	e0a6      	b.n	8004bc0 <_svfiprintf_r+0x1c8>
 8004a72:	2201      	movs	r2, #1
 8004a74:	2300      	movs	r3, #0
 8004a76:	4252      	negs	r2, r2
 8004a78:	6062      	str	r2, [r4, #4]
 8004a7a:	a904      	add	r1, sp, #16
 8004a7c:	3254      	adds	r2, #84	@ 0x54
 8004a7e:	1852      	adds	r2, r2, r1
 8004a80:	1c6e      	adds	r6, r5, #1
 8004a82:	6023      	str	r3, [r4, #0]
 8004a84:	60e3      	str	r3, [r4, #12]
 8004a86:	60a3      	str	r3, [r4, #8]
 8004a88:	7013      	strb	r3, [r2, #0]
 8004a8a:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004a8c:	4b54      	ldr	r3, [pc, #336]	@ (8004be0 <_svfiprintf_r+0x1e8>)
 8004a8e:	2205      	movs	r2, #5
 8004a90:	0018      	movs	r0, r3
 8004a92:	7831      	ldrb	r1, [r6, #0]
 8004a94:	9305      	str	r3, [sp, #20]
 8004a96:	f000 fa51 	bl	8004f3c <memchr>
 8004a9a:	1c75      	adds	r5, r6, #1
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	d11f      	bne.n	8004ae0 <_svfiprintf_r+0xe8>
 8004aa0:	6822      	ldr	r2, [r4, #0]
 8004aa2:	06d3      	lsls	r3, r2, #27
 8004aa4:	d504      	bpl.n	8004ab0 <_svfiprintf_r+0xb8>
 8004aa6:	2353      	movs	r3, #83	@ 0x53
 8004aa8:	a904      	add	r1, sp, #16
 8004aaa:	185b      	adds	r3, r3, r1
 8004aac:	2120      	movs	r1, #32
 8004aae:	7019      	strb	r1, [r3, #0]
 8004ab0:	0713      	lsls	r3, r2, #28
 8004ab2:	d504      	bpl.n	8004abe <_svfiprintf_r+0xc6>
 8004ab4:	2353      	movs	r3, #83	@ 0x53
 8004ab6:	a904      	add	r1, sp, #16
 8004ab8:	185b      	adds	r3, r3, r1
 8004aba:	212b      	movs	r1, #43	@ 0x2b
 8004abc:	7019      	strb	r1, [r3, #0]
 8004abe:	7833      	ldrb	r3, [r6, #0]
 8004ac0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ac2:	d016      	beq.n	8004af2 <_svfiprintf_r+0xfa>
 8004ac4:	0035      	movs	r5, r6
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	200a      	movs	r0, #10
 8004aca:	68e3      	ldr	r3, [r4, #12]
 8004acc:	782a      	ldrb	r2, [r5, #0]
 8004ace:	1c6e      	adds	r6, r5, #1
 8004ad0:	3a30      	subs	r2, #48	@ 0x30
 8004ad2:	2a09      	cmp	r2, #9
 8004ad4:	d950      	bls.n	8004b78 <_svfiprintf_r+0x180>
 8004ad6:	2900      	cmp	r1, #0
 8004ad8:	d111      	bne.n	8004afe <_svfiprintf_r+0x106>
 8004ada:	e017      	b.n	8004b0c <_svfiprintf_r+0x114>
 8004adc:	3501      	adds	r5, #1
 8004ade:	e7af      	b.n	8004a40 <_svfiprintf_r+0x48>
 8004ae0:	9b05      	ldr	r3, [sp, #20]
 8004ae2:	6822      	ldr	r2, [r4, #0]
 8004ae4:	1ac0      	subs	r0, r0, r3
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	4083      	lsls	r3, r0
 8004aea:	4313      	orrs	r3, r2
 8004aec:	002e      	movs	r6, r5
 8004aee:	6023      	str	r3, [r4, #0]
 8004af0:	e7cc      	b.n	8004a8c <_svfiprintf_r+0x94>
 8004af2:	9b07      	ldr	r3, [sp, #28]
 8004af4:	1d19      	adds	r1, r3, #4
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	9107      	str	r1, [sp, #28]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	db01      	blt.n	8004b02 <_svfiprintf_r+0x10a>
 8004afe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b00:	e004      	b.n	8004b0c <_svfiprintf_r+0x114>
 8004b02:	425b      	negs	r3, r3
 8004b04:	60e3      	str	r3, [r4, #12]
 8004b06:	2302      	movs	r3, #2
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	6023      	str	r3, [r4, #0]
 8004b0c:	782b      	ldrb	r3, [r5, #0]
 8004b0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b10:	d10c      	bne.n	8004b2c <_svfiprintf_r+0x134>
 8004b12:	786b      	ldrb	r3, [r5, #1]
 8004b14:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b16:	d134      	bne.n	8004b82 <_svfiprintf_r+0x18a>
 8004b18:	9b07      	ldr	r3, [sp, #28]
 8004b1a:	3502      	adds	r5, #2
 8004b1c:	1d1a      	adds	r2, r3, #4
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	9207      	str	r2, [sp, #28]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	da01      	bge.n	8004b2a <_svfiprintf_r+0x132>
 8004b26:	2301      	movs	r3, #1
 8004b28:	425b      	negs	r3, r3
 8004b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b2c:	4e2d      	ldr	r6, [pc, #180]	@ (8004be4 <_svfiprintf_r+0x1ec>)
 8004b2e:	2203      	movs	r2, #3
 8004b30:	0030      	movs	r0, r6
 8004b32:	7829      	ldrb	r1, [r5, #0]
 8004b34:	f000 fa02 	bl	8004f3c <memchr>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	d006      	beq.n	8004b4a <_svfiprintf_r+0x152>
 8004b3c:	2340      	movs	r3, #64	@ 0x40
 8004b3e:	1b80      	subs	r0, r0, r6
 8004b40:	4083      	lsls	r3, r0
 8004b42:	6822      	ldr	r2, [r4, #0]
 8004b44:	3501      	adds	r5, #1
 8004b46:	4313      	orrs	r3, r2
 8004b48:	6023      	str	r3, [r4, #0]
 8004b4a:	7829      	ldrb	r1, [r5, #0]
 8004b4c:	2206      	movs	r2, #6
 8004b4e:	4826      	ldr	r0, [pc, #152]	@ (8004be8 <_svfiprintf_r+0x1f0>)
 8004b50:	1c6e      	adds	r6, r5, #1
 8004b52:	7621      	strb	r1, [r4, #24]
 8004b54:	f000 f9f2 	bl	8004f3c <memchr>
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	d038      	beq.n	8004bce <_svfiprintf_r+0x1d6>
 8004b5c:	4b23      	ldr	r3, [pc, #140]	@ (8004bec <_svfiprintf_r+0x1f4>)
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d122      	bne.n	8004ba8 <_svfiprintf_r+0x1b0>
 8004b62:	2207      	movs	r2, #7
 8004b64:	9b07      	ldr	r3, [sp, #28]
 8004b66:	3307      	adds	r3, #7
 8004b68:	4393      	bics	r3, r2
 8004b6a:	3308      	adds	r3, #8
 8004b6c:	9307      	str	r3, [sp, #28]
 8004b6e:	6963      	ldr	r3, [r4, #20]
 8004b70:	9a04      	ldr	r2, [sp, #16]
 8004b72:	189b      	adds	r3, r3, r2
 8004b74:	6163      	str	r3, [r4, #20]
 8004b76:	e762      	b.n	8004a3e <_svfiprintf_r+0x46>
 8004b78:	4343      	muls	r3, r0
 8004b7a:	0035      	movs	r5, r6
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	189b      	adds	r3, r3, r2
 8004b80:	e7a4      	b.n	8004acc <_svfiprintf_r+0xd4>
 8004b82:	2300      	movs	r3, #0
 8004b84:	200a      	movs	r0, #10
 8004b86:	0019      	movs	r1, r3
 8004b88:	3501      	adds	r5, #1
 8004b8a:	6063      	str	r3, [r4, #4]
 8004b8c:	782a      	ldrb	r2, [r5, #0]
 8004b8e:	1c6e      	adds	r6, r5, #1
 8004b90:	3a30      	subs	r2, #48	@ 0x30
 8004b92:	2a09      	cmp	r2, #9
 8004b94:	d903      	bls.n	8004b9e <_svfiprintf_r+0x1a6>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0c8      	beq.n	8004b2c <_svfiprintf_r+0x134>
 8004b9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8004b9c:	e7c6      	b.n	8004b2c <_svfiprintf_r+0x134>
 8004b9e:	4341      	muls	r1, r0
 8004ba0:	0035      	movs	r5, r6
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	1889      	adds	r1, r1, r2
 8004ba6:	e7f1      	b.n	8004b8c <_svfiprintf_r+0x194>
 8004ba8:	aa07      	add	r2, sp, #28
 8004baa:	9200      	str	r2, [sp, #0]
 8004bac:	0021      	movs	r1, r4
 8004bae:	003a      	movs	r2, r7
 8004bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8004bf0 <_svfiprintf_r+0x1f8>)
 8004bb2:	9803      	ldr	r0, [sp, #12]
 8004bb4:	e000      	b.n	8004bb8 <_svfiprintf_r+0x1c0>
 8004bb6:	bf00      	nop
 8004bb8:	9004      	str	r0, [sp, #16]
 8004bba:	9b04      	ldr	r3, [sp, #16]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	d1d6      	bne.n	8004b6e <_svfiprintf_r+0x176>
 8004bc0:	89bb      	ldrh	r3, [r7, #12]
 8004bc2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004bc4:	065b      	lsls	r3, r3, #25
 8004bc6:	d500      	bpl.n	8004bca <_svfiprintf_r+0x1d2>
 8004bc8:	e72c      	b.n	8004a24 <_svfiprintf_r+0x2c>
 8004bca:	b021      	add	sp, #132	@ 0x84
 8004bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bce:	aa07      	add	r2, sp, #28
 8004bd0:	9200      	str	r2, [sp, #0]
 8004bd2:	0021      	movs	r1, r4
 8004bd4:	003a      	movs	r2, r7
 8004bd6:	4b06      	ldr	r3, [pc, #24]	@ (8004bf0 <_svfiprintf_r+0x1f8>)
 8004bd8:	9803      	ldr	r0, [sp, #12]
 8004bda:	f000 f87b 	bl	8004cd4 <_printf_i>
 8004bde:	e7eb      	b.n	8004bb8 <_svfiprintf_r+0x1c0>
 8004be0:	080051a8 	.word	0x080051a8
 8004be4:	080051ae 	.word	0x080051ae
 8004be8:	080051b2 	.word	0x080051b2
 8004bec:	00000000 	.word	0x00000000
 8004bf0:	08004939 	.word	0x08004939

08004bf4 <_printf_common>:
 8004bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bf6:	0016      	movs	r6, r2
 8004bf8:	9301      	str	r3, [sp, #4]
 8004bfa:	688a      	ldr	r2, [r1, #8]
 8004bfc:	690b      	ldr	r3, [r1, #16]
 8004bfe:	000c      	movs	r4, r1
 8004c00:	9000      	str	r0, [sp, #0]
 8004c02:	4293      	cmp	r3, r2
 8004c04:	da00      	bge.n	8004c08 <_printf_common+0x14>
 8004c06:	0013      	movs	r3, r2
 8004c08:	0022      	movs	r2, r4
 8004c0a:	6033      	str	r3, [r6, #0]
 8004c0c:	3243      	adds	r2, #67	@ 0x43
 8004c0e:	7812      	ldrb	r2, [r2, #0]
 8004c10:	2a00      	cmp	r2, #0
 8004c12:	d001      	beq.n	8004c18 <_printf_common+0x24>
 8004c14:	3301      	adds	r3, #1
 8004c16:	6033      	str	r3, [r6, #0]
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	069b      	lsls	r3, r3, #26
 8004c1c:	d502      	bpl.n	8004c24 <_printf_common+0x30>
 8004c1e:	6833      	ldr	r3, [r6, #0]
 8004c20:	3302      	adds	r3, #2
 8004c22:	6033      	str	r3, [r6, #0]
 8004c24:	6822      	ldr	r2, [r4, #0]
 8004c26:	2306      	movs	r3, #6
 8004c28:	0015      	movs	r5, r2
 8004c2a:	401d      	ands	r5, r3
 8004c2c:	421a      	tst	r2, r3
 8004c2e:	d027      	beq.n	8004c80 <_printf_common+0x8c>
 8004c30:	0023      	movs	r3, r4
 8004c32:	3343      	adds	r3, #67	@ 0x43
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	1e5a      	subs	r2, r3, #1
 8004c38:	4193      	sbcs	r3, r2
 8004c3a:	6822      	ldr	r2, [r4, #0]
 8004c3c:	0692      	lsls	r2, r2, #26
 8004c3e:	d430      	bmi.n	8004ca2 <_printf_common+0xae>
 8004c40:	0022      	movs	r2, r4
 8004c42:	9901      	ldr	r1, [sp, #4]
 8004c44:	9800      	ldr	r0, [sp, #0]
 8004c46:	9d08      	ldr	r5, [sp, #32]
 8004c48:	3243      	adds	r2, #67	@ 0x43
 8004c4a:	47a8      	blx	r5
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	d025      	beq.n	8004c9c <_printf_common+0xa8>
 8004c50:	2206      	movs	r2, #6
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	2500      	movs	r5, #0
 8004c56:	4013      	ands	r3, r2
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d105      	bne.n	8004c68 <_printf_common+0x74>
 8004c5c:	6833      	ldr	r3, [r6, #0]
 8004c5e:	68e5      	ldr	r5, [r4, #12]
 8004c60:	1aed      	subs	r5, r5, r3
 8004c62:	43eb      	mvns	r3, r5
 8004c64:	17db      	asrs	r3, r3, #31
 8004c66:	401d      	ands	r5, r3
 8004c68:	68a3      	ldr	r3, [r4, #8]
 8004c6a:	6922      	ldr	r2, [r4, #16]
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	dd01      	ble.n	8004c74 <_printf_common+0x80>
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	18ed      	adds	r5, r5, r3
 8004c74:	2600      	movs	r6, #0
 8004c76:	42b5      	cmp	r5, r6
 8004c78:	d120      	bne.n	8004cbc <_printf_common+0xc8>
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	e010      	b.n	8004ca0 <_printf_common+0xac>
 8004c7e:	3501      	adds	r5, #1
 8004c80:	68e3      	ldr	r3, [r4, #12]
 8004c82:	6832      	ldr	r2, [r6, #0]
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	42ab      	cmp	r3, r5
 8004c88:	ddd2      	ble.n	8004c30 <_printf_common+0x3c>
 8004c8a:	0022      	movs	r2, r4
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	9901      	ldr	r1, [sp, #4]
 8004c90:	9800      	ldr	r0, [sp, #0]
 8004c92:	9f08      	ldr	r7, [sp, #32]
 8004c94:	3219      	adds	r2, #25
 8004c96:	47b8      	blx	r7
 8004c98:	3001      	adds	r0, #1
 8004c9a:	d1f0      	bne.n	8004c7e <_printf_common+0x8a>
 8004c9c:	2001      	movs	r0, #1
 8004c9e:	4240      	negs	r0, r0
 8004ca0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ca2:	2030      	movs	r0, #48	@ 0x30
 8004ca4:	18e1      	adds	r1, r4, r3
 8004ca6:	3143      	adds	r1, #67	@ 0x43
 8004ca8:	7008      	strb	r0, [r1, #0]
 8004caa:	0021      	movs	r1, r4
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	3145      	adds	r1, #69	@ 0x45
 8004cb0:	7809      	ldrb	r1, [r1, #0]
 8004cb2:	18a2      	adds	r2, r4, r2
 8004cb4:	3243      	adds	r2, #67	@ 0x43
 8004cb6:	3302      	adds	r3, #2
 8004cb8:	7011      	strb	r1, [r2, #0]
 8004cba:	e7c1      	b.n	8004c40 <_printf_common+0x4c>
 8004cbc:	0022      	movs	r2, r4
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	9901      	ldr	r1, [sp, #4]
 8004cc2:	9800      	ldr	r0, [sp, #0]
 8004cc4:	9f08      	ldr	r7, [sp, #32]
 8004cc6:	321a      	adds	r2, #26
 8004cc8:	47b8      	blx	r7
 8004cca:	3001      	adds	r0, #1
 8004ccc:	d0e6      	beq.n	8004c9c <_printf_common+0xa8>
 8004cce:	3601      	adds	r6, #1
 8004cd0:	e7d1      	b.n	8004c76 <_printf_common+0x82>
	...

08004cd4 <_printf_i>:
 8004cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cd6:	b08b      	sub	sp, #44	@ 0x2c
 8004cd8:	9206      	str	r2, [sp, #24]
 8004cda:	000a      	movs	r2, r1
 8004cdc:	3243      	adds	r2, #67	@ 0x43
 8004cde:	9307      	str	r3, [sp, #28]
 8004ce0:	9005      	str	r0, [sp, #20]
 8004ce2:	9203      	str	r2, [sp, #12]
 8004ce4:	7e0a      	ldrb	r2, [r1, #24]
 8004ce6:	000c      	movs	r4, r1
 8004ce8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004cea:	2a78      	cmp	r2, #120	@ 0x78
 8004cec:	d809      	bhi.n	8004d02 <_printf_i+0x2e>
 8004cee:	2a62      	cmp	r2, #98	@ 0x62
 8004cf0:	d80b      	bhi.n	8004d0a <_printf_i+0x36>
 8004cf2:	2a00      	cmp	r2, #0
 8004cf4:	d100      	bne.n	8004cf8 <_printf_i+0x24>
 8004cf6:	e0bc      	b.n	8004e72 <_printf_i+0x19e>
 8004cf8:	497b      	ldr	r1, [pc, #492]	@ (8004ee8 <_printf_i+0x214>)
 8004cfa:	9104      	str	r1, [sp, #16]
 8004cfc:	2a58      	cmp	r2, #88	@ 0x58
 8004cfe:	d100      	bne.n	8004d02 <_printf_i+0x2e>
 8004d00:	e090      	b.n	8004e24 <_printf_i+0x150>
 8004d02:	0025      	movs	r5, r4
 8004d04:	3542      	adds	r5, #66	@ 0x42
 8004d06:	702a      	strb	r2, [r5, #0]
 8004d08:	e022      	b.n	8004d50 <_printf_i+0x7c>
 8004d0a:	0010      	movs	r0, r2
 8004d0c:	3863      	subs	r0, #99	@ 0x63
 8004d0e:	2815      	cmp	r0, #21
 8004d10:	d8f7      	bhi.n	8004d02 <_printf_i+0x2e>
 8004d12:	f7fb fa01 	bl	8000118 <__gnu_thumb1_case_shi>
 8004d16:	0016      	.short	0x0016
 8004d18:	fff6001f 	.word	0xfff6001f
 8004d1c:	fff6fff6 	.word	0xfff6fff6
 8004d20:	001ffff6 	.word	0x001ffff6
 8004d24:	fff6fff6 	.word	0xfff6fff6
 8004d28:	fff6fff6 	.word	0xfff6fff6
 8004d2c:	003600a1 	.word	0x003600a1
 8004d30:	fff60080 	.word	0xfff60080
 8004d34:	00b2fff6 	.word	0x00b2fff6
 8004d38:	0036fff6 	.word	0x0036fff6
 8004d3c:	fff6fff6 	.word	0xfff6fff6
 8004d40:	0084      	.short	0x0084
 8004d42:	0025      	movs	r5, r4
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	3542      	adds	r5, #66	@ 0x42
 8004d48:	1d11      	adds	r1, r2, #4
 8004d4a:	6019      	str	r1, [r3, #0]
 8004d4c:	6813      	ldr	r3, [r2, #0]
 8004d4e:	702b      	strb	r3, [r5, #0]
 8004d50:	2301      	movs	r3, #1
 8004d52:	e0a0      	b.n	8004e96 <_printf_i+0x1c2>
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	6809      	ldr	r1, [r1, #0]
 8004d58:	1d02      	adds	r2, r0, #4
 8004d5a:	060d      	lsls	r5, r1, #24
 8004d5c:	d50b      	bpl.n	8004d76 <_printf_i+0xa2>
 8004d5e:	6806      	ldr	r6, [r0, #0]
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	2e00      	cmp	r6, #0
 8004d64:	da03      	bge.n	8004d6e <_printf_i+0x9a>
 8004d66:	232d      	movs	r3, #45	@ 0x2d
 8004d68:	9a03      	ldr	r2, [sp, #12]
 8004d6a:	4276      	negs	r6, r6
 8004d6c:	7013      	strb	r3, [r2, #0]
 8004d6e:	4b5e      	ldr	r3, [pc, #376]	@ (8004ee8 <_printf_i+0x214>)
 8004d70:	270a      	movs	r7, #10
 8004d72:	9304      	str	r3, [sp, #16]
 8004d74:	e018      	b.n	8004da8 <_printf_i+0xd4>
 8004d76:	6806      	ldr	r6, [r0, #0]
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	0649      	lsls	r1, r1, #25
 8004d7c:	d5f1      	bpl.n	8004d62 <_printf_i+0x8e>
 8004d7e:	b236      	sxth	r6, r6
 8004d80:	e7ef      	b.n	8004d62 <_printf_i+0x8e>
 8004d82:	6808      	ldr	r0, [r1, #0]
 8004d84:	6819      	ldr	r1, [r3, #0]
 8004d86:	c940      	ldmia	r1!, {r6}
 8004d88:	0605      	lsls	r5, r0, #24
 8004d8a:	d402      	bmi.n	8004d92 <_printf_i+0xbe>
 8004d8c:	0640      	lsls	r0, r0, #25
 8004d8e:	d500      	bpl.n	8004d92 <_printf_i+0xbe>
 8004d90:	b2b6      	uxth	r6, r6
 8004d92:	6019      	str	r1, [r3, #0]
 8004d94:	4b54      	ldr	r3, [pc, #336]	@ (8004ee8 <_printf_i+0x214>)
 8004d96:	270a      	movs	r7, #10
 8004d98:	9304      	str	r3, [sp, #16]
 8004d9a:	2a6f      	cmp	r2, #111	@ 0x6f
 8004d9c:	d100      	bne.n	8004da0 <_printf_i+0xcc>
 8004d9e:	3f02      	subs	r7, #2
 8004da0:	0023      	movs	r3, r4
 8004da2:	2200      	movs	r2, #0
 8004da4:	3343      	adds	r3, #67	@ 0x43
 8004da6:	701a      	strb	r2, [r3, #0]
 8004da8:	6863      	ldr	r3, [r4, #4]
 8004daa:	60a3      	str	r3, [r4, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	db03      	blt.n	8004db8 <_printf_i+0xe4>
 8004db0:	2104      	movs	r1, #4
 8004db2:	6822      	ldr	r2, [r4, #0]
 8004db4:	438a      	bics	r2, r1
 8004db6:	6022      	str	r2, [r4, #0]
 8004db8:	2e00      	cmp	r6, #0
 8004dba:	d102      	bne.n	8004dc2 <_printf_i+0xee>
 8004dbc:	9d03      	ldr	r5, [sp, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00c      	beq.n	8004ddc <_printf_i+0x108>
 8004dc2:	9d03      	ldr	r5, [sp, #12]
 8004dc4:	0030      	movs	r0, r6
 8004dc6:	0039      	movs	r1, r7
 8004dc8:	f7fb fa36 	bl	8000238 <__aeabi_uidivmod>
 8004dcc:	9b04      	ldr	r3, [sp, #16]
 8004dce:	3d01      	subs	r5, #1
 8004dd0:	5c5b      	ldrb	r3, [r3, r1]
 8004dd2:	702b      	strb	r3, [r5, #0]
 8004dd4:	0033      	movs	r3, r6
 8004dd6:	0006      	movs	r6, r0
 8004dd8:	429f      	cmp	r7, r3
 8004dda:	d9f3      	bls.n	8004dc4 <_printf_i+0xf0>
 8004ddc:	2f08      	cmp	r7, #8
 8004dde:	d109      	bne.n	8004df4 <_printf_i+0x120>
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	07db      	lsls	r3, r3, #31
 8004de4:	d506      	bpl.n	8004df4 <_printf_i+0x120>
 8004de6:	6862      	ldr	r2, [r4, #4]
 8004de8:	6923      	ldr	r3, [r4, #16]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	dc02      	bgt.n	8004df4 <_printf_i+0x120>
 8004dee:	2330      	movs	r3, #48	@ 0x30
 8004df0:	3d01      	subs	r5, #1
 8004df2:	702b      	strb	r3, [r5, #0]
 8004df4:	9b03      	ldr	r3, [sp, #12]
 8004df6:	1b5b      	subs	r3, r3, r5
 8004df8:	6123      	str	r3, [r4, #16]
 8004dfa:	9b07      	ldr	r3, [sp, #28]
 8004dfc:	0021      	movs	r1, r4
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	9805      	ldr	r0, [sp, #20]
 8004e02:	9b06      	ldr	r3, [sp, #24]
 8004e04:	aa09      	add	r2, sp, #36	@ 0x24
 8004e06:	f7ff fef5 	bl	8004bf4 <_printf_common>
 8004e0a:	3001      	adds	r0, #1
 8004e0c:	d148      	bne.n	8004ea0 <_printf_i+0x1cc>
 8004e0e:	2001      	movs	r0, #1
 8004e10:	4240      	negs	r0, r0
 8004e12:	b00b      	add	sp, #44	@ 0x2c
 8004e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e16:	2220      	movs	r2, #32
 8004e18:	6809      	ldr	r1, [r1, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	6022      	str	r2, [r4, #0]
 8004e1e:	2278      	movs	r2, #120	@ 0x78
 8004e20:	4932      	ldr	r1, [pc, #200]	@ (8004eec <_printf_i+0x218>)
 8004e22:	9104      	str	r1, [sp, #16]
 8004e24:	0021      	movs	r1, r4
 8004e26:	3145      	adds	r1, #69	@ 0x45
 8004e28:	700a      	strb	r2, [r1, #0]
 8004e2a:	6819      	ldr	r1, [r3, #0]
 8004e2c:	6822      	ldr	r2, [r4, #0]
 8004e2e:	c940      	ldmia	r1!, {r6}
 8004e30:	0610      	lsls	r0, r2, #24
 8004e32:	d402      	bmi.n	8004e3a <_printf_i+0x166>
 8004e34:	0650      	lsls	r0, r2, #25
 8004e36:	d500      	bpl.n	8004e3a <_printf_i+0x166>
 8004e38:	b2b6      	uxth	r6, r6
 8004e3a:	6019      	str	r1, [r3, #0]
 8004e3c:	07d3      	lsls	r3, r2, #31
 8004e3e:	d502      	bpl.n	8004e46 <_printf_i+0x172>
 8004e40:	2320      	movs	r3, #32
 8004e42:	4313      	orrs	r3, r2
 8004e44:	6023      	str	r3, [r4, #0]
 8004e46:	2e00      	cmp	r6, #0
 8004e48:	d001      	beq.n	8004e4e <_printf_i+0x17a>
 8004e4a:	2710      	movs	r7, #16
 8004e4c:	e7a8      	b.n	8004da0 <_printf_i+0xcc>
 8004e4e:	2220      	movs	r2, #32
 8004e50:	6823      	ldr	r3, [r4, #0]
 8004e52:	4393      	bics	r3, r2
 8004e54:	6023      	str	r3, [r4, #0]
 8004e56:	e7f8      	b.n	8004e4a <_printf_i+0x176>
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	680d      	ldr	r5, [r1, #0]
 8004e5c:	1d10      	adds	r0, r2, #4
 8004e5e:	6949      	ldr	r1, [r1, #20]
 8004e60:	6018      	str	r0, [r3, #0]
 8004e62:	6813      	ldr	r3, [r2, #0]
 8004e64:	062e      	lsls	r6, r5, #24
 8004e66:	d501      	bpl.n	8004e6c <_printf_i+0x198>
 8004e68:	6019      	str	r1, [r3, #0]
 8004e6a:	e002      	b.n	8004e72 <_printf_i+0x19e>
 8004e6c:	066d      	lsls	r5, r5, #25
 8004e6e:	d5fb      	bpl.n	8004e68 <_printf_i+0x194>
 8004e70:	8019      	strh	r1, [r3, #0]
 8004e72:	2300      	movs	r3, #0
 8004e74:	9d03      	ldr	r5, [sp, #12]
 8004e76:	6123      	str	r3, [r4, #16]
 8004e78:	e7bf      	b.n	8004dfa <_printf_i+0x126>
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	1d11      	adds	r1, r2, #4
 8004e7e:	6019      	str	r1, [r3, #0]
 8004e80:	6815      	ldr	r5, [r2, #0]
 8004e82:	2100      	movs	r1, #0
 8004e84:	0028      	movs	r0, r5
 8004e86:	6862      	ldr	r2, [r4, #4]
 8004e88:	f000 f858 	bl	8004f3c <memchr>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d001      	beq.n	8004e94 <_printf_i+0x1c0>
 8004e90:	1b40      	subs	r0, r0, r5
 8004e92:	6060      	str	r0, [r4, #4]
 8004e94:	6863      	ldr	r3, [r4, #4]
 8004e96:	6123      	str	r3, [r4, #16]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	9a03      	ldr	r2, [sp, #12]
 8004e9c:	7013      	strb	r3, [r2, #0]
 8004e9e:	e7ac      	b.n	8004dfa <_printf_i+0x126>
 8004ea0:	002a      	movs	r2, r5
 8004ea2:	6923      	ldr	r3, [r4, #16]
 8004ea4:	9906      	ldr	r1, [sp, #24]
 8004ea6:	9805      	ldr	r0, [sp, #20]
 8004ea8:	9d07      	ldr	r5, [sp, #28]
 8004eaa:	47a8      	blx	r5
 8004eac:	3001      	adds	r0, #1
 8004eae:	d0ae      	beq.n	8004e0e <_printf_i+0x13a>
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	079b      	lsls	r3, r3, #30
 8004eb4:	d415      	bmi.n	8004ee2 <_printf_i+0x20e>
 8004eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eb8:	68e0      	ldr	r0, [r4, #12]
 8004eba:	4298      	cmp	r0, r3
 8004ebc:	daa9      	bge.n	8004e12 <_printf_i+0x13e>
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	e7a7      	b.n	8004e12 <_printf_i+0x13e>
 8004ec2:	0022      	movs	r2, r4
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	9906      	ldr	r1, [sp, #24]
 8004ec8:	9805      	ldr	r0, [sp, #20]
 8004eca:	9e07      	ldr	r6, [sp, #28]
 8004ecc:	3219      	adds	r2, #25
 8004ece:	47b0      	blx	r6
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	d09c      	beq.n	8004e0e <_printf_i+0x13a>
 8004ed4:	3501      	adds	r5, #1
 8004ed6:	68e3      	ldr	r3, [r4, #12]
 8004ed8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004eda:	1a9b      	subs	r3, r3, r2
 8004edc:	42ab      	cmp	r3, r5
 8004ede:	dcf0      	bgt.n	8004ec2 <_printf_i+0x1ee>
 8004ee0:	e7e9      	b.n	8004eb6 <_printf_i+0x1e2>
 8004ee2:	2500      	movs	r5, #0
 8004ee4:	e7f7      	b.n	8004ed6 <_printf_i+0x202>
 8004ee6:	46c0      	nop			@ (mov r8, r8)
 8004ee8:	080051b9 	.word	0x080051b9
 8004eec:	080051ca 	.word	0x080051ca

08004ef0 <memmove>:
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	4288      	cmp	r0, r1
 8004ef4:	d806      	bhi.n	8004f04 <memmove+0x14>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d008      	beq.n	8004f0e <memmove+0x1e>
 8004efc:	5ccc      	ldrb	r4, [r1, r3]
 8004efe:	54c4      	strb	r4, [r0, r3]
 8004f00:	3301      	adds	r3, #1
 8004f02:	e7f9      	b.n	8004ef8 <memmove+0x8>
 8004f04:	188b      	adds	r3, r1, r2
 8004f06:	4298      	cmp	r0, r3
 8004f08:	d2f5      	bcs.n	8004ef6 <memmove+0x6>
 8004f0a:	3a01      	subs	r2, #1
 8004f0c:	d200      	bcs.n	8004f10 <memmove+0x20>
 8004f0e:	bd10      	pop	{r4, pc}
 8004f10:	5c8b      	ldrb	r3, [r1, r2]
 8004f12:	5483      	strb	r3, [r0, r2]
 8004f14:	e7f9      	b.n	8004f0a <memmove+0x1a>
	...

08004f18 <_sbrk_r>:
 8004f18:	2300      	movs	r3, #0
 8004f1a:	b570      	push	{r4, r5, r6, lr}
 8004f1c:	4d06      	ldr	r5, [pc, #24]	@ (8004f38 <_sbrk_r+0x20>)
 8004f1e:	0004      	movs	r4, r0
 8004f20:	0008      	movs	r0, r1
 8004f22:	602b      	str	r3, [r5, #0]
 8004f24:	f7fc f9e4 	bl	80012f0 <_sbrk>
 8004f28:	1c43      	adds	r3, r0, #1
 8004f2a:	d103      	bne.n	8004f34 <_sbrk_r+0x1c>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d000      	beq.n	8004f34 <_sbrk_r+0x1c>
 8004f32:	6023      	str	r3, [r4, #0]
 8004f34:	bd70      	pop	{r4, r5, r6, pc}
 8004f36:	46c0      	nop			@ (mov r8, r8)
 8004f38:	200003c0 	.word	0x200003c0

08004f3c <memchr>:
 8004f3c:	b2c9      	uxtb	r1, r1
 8004f3e:	1882      	adds	r2, r0, r2
 8004f40:	4290      	cmp	r0, r2
 8004f42:	d101      	bne.n	8004f48 <memchr+0xc>
 8004f44:	2000      	movs	r0, #0
 8004f46:	4770      	bx	lr
 8004f48:	7803      	ldrb	r3, [r0, #0]
 8004f4a:	428b      	cmp	r3, r1
 8004f4c:	d0fb      	beq.n	8004f46 <memchr+0xa>
 8004f4e:	3001      	adds	r0, #1
 8004f50:	e7f6      	b.n	8004f40 <memchr+0x4>

08004f52 <_realloc_r>:
 8004f52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f54:	0006      	movs	r6, r0
 8004f56:	000c      	movs	r4, r1
 8004f58:	0015      	movs	r5, r2
 8004f5a:	2900      	cmp	r1, #0
 8004f5c:	d105      	bne.n	8004f6a <_realloc_r+0x18>
 8004f5e:	0011      	movs	r1, r2
 8004f60:	f7ff fc5a 	bl	8004818 <_malloc_r>
 8004f64:	0004      	movs	r4, r0
 8004f66:	0020      	movs	r0, r4
 8004f68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f6a:	2a00      	cmp	r2, #0
 8004f6c:	d103      	bne.n	8004f76 <_realloc_r+0x24>
 8004f6e:	f7ff fbe7 	bl	8004740 <_free_r>
 8004f72:	2400      	movs	r4, #0
 8004f74:	e7f7      	b.n	8004f66 <_realloc_r+0x14>
 8004f76:	f000 f81b 	bl	8004fb0 <_malloc_usable_size_r>
 8004f7a:	0007      	movs	r7, r0
 8004f7c:	4285      	cmp	r5, r0
 8004f7e:	d802      	bhi.n	8004f86 <_realloc_r+0x34>
 8004f80:	0843      	lsrs	r3, r0, #1
 8004f82:	42ab      	cmp	r3, r5
 8004f84:	d3ef      	bcc.n	8004f66 <_realloc_r+0x14>
 8004f86:	0029      	movs	r1, r5
 8004f88:	0030      	movs	r0, r6
 8004f8a:	f7ff fc45 	bl	8004818 <_malloc_r>
 8004f8e:	9001      	str	r0, [sp, #4]
 8004f90:	2800      	cmp	r0, #0
 8004f92:	d0ee      	beq.n	8004f72 <_realloc_r+0x20>
 8004f94:	002a      	movs	r2, r5
 8004f96:	42bd      	cmp	r5, r7
 8004f98:	d900      	bls.n	8004f9c <_realloc_r+0x4a>
 8004f9a:	003a      	movs	r2, r7
 8004f9c:	0021      	movs	r1, r4
 8004f9e:	9801      	ldr	r0, [sp, #4]
 8004fa0:	f7ff fbc4 	bl	800472c <memcpy>
 8004fa4:	0021      	movs	r1, r4
 8004fa6:	0030      	movs	r0, r6
 8004fa8:	f7ff fbca 	bl	8004740 <_free_r>
 8004fac:	9c01      	ldr	r4, [sp, #4]
 8004fae:	e7da      	b.n	8004f66 <_realloc_r+0x14>

08004fb0 <_malloc_usable_size_r>:
 8004fb0:	1f0b      	subs	r3, r1, #4
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	1f18      	subs	r0, r3, #4
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	da01      	bge.n	8004fbe <_malloc_usable_size_r+0xe>
 8004fba:	580b      	ldr	r3, [r1, r0]
 8004fbc:	18c0      	adds	r0, r0, r3
 8004fbe:	4770      	bx	lr

08004fc0 <_init>:
 8004fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc2:	46c0      	nop			@ (mov r8, r8)
 8004fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc6:	bc08      	pop	{r3}
 8004fc8:	469e      	mov	lr, r3
 8004fca:	4770      	bx	lr

08004fcc <_fini>:
 8004fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fce:	46c0      	nop			@ (mov r8, r8)
 8004fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd2:	bc08      	pop	{r3}
 8004fd4:	469e      	mov	lr, r3
 8004fd6:	4770      	bx	lr
