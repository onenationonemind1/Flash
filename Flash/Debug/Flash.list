
Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000431c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080043dc  080043dc  000053dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800441c  0800441c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  0800441c  0800441c  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800441c  0800441c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800441c  0800441c  0000541c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004420  08004420  00005420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004424  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000010  08004430  00006010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08004430  00006238  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb75  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002919  00000000  00000000  00015ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  000184c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b19  00000000  00000000  000192f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014906  00000000  00000000  00019e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ee3  00000000  00000000  0002e717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079c1a  00000000  00000000  000415fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb214  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003240  00000000  00000000  000bb258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000be498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080043c4 	.word	0x080043c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080043c4 	.word	0x080043c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <WriteMultiDataToFlash>:
#include "main.h"

HAL_StatusTypeDef WriteMultiDataToFlash(uint16_t *data, uint16_t count)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b088      	sub	sp, #32
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	000a      	movs	r2, r1
 800022a:	1cbb      	adds	r3, r7, #2
 800022c:	801a      	strh	r2, [r3, #0]
    HAL_FLASH_Unlock();
 800022e:	f001 faa3 	bl	8001778 <HAL_FLASH_Unlock>

    // 페이지 지우기
    FLASH_EraseInitTypeDef EraseInit;
    EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000232:	2110      	movs	r1, #16
 8000234:	187b      	adds	r3, r7, r1
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
    EraseInit.PageAddress = DATA_FLASH_PAGE_ADDR;
 800023a:	187b      	adds	r3, r7, r1
 800023c:	4a23      	ldr	r2, [pc, #140]	@ (80002cc <WriteMultiDataToFlash+0xac>)
 800023e:	605a      	str	r2, [r3, #4]
    EraseInit.NbPages = 1;
 8000240:	187b      	adds	r3, r7, r1
 8000242:	2201      	movs	r2, #1
 8000244:	609a      	str	r2, [r3, #8]

    uint32_t PageError;
    if (HAL_FLASHEx_Erase(&EraseInit, &PageError) != HAL_OK)
 8000246:	230c      	movs	r3, #12
 8000248:	18fa      	adds	r2, r7, r3
 800024a:	187b      	adds	r3, r7, r1
 800024c:	0011      	movs	r1, r2
 800024e:	0018      	movs	r0, r3
 8000250:	f001 fb52 	bl	80018f8 <HAL_FLASHEx_Erase>
 8000254:	1e03      	subs	r3, r0, #0
 8000256:	d003      	beq.n	8000260 <WriteMultiDataToFlash+0x40>
    {
        HAL_FLASH_Lock();
 8000258:	f001 fab4 	bl	80017c4 <HAL_FLASH_Lock>
        return HAL_ERROR;
 800025c:	2301      	movs	r3, #1
 800025e:	e030      	b.n	80002c2 <WriteMultiDataToFlash+0xa2>
    }

    // 여러 데이터 쓰기
    for (uint16_t i = 0; i < count; i++)
 8000260:	231e      	movs	r3, #30
 8000262:	18fb      	adds	r3, r7, r3
 8000264:	2200      	movs	r2, #0
 8000266:	801a      	strh	r2, [r3, #0]
 8000268:	e021      	b.n	80002ae <WriteMultiDataToFlash+0x8e>
    {
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
                              DATA_FLASH_PAGE_ADDR + (i * 2), // 2바이트씩 증가
 800026a:	221e      	movs	r2, #30
 800026c:	18bb      	adds	r3, r7, r2
 800026e:	881b      	ldrh	r3, [r3, #0]
 8000270:	4917      	ldr	r1, [pc, #92]	@ (80002d0 <WriteMultiDataToFlash+0xb0>)
 8000272:	468c      	mov	ip, r1
 8000274:	4463      	add	r3, ip
 8000276:	005b      	lsls	r3, r3, #1
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8000278:	0019      	movs	r1, r3
                              data[i]) != HAL_OK)
 800027a:	18bb      	adds	r3, r7, r2
 800027c:	881b      	ldrh	r3, [r3, #0]
 800027e:	005b      	lsls	r3, r3, #1
 8000280:	687a      	ldr	r2, [r7, #4]
 8000282:	18d3      	adds	r3, r2, r3
 8000284:	881b      	ldrh	r3, [r3, #0]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8000286:	001c      	movs	r4, r3
 8000288:	2300      	movs	r3, #0
 800028a:	001d      	movs	r5, r3
 800028c:	0022      	movs	r2, r4
 800028e:	002b      	movs	r3, r5
 8000290:	2001      	movs	r0, #1
 8000292:	f001 f9db 	bl	800164c <HAL_FLASH_Program>
 8000296:	1e03      	subs	r3, r0, #0
 8000298:	d003      	beq.n	80002a2 <WriteMultiDataToFlash+0x82>
        {
            HAL_FLASH_Lock();
 800029a:	f001 fa93 	bl	80017c4 <HAL_FLASH_Lock>
            return HAL_ERROR;
 800029e:	2301      	movs	r3, #1
 80002a0:	e00f      	b.n	80002c2 <WriteMultiDataToFlash+0xa2>
    for (uint16_t i = 0; i < count; i++)
 80002a2:	211e      	movs	r1, #30
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	881a      	ldrh	r2, [r3, #0]
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	3201      	adds	r2, #1
 80002ac:	801a      	strh	r2, [r3, #0]
 80002ae:	231e      	movs	r3, #30
 80002b0:	18fa      	adds	r2, r7, r3
 80002b2:	1cbb      	adds	r3, r7, #2
 80002b4:	8812      	ldrh	r2, [r2, #0]
 80002b6:	881b      	ldrh	r3, [r3, #0]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	d3d6      	bcc.n	800026a <WriteMultiDataToFlash+0x4a>
        }
    }
    HAL_FLASH_Lock();
 80002bc:	f001 fa82 	bl	80017c4 <HAL_FLASH_Lock>
    return HAL_OK;
 80002c0:	2300      	movs	r3, #0
}
 80002c2:	0018      	movs	r0, r3
 80002c4:	46bd      	mov	sp, r7
 80002c6:	b008      	add	sp, #32
 80002c8:	bdb0      	pop	{r4, r5, r7, pc}
 80002ca:	46c0      	nop			@ (mov r8, r8)
 80002cc:	0800f800 	.word	0x0800f800
 80002d0:	04007c00 	.word	0x04007c00

080002d4 <ReadDataFromFlashAt>:

uint16_t ReadDataFromFlashAt(uint16_t index)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	0002      	movs	r2, r0
 80002dc:	1dbb      	adds	r3, r7, #6
 80002de:	801a      	strh	r2, [r3, #0]
    return *(__IO uint16_t *)(DATA_FLASH_PAGE_ADDR + (index * 2));
 80002e0:	1dbb      	adds	r3, r7, #6
 80002e2:	881b      	ldrh	r3, [r3, #0]
 80002e4:	4a04      	ldr	r2, [pc, #16]	@ (80002f8 <ReadDataFromFlashAt+0x24>)
 80002e6:	4694      	mov	ip, r2
 80002e8:	4463      	add	r3, ip
 80002ea:	005b      	lsls	r3, r3, #1
 80002ec:	881b      	ldrh	r3, [r3, #0]
 80002ee:	b29b      	uxth	r3, r3
}
 80002f0:	0018      	movs	r0, r3
 80002f2:	46bd      	mov	sp, r7
 80002f4:	b002      	add	sp, #8
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	04007c00 	.word	0x04007c00

080002fc <multiDatawrite>:

void multiDatawrite(AM1002_Data_t data)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b088      	sub	sp, #32
 8000300:	af00      	add	r7, sp, #0
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	6018      	str	r0, [r3, #0]
 8000306:	6059      	str	r1, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
    uint16_t multiData[6] = {data.tvoc, data.pm1_0, data.pm2_5, data.pm10, (uint16_t)data.temperature, data.humidity};
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	881a      	ldrh	r2, [r3, #0]
 800030e:	2114      	movs	r1, #20
 8000310:	187b      	adds	r3, r7, r1
 8000312:	801a      	strh	r2, [r3, #0]
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	885a      	ldrh	r2, [r3, #2]
 8000318:	187b      	adds	r3, r7, r1
 800031a:	805a      	strh	r2, [r3, #2]
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	889a      	ldrh	r2, [r3, #4]
 8000320:	187b      	adds	r3, r7, r1
 8000322:	809a      	strh	r2, [r3, #4]
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	88da      	ldrh	r2, [r3, #6]
 8000328:	187b      	adds	r3, r7, r1
 800032a:	80da      	strh	r2, [r3, #6]
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2208      	movs	r2, #8
 8000330:	5e9b      	ldrsh	r3, [r3, r2]
 8000332:	b29a      	uxth	r2, r3
 8000334:	187b      	adds	r3, r7, r1
 8000336:	811a      	strh	r2, [r3, #8]
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	895a      	ldrh	r2, [r3, #10]
 800033c:	187b      	adds	r3, r7, r1
 800033e:	815a      	strh	r2, [r3, #10]
    WriteMultiDataToFlash(multiData, 6);
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2106      	movs	r1, #6
 8000344:	0018      	movs	r0, r3
 8000346:	f7ff ff6b 	bl	8000220 <WriteMultiDataToFlash>
    else
    {
        HAL_UART_Transmit(&huart3, (uint8_t *)"Data write fail!!\r\n", 20, HAL_MAX_DELAY);
    }
    #endif
}
 800034a:	46c0      	nop			@ (mov r8, r8)
 800034c:	46bd      	mov	sp, r7
 800034e:	b008      	add	sp, #32
 8000350:	bd80      	pop	{r7, pc}

08000352 <multiDataread>:

AM1002_Data_t multiDataread(void)
{
 8000352:	b580      	push	{r7, lr}
 8000354:	b08a      	sub	sp, #40	@ 0x28
 8000356:	af00      	add	r7, sp, #0
 8000358:	6078      	str	r0, [r7, #4]
    AM1002_Data_t data;
    uint16_t readData[6];

    for (int i = 0; i < 6; i++)
 800035a:	2300      	movs	r3, #0
 800035c:	627b      	str	r3, [r7, #36]	@ 0x24
 800035e:	e00e      	b.n	800037e <multiDataread+0x2c>
    {
        readData[i] = ReadDataFromFlashAt(i);
 8000360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000362:	b29b      	uxth	r3, r3
 8000364:	0018      	movs	r0, r3
 8000366:	f7ff ffb5 	bl	80002d4 <ReadDataFromFlashAt>
 800036a:	0003      	movs	r3, r0
 800036c:	0019      	movs	r1, r3
 800036e:	230c      	movs	r3, #12
 8000370:	18fb      	adds	r3, r7, r3
 8000372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000374:	0052      	lsls	r2, r2, #1
 8000376:	52d1      	strh	r1, [r2, r3]
    for (int i = 0; i < 6; i++)
 8000378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800037a:	3301      	adds	r3, #1
 800037c:	627b      	str	r3, [r7, #36]	@ 0x24
 800037e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000380:	2b05      	cmp	r3, #5
 8000382:	dded      	ble.n	8000360 <multiDataread+0xe>
        HAL_UART_Transmit(&huart3, (uint8_t *)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
        #endif
    }
    // HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);

    data.tvoc = readData[0];
 8000384:	200c      	movs	r0, #12
 8000386:	183b      	adds	r3, r7, r0
 8000388:	881a      	ldrh	r2, [r3, #0]
 800038a:	2118      	movs	r1, #24
 800038c:	187b      	adds	r3, r7, r1
 800038e:	801a      	strh	r2, [r3, #0]
    data.pm1_0 = readData[1];
 8000390:	183b      	adds	r3, r7, r0
 8000392:	885a      	ldrh	r2, [r3, #2]
 8000394:	187b      	adds	r3, r7, r1
 8000396:	805a      	strh	r2, [r3, #2]
    data.pm2_5 = readData[2];
 8000398:	183b      	adds	r3, r7, r0
 800039a:	889a      	ldrh	r2, [r3, #4]
 800039c:	187b      	adds	r3, r7, r1
 800039e:	809a      	strh	r2, [r3, #4]
    data.pm10 = readData[3];
 80003a0:	183b      	adds	r3, r7, r0
 80003a2:	88da      	ldrh	r2, [r3, #6]
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	80da      	strh	r2, [r3, #6]
    data.temperature = readData[4];
 80003a8:	183b      	adds	r3, r7, r0
 80003aa:	891b      	ldrh	r3, [r3, #8]
 80003ac:	b21a      	sxth	r2, r3
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	811a      	strh	r2, [r3, #8]
    data.humidity = readData[5];
 80003b2:	183b      	adds	r3, r7, r0
 80003b4:	895a      	ldrh	r2, [r3, #10]
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	815a      	strh	r2, [r3, #10]

    return data;
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	0010      	movs	r0, r2
 80003c0:	0019      	movs	r1, r3
 80003c2:	230c      	movs	r3, #12
 80003c4:	001a      	movs	r2, r3
 80003c6:	f003 fff3 	bl	80043b0 <memcpy>
}
 80003ca:	6878      	ldr	r0, [r7, #4]
 80003cc:	46bd      	mov	sp, r7
 80003ce:	b00a      	add	sp, #40	@ 0x28
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <ProcessAM1002Data.1>:
 */
int main(void)
{
  /* USER CODE BEGIN 1 */
  AM1002_Data_t ProcessAM1002Data(uint8_t *data, AM1002_Data_t *result)
  {
 80003d2:	b580      	push	{r7, lr}
 80003d4:	b086      	sub	sp, #24
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	60f8      	str	r0, [r7, #12]
 80003da:	60b9      	str	r1, [r7, #8]
 80003dc:	607a      	str	r2, [r7, #4]
 80003de:	4663      	mov	r3, ip
 80003e0:	603b      	str	r3, [r7, #0]

    // 실제 데이터는 시작 바이트(16 13 16) 이후부터 시작
    uint8_t *actual_data = data + 3;
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	3303      	adds	r3, #3
 80003e6:	617b      	str	r3, [r7, #20]
    result->tvoc = (uint16_t)(actual_data[0] << 8 | actual_data[1]);
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	021b      	lsls	r3, r3, #8
 80003ee:	b21a      	sxth	r2, r3
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	3301      	adds	r3, #1
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	b21b      	sxth	r3, r3
 80003f8:	4313      	orrs	r3, r2
 80003fa:	b21b      	sxth	r3, r3
 80003fc:	b29a      	uxth	r2, r3
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	801a      	strh	r2, [r3, #0]
    result->pm1_0 = (uint16_t)(actual_data[4] << 8 | actual_data[5]);
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	3304      	adds	r3, #4
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	021b      	lsls	r3, r3, #8
 800040a:	b21a      	sxth	r2, r3
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	3305      	adds	r3, #5
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	b21b      	sxth	r3, r3
 8000414:	4313      	orrs	r3, r2
 8000416:	b21b      	sxth	r3, r3
 8000418:	b29a      	uxth	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	805a      	strh	r2, [r3, #2]
    result->pm2_5 = (uint16_t)(actual_data[6] << 8 | actual_data[7]);
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	3306      	adds	r3, #6
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	021b      	lsls	r3, r3, #8
 8000426:	b21a      	sxth	r2, r3
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	3307      	adds	r3, #7
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	b21b      	sxth	r3, r3
 8000430:	4313      	orrs	r3, r2
 8000432:	b21b      	sxth	r3, r3
 8000434:	b29a      	uxth	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	809a      	strh	r2, [r3, #4]
    result->pm10 = (uint16_t)(actual_data[8] << 8 | actual_data[9]);
 800043a:	697b      	ldr	r3, [r7, #20]
 800043c:	3308      	adds	r3, #8
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	021b      	lsls	r3, r3, #8
 8000442:	b21a      	sxth	r2, r3
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	3309      	adds	r3, #9
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	b21b      	sxth	r3, r3
 800044c:	4313      	orrs	r3, r2
 800044e:	b21b      	sxth	r3, r3
 8000450:	b29a      	uxth	r2, r3
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	80da      	strh	r2, [r3, #6]

    // 온도 계산 (DF11 DF12) ((DF11*256^1 + DF12)-500）/ 10
    uint16_t temp_raw = (uint16_t)(actual_data[10] << 8 | actual_data[11]);
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	330a      	adds	r3, #10
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	021b      	lsls	r3, r3, #8
 800045e:	b21a      	sxth	r2, r3
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	330b      	adds	r3, #11
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	b21b      	sxth	r3, r3
 8000468:	4313      	orrs	r3, r2
 800046a:	b21a      	sxth	r2, r3
 800046c:	2112      	movs	r1, #18
 800046e:	187b      	adds	r3, r7, r1
 8000470:	801a      	strh	r2, [r3, #0]
    result->temperature = (int16_t)(temp_raw - 500); // 10배 값을 저장
 8000472:	187b      	adds	r3, r7, r1
 8000474:	881b      	ldrh	r3, [r3, #0]
 8000476:	3bf5      	subs	r3, #245	@ 0xf5
 8000478:	3bff      	subs	r3, #255	@ 0xff
 800047a:	b29b      	uxth	r3, r3
 800047c:	b21a      	sxth	r2, r3
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	811a      	strh	r2, [r3, #8]

    // 습도 계산 (DF13 DF14) ((DF13*256^1 + DF14))
    result->humidity = (uint16_t)(actual_data[12] << 8 | actual_data[13]); // 10배 값을 저장
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	330c      	adds	r3, #12
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	021b      	lsls	r3, r3, #8
 800048a:	b21a      	sxth	r2, r3
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	330d      	adds	r3, #13
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	b21b      	sxth	r3, r3
 8000494:	4313      	orrs	r3, r2
 8000496:	b21b      	sxth	r3, r3
 8000498:	b29a      	uxth	r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	815a      	strh	r2, [r3, #10]

    return *result;
 800049e:	68fa      	ldr	r2, [r7, #12]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	0010      	movs	r0, r2
 80004a4:	0019      	movs	r1, r3
 80004a6:	230c      	movs	r3, #12
 80004a8:	001a      	movs	r2, r3
 80004aa:	f003 ff81 	bl	80043b0 <memcpy>
  }
 80004ae:	68f8      	ldr	r0, [r7, #12]
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b006      	add	sp, #24
 80004b4:	bd80      	pop	{r7, pc}
	...

080004b8 <main>:
{
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b0aa      	sub	sp, #168	@ 0xa8
 80004bc:	af00      	add	r7, sp, #0
int main(void)
 80004be:	23b8      	movs	r3, #184	@ 0xb8
 80004c0:	18fb      	adds	r3, r7, r3
 80004c2:	2294      	movs	r2, #148	@ 0x94
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fdfa 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 fa3f 	bl	800094e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 fb70 	bl	8000bb4 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d4:	f000 fb50 	bl	8000b78 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 faee 	bl	8000ab8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004dc:	f000 fa8e 	bl	80009fc <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80004e0:	f000 fb1a 	bl	8000b18 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80004e4:	4bc8      	ldr	r3, [pc, #800]	@ (8000808 <main+0x350>)
 80004e6:	0018      	movs	r0, r3
 80004e8:	f002 fa92 	bl	8002a10 <HAL_TIM_Base_Start_IT>

  uint8_t rx_data;
  uint8_t cmd[] = {0x11, 0x01, 0x16, 0xD8};
 80004ec:	2390      	movs	r3, #144	@ 0x90
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	4ac6      	ldr	r2, [pc, #792]	@ (800080c <main+0x354>)
 80004f2:	601a      	str	r2, [r3, #0]
  uint8_t rx_buffer[32];

  int count = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	22a4      	movs	r2, #164	@ 0xa4
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	6013      	str	r3, [r2, #0]
  uint8_t test = 0x00;
 80004fc:	216f      	movs	r1, #111	@ 0x6f
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
  uint8_t* arr_test = &test;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	22a0      	movs	r2, #160	@ 0xa0
 8000508:	18ba      	adds	r2, r7, r2
 800050a:	6013      	str	r3, [r2, #0]
  uint8_t data;

  uint8_t request[] = {0x01, 0x03, 0x00, 0x00, 0x00, 0x06, 0xC5, 0xCD};
 800050c:	2364      	movs	r3, #100	@ 0x64
 800050e:	18fb      	adds	r3, r7, r3
 8000510:	4abf      	ldr	r2, [pc, #764]	@ (8000810 <main+0x358>)
 8000512:	ca03      	ldmia	r2!, {r0, r1}
 8000514:	c303      	stmia	r3!, {r0, r1}
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    if (g_timer_ms_1000 == ENABLE)
 8000516:	4bbf      	ldr	r3, [pc, #764]	@ (8000814 <main+0x35c>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d1fb      	bne.n	8000516 <main+0x5e>
    {
      g_timer_ms_1000 = DISABLE;
 800051e:	4bbd      	ldr	r3, [pc, #756]	@ (8000814 <main+0x35c>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]

      test++;
 8000524:	216f      	movs	r1, #111	@ 0x6f
 8000526:	187b      	adds	r3, r7, r1
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	3301      	adds	r3, #1
 800052c:	b2da      	uxtb	r2, r3
 800052e:	187b      	adds	r3, r7, r1
 8000530:	701a      	strb	r2, [r3, #0]
      #if 1
      // AM1002_Data_t read_data = multiDataread(); // 임시 변수 사용
      memset(rx_buffer, 0, sizeof(rx_buffer));
 8000532:	2570      	movs	r5, #112	@ 0x70
 8000534:	197b      	adds	r3, r7, r5
 8000536:	2220      	movs	r2, #32
 8000538:	2100      	movs	r1, #0
 800053a:	0018      	movs	r0, r3
 800053c:	f003 ff0c 	bl	8004358 <memset>
      #ifdef terminal_mode
      PrintCalibrationData(read_data);
      HAL_UART_Transmit(&huart3, (uint8_t *)"Data read done\r\n", 16, HAL_MAX_DELAY);
      #endif

      HAL_UART_Transmit(&huart2, cmd, sizeof(cmd), 1000);
 8000540:	23fa      	movs	r3, #250	@ 0xfa
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	2290      	movs	r2, #144	@ 0x90
 8000546:	18b9      	adds	r1, r7, r2
 8000548:	48b3      	ldr	r0, [pc, #716]	@ (8000818 <main+0x360>)
 800054a:	2204      	movs	r2, #4
 800054c:	f002 fe7e 	bl	800324c <HAL_UART_Transmit>
      HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, rx_buffer, 22, 1000); 
 8000550:	239f      	movs	r3, #159	@ 0x9f
 8000552:	18fc      	adds	r4, r7, r3
 8000554:	23fa      	movs	r3, #250	@ 0xfa
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	1979      	adds	r1, r7, r5
 800055a:	48af      	ldr	r0, [pc, #700]	@ (8000818 <main+0x360>)
 800055c:	2216      	movs	r2, #22
 800055e:	f002 ff15 	bl	800338c <HAL_UART_Receive>
 8000562:	0003      	movs	r3, r0
 8000564:	7023      	strb	r3, [r4, #0]

      HAL_UART_Receive(&huart3, request, sizeof(request), 1000); 
 8000566:	23fa      	movs	r3, #250	@ 0xfa
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	2464      	movs	r4, #100	@ 0x64
 800056c:	1939      	adds	r1, r7, r4
 800056e:	48ab      	ldr	r0, [pc, #684]	@ (800081c <main+0x364>)
 8000570:	2208      	movs	r2, #8
 8000572:	f002 ff0b 	bl	800338c <HAL_UART_Receive>
      //HAL_UART_Transmit(&huart3, request, sizeof(request), 100);
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000576:	2380      	movs	r3, #128	@ 0x80
 8000578:	019b      	lsls	r3, r3, #6
 800057a:	4aa9      	ldr	r2, [pc, #676]	@ (8000820 <main+0x368>)
 800057c:	0019      	movs	r1, r3
 800057e:	0010      	movs	r0, r2
 8000580:	f001 fbfb 	bl	8001d7a <HAL_GPIO_TogglePin>

    

      if (request[0] == 0x01)
 8000584:	193b      	adds	r3, r7, r4
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d000      	beq.n	800058e <main+0xd6>
 800058c:	e07b      	b.n	8000686 <main+0x1ce>
      {
        AM1002_Data_t read_data = multiDataread();
 800058e:	2458      	movs	r4, #88	@ 0x58
 8000590:	193b      	adds	r3, r7, r4
 8000592:	0018      	movs	r0, r3
 8000594:	f7ff fedd 	bl	8000352 <multiDataread>

        uint8_t response1[] = {0x01, 0x03, 0x0C, 
 8000598:	2144      	movs	r1, #68	@ 0x44
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2201      	movs	r2, #1
 800059e:	701a      	strb	r2, [r3, #0]
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2203      	movs	r2, #3
 80005a4:	705a      	strb	r2, [r3, #1]
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	220c      	movs	r2, #12
 80005aa:	709a      	strb	r2, [r3, #2]
          (uint8_t)(read_data.tvoc >> 8), (uint8_t)(read_data.tvoc & 0xFF), // TVOC 
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	0a1b      	lsrs	r3, r3, #8
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	b2da      	uxtb	r2, r3
        uint8_t response1[] = {0x01, 0x03, 0x0C, 
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	70da      	strb	r2, [r3, #3]
          (uint8_t)(read_data.tvoc >> 8), (uint8_t)(read_data.tvoc & 0xFF), // TVOC 
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	b2da      	uxtb	r2, r3
        uint8_t response1[] = {0x01, 0x03, 0x0C, 
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	711a      	strb	r2, [r3, #4]
          (uint8_t)(read_data.pm1_0 >> 8), (uint8_t)(read_data.pm1_0 & 0xFF), // PM1.0
 80005c4:	0020      	movs	r0, r4
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	885b      	ldrh	r3, [r3, #2]
 80005ca:	0a1b      	lsrs	r3, r3, #8
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	b2da      	uxtb	r2, r3
        uint8_t response1[] = {0x01, 0x03, 0x0C, 
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	715a      	strb	r2, [r3, #5]
          (uint8_t)(read_data.pm1_0 >> 8), (uint8_t)(read_data.pm1_0 & 0xFF), // PM1.0
 80005d4:	183b      	adds	r3, r7, r0
 80005d6:	885b      	ldrh	r3, [r3, #2]
 80005d8:	b2da      	uxtb	r2, r3
        uint8_t response1[] = {0x01, 0x03, 0x0C, 
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	719a      	strb	r2, [r3, #6]
          (uint8_t)(read_data.pm2_5 >> 8), (uint8_t)(read_data.pm2_5 & 0xFF), // PM2.5
 80005de:	183b      	adds	r3, r7, r0
 80005e0:	889b      	ldrh	r3, [r3, #4]
 80005e2:	0a1b      	lsrs	r3, r3, #8
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	b2da      	uxtb	r2, r3
        uint8_t response1[] = {0x01, 0x03, 0x0C, 
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	71da      	strb	r2, [r3, #7]
          (uint8_t)(read_data.pm2_5 >> 8), (uint8_t)(read_data.pm2_5 & 0xFF), // PM2.5
 80005ec:	183b      	adds	r3, r7, r0
 80005ee:	889b      	ldrh	r3, [r3, #4]
 80005f0:	b2da      	uxtb	r2, r3
        uint8_t response1[] = {0x01, 0x03, 0x0C, 
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	721a      	strb	r2, [r3, #8]
          (uint8_t)(read_data.pm10 >> 8), (uint8_t)(read_data.pm10 & 0xFF), // PM10
 80005f6:	183b      	adds	r3, r7, r0
 80005f8:	88db      	ldrh	r3, [r3, #6]
 80005fa:	0a1b      	lsrs	r3, r3, #8
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	b2da      	uxtb	r2, r3
        uint8_t response1[] = {0x01, 0x03, 0x0C, 
 8000600:	187b      	adds	r3, r7, r1
 8000602:	725a      	strb	r2, [r3, #9]
          (uint8_t)(read_data.pm10 >> 8), (uint8_t)(read_data.pm10 & 0xFF), // PM10
 8000604:	183b      	adds	r3, r7, r0
 8000606:	88db      	ldrh	r3, [r3, #6]
 8000608:	b2da      	uxtb	r2, r3
        uint8_t response1[] = {0x01, 0x03, 0x0C, 
 800060a:	187b      	adds	r3, r7, r1
 800060c:	729a      	strb	r2, [r3, #10]
          (uint8_t)(read_data.humidity >> 8), (uint8_t)(read_data.humidity & 0xFF), // Temperature
 800060e:	183b      	adds	r3, r7, r0
 8000610:	895b      	ldrh	r3, [r3, #10]
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	b29b      	uxth	r3, r3
 8000616:	b2da      	uxtb	r2, r3
        uint8_t response1[] = {0x01, 0x03, 0x0C, 
 8000618:	187b      	adds	r3, r7, r1
 800061a:	72da      	strb	r2, [r3, #11]
          (uint8_t)(read_data.humidity >> 8), (uint8_t)(read_data.humidity & 0xFF), // Temperature
 800061c:	183b      	adds	r3, r7, r0
 800061e:	895b      	ldrh	r3, [r3, #10]
 8000620:	b2da      	uxtb	r2, r3
        uint8_t response1[] = {0x01, 0x03, 0x0C, 
 8000622:	187b      	adds	r3, r7, r1
 8000624:	731a      	strb	r2, [r3, #12]
          (uint8_t)(read_data.temperature >> 8), (uint8_t)(read_data.temperature & 0xFF), // Humidity
 8000626:	183b      	adds	r3, r7, r0
 8000628:	2208      	movs	r2, #8
 800062a:	5e9b      	ldrsh	r3, [r3, r2]
 800062c:	121b      	asrs	r3, r3, #8
 800062e:	b21b      	sxth	r3, r3
 8000630:	b2da      	uxtb	r2, r3
        uint8_t response1[] = {0x01, 0x03, 0x0C, 
 8000632:	187b      	adds	r3, r7, r1
 8000634:	735a      	strb	r2, [r3, #13]
          (uint8_t)(read_data.temperature >> 8), (uint8_t)(read_data.temperature & 0xFF), // Humidity
 8000636:	183b      	adds	r3, r7, r0
 8000638:	2208      	movs	r2, #8
 800063a:	5e9b      	ldrsh	r3, [r3, r2]
 800063c:	b2da      	uxtb	r2, r3
        uint8_t response1[] = {0x01, 0x03, 0x0C, 
 800063e:	000c      	movs	r4, r1
 8000640:	193b      	adds	r3, r7, r4
 8000642:	739a      	strb	r2, [r3, #14]
 8000644:	193b      	adds	r3, r7, r4
 8000646:	2200      	movs	r2, #0
 8000648:	73da      	strb	r2, [r3, #15]
 800064a:	193b      	adds	r3, r7, r4
 800064c:	2200      	movs	r2, #0
 800064e:	741a      	strb	r2, [r3, #16]
          0x00, 0x00};
        uint16_t crc = ModBus_CRC16(response1, sizeof(response1) - 2);
 8000650:	193b      	adds	r3, r7, r4
 8000652:	210f      	movs	r1, #15
 8000654:	0018      	movs	r0, r3
 8000656:	f000 fb0b 	bl	8000c70 <ModBus_CRC16>
 800065a:	0002      	movs	r2, r0
 800065c:	219c      	movs	r1, #156	@ 0x9c
 800065e:	187b      	adds	r3, r7, r1
 8000660:	801a      	strh	r2, [r3, #0]
        response1[sizeof(response1) - 2] = crc & 0xFF; // CRC Low
 8000662:	187b      	adds	r3, r7, r1
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	b2da      	uxtb	r2, r3
 8000668:	193b      	adds	r3, r7, r4
 800066a:	73da      	strb	r2, [r3, #15]
        response1[sizeof(response1) - 1] = (crc >> 8) & 0xFF; // CRC High
 800066c:	187b      	adds	r3, r7, r1
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	0a1b      	lsrs	r3, r3, #8
 8000672:	b29b      	uxth	r3, r3
 8000674:	b2da      	uxtb	r2, r3
 8000676:	193b      	adds	r3, r7, r4
 8000678:	741a      	strb	r2, [r3, #16]

        HAL_UART_Transmit(&huart3, &response1, sizeof(response1), 100);
 800067a:	1939      	adds	r1, r7, r4
 800067c:	4867      	ldr	r0, [pc, #412]	@ (800081c <main+0x364>)
 800067e:	2364      	movs	r3, #100	@ 0x64
 8000680:	2211      	movs	r2, #17
 8000682:	f002 fde3 	bl	800324c <HAL_UART_Transmit>

      }


      #if 1
      if (request[0] == 0x02)
 8000686:	2364      	movs	r3, #100	@ 0x64
 8000688:	18fb      	adds	r3, r7, r3
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b02      	cmp	r3, #2
 800068e:	d000      	beq.n	8000692 <main+0x1da>
 8000690:	e086      	b.n	80007a0 <main+0x2e8>
      {
        AM1002_Data_t write_data = ProcessAndPrintAM1002(&huart3, rx_buffer);
 8000692:	2438      	movs	r4, #56	@ 0x38
 8000694:	1938      	adds	r0, r7, r4
 8000696:	2370      	movs	r3, #112	@ 0x70
 8000698:	18fa      	adds	r2, r7, r3
 800069a:	4960      	ldr	r1, [pc, #384]	@ (800081c <main+0x364>)
 800069c:	2394      	movs	r3, #148	@ 0x94
 800069e:	18fb      	adds	r3, r7, r3
 80006a0:	469c      	mov	ip, r3
 80006a2:	f000 f937 	bl	8000914 <ProcessAndPrintAM1002.0>
        multiDatawrite(write_data);
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	6859      	ldr	r1, [r3, #4]
 80006ac:	689a      	ldr	r2, [r3, #8]
 80006ae:	f7ff fe25 	bl	80002fc <multiDatawrite>
        
        uint8_t response[] = {0x02, 0x03, 0x0C, 
 80006b2:	2124      	movs	r1, #36	@ 0x24
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2202      	movs	r2, #2
 80006b8:	701a      	strb	r2, [r3, #0]
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2203      	movs	r2, #3
 80006be:	705a      	strb	r2, [r3, #1]
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	220c      	movs	r2, #12
 80006c4:	709a      	strb	r2, [r3, #2]
          (uint8_t)(write_data.tvoc >> 8), (uint8_t)(write_data.tvoc & 0xFF), // TVOC 
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	0a1b      	lsrs	r3, r3, #8
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	b2da      	uxtb	r2, r3
        uint8_t response[] = {0x02, 0x03, 0x0C, 
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	70da      	strb	r2, [r3, #3]
          (uint8_t)(write_data.tvoc >> 8), (uint8_t)(write_data.tvoc & 0xFF), // TVOC 
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	b2da      	uxtb	r2, r3
        uint8_t response[] = {0x02, 0x03, 0x0C, 
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	711a      	strb	r2, [r3, #4]
          (uint8_t)(write_data.pm1_0 >> 8), (uint8_t)(write_data.pm1_0 & 0xFF), // PM1.0
 80006de:	0020      	movs	r0, r4
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	885b      	ldrh	r3, [r3, #2]
 80006e4:	0a1b      	lsrs	r3, r3, #8
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	b2da      	uxtb	r2, r3
        uint8_t response[] = {0x02, 0x03, 0x0C, 
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	715a      	strb	r2, [r3, #5]
          (uint8_t)(write_data.pm1_0 >> 8), (uint8_t)(write_data.pm1_0 & 0xFF), // PM1.0
 80006ee:	183b      	adds	r3, r7, r0
 80006f0:	885b      	ldrh	r3, [r3, #2]
 80006f2:	b2da      	uxtb	r2, r3
        uint8_t response[] = {0x02, 0x03, 0x0C, 
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	719a      	strb	r2, [r3, #6]
          (uint8_t)(write_data.pm2_5 >> 8), (uint8_t)(write_data.pm2_5 & 0xFF), // PM2.5
 80006f8:	183b      	adds	r3, r7, r0
 80006fa:	889b      	ldrh	r3, [r3, #4]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	b29b      	uxth	r3, r3
 8000700:	b2da      	uxtb	r2, r3
        uint8_t response[] = {0x02, 0x03, 0x0C, 
 8000702:	187b      	adds	r3, r7, r1
 8000704:	71da      	strb	r2, [r3, #7]
          (uint8_t)(write_data.pm2_5 >> 8), (uint8_t)(write_data.pm2_5 & 0xFF), // PM2.5
 8000706:	183b      	adds	r3, r7, r0
 8000708:	889b      	ldrh	r3, [r3, #4]
 800070a:	b2da      	uxtb	r2, r3
        uint8_t response[] = {0x02, 0x03, 0x0C, 
 800070c:	187b      	adds	r3, r7, r1
 800070e:	721a      	strb	r2, [r3, #8]
          (uint8_t)(write_data.pm10 >> 8), (uint8_t)(write_data.pm10 & 0xFF), // PM10
 8000710:	183b      	adds	r3, r7, r0
 8000712:	88db      	ldrh	r3, [r3, #6]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	b29b      	uxth	r3, r3
 8000718:	b2da      	uxtb	r2, r3
        uint8_t response[] = {0x02, 0x03, 0x0C, 
 800071a:	187b      	adds	r3, r7, r1
 800071c:	725a      	strb	r2, [r3, #9]
          (uint8_t)(write_data.pm10 >> 8), (uint8_t)(write_data.pm10 & 0xFF), // PM10
 800071e:	183b      	adds	r3, r7, r0
 8000720:	88db      	ldrh	r3, [r3, #6]
 8000722:	b2da      	uxtb	r2, r3
        uint8_t response[] = {0x02, 0x03, 0x0C, 
 8000724:	187b      	adds	r3, r7, r1
 8000726:	729a      	strb	r2, [r3, #10]
          (uint8_t)(write_data.humidity >> 8), (uint8_t)(write_data.humidity & 0xFF), // Temperature
 8000728:	183b      	adds	r3, r7, r0
 800072a:	895b      	ldrh	r3, [r3, #10]
 800072c:	0a1b      	lsrs	r3, r3, #8
 800072e:	b29b      	uxth	r3, r3
 8000730:	b2da      	uxtb	r2, r3
        uint8_t response[] = {0x02, 0x03, 0x0C, 
 8000732:	187b      	adds	r3, r7, r1
 8000734:	72da      	strb	r2, [r3, #11]
          (uint8_t)(write_data.humidity >> 8), (uint8_t)(write_data.humidity & 0xFF), // Temperature
 8000736:	183b      	adds	r3, r7, r0
 8000738:	895b      	ldrh	r3, [r3, #10]
 800073a:	b2da      	uxtb	r2, r3
        uint8_t response[] = {0x02, 0x03, 0x0C, 
 800073c:	187b      	adds	r3, r7, r1
 800073e:	731a      	strb	r2, [r3, #12]
          (uint8_t)(write_data.temperature >> 8), (uint8_t)(write_data.temperature & 0xFF), // Humidity
 8000740:	183b      	adds	r3, r7, r0
 8000742:	2208      	movs	r2, #8
 8000744:	5e9b      	ldrsh	r3, [r3, r2]
 8000746:	121b      	asrs	r3, r3, #8
 8000748:	b21b      	sxth	r3, r3
 800074a:	b2da      	uxtb	r2, r3
        uint8_t response[] = {0x02, 0x03, 0x0C, 
 800074c:	187b      	adds	r3, r7, r1
 800074e:	735a      	strb	r2, [r3, #13]
          (uint8_t)(write_data.temperature >> 8), (uint8_t)(write_data.temperature & 0xFF), // Humidity
 8000750:	183b      	adds	r3, r7, r0
 8000752:	2208      	movs	r2, #8
 8000754:	5e9b      	ldrsh	r3, [r3, r2]
 8000756:	b2da      	uxtb	r2, r3
        uint8_t response[] = {0x02, 0x03, 0x0C, 
 8000758:	000c      	movs	r4, r1
 800075a:	193b      	adds	r3, r7, r4
 800075c:	739a      	strb	r2, [r3, #14]
 800075e:	193b      	adds	r3, r7, r4
 8000760:	22b4      	movs	r2, #180	@ 0xb4
 8000762:	73da      	strb	r2, [r3, #15]
 8000764:	193b      	adds	r3, r7, r4
 8000766:	2227      	movs	r2, #39	@ 0x27
 8000768:	741a      	strb	r2, [r3, #16]
          0xB4, 0x27};
        uint16_t crc = ModBus_CRC16(response, sizeof(response) - 2);
 800076a:	193b      	adds	r3, r7, r4
 800076c:	210f      	movs	r1, #15
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fa7e 	bl	8000c70 <ModBus_CRC16>
 8000774:	0002      	movs	r2, r0
 8000776:	219a      	movs	r1, #154	@ 0x9a
 8000778:	187b      	adds	r3, r7, r1
 800077a:	801a      	strh	r2, [r3, #0]
        response[sizeof(response) - 2] = crc & 0xFF; // CRC Low
 800077c:	187b      	adds	r3, r7, r1
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	b2da      	uxtb	r2, r3
 8000782:	193b      	adds	r3, r7, r4
 8000784:	73da      	strb	r2, [r3, #15]
        response[sizeof(response) - 1] = (crc >> 8) & 0xFF; // CRC High
 8000786:	187b      	adds	r3, r7, r1
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	0a1b      	lsrs	r3, r3, #8
 800078c:	b29b      	uxth	r3, r3
 800078e:	b2da      	uxtb	r2, r3
 8000790:	193b      	adds	r3, r7, r4
 8000792:	741a      	strb	r2, [r3, #16]

        HAL_UART_Transmit(&huart3, &response, sizeof(response), 100);
 8000794:	1939      	adds	r1, r7, r4
 8000796:	4821      	ldr	r0, [pc, #132]	@ (800081c <main+0x364>)
 8000798:	2364      	movs	r3, #100	@ 0x64
 800079a:	2211      	movs	r2, #17
 800079c:	f002 fd56 	bl	800324c <HAL_UART_Transmit>

      }
      #endif


      if (status == HAL_OK && request[0] == 0x03)
 80007a0:	239f      	movs	r3, #159	@ 0x9f
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d000      	beq.n	80007ac <main+0x2f4>
 80007aa:	e6b4      	b.n	8000516 <main+0x5e>
 80007ac:	2364      	movs	r3, #100	@ 0x64
 80007ae:	18fb      	adds	r3, r7, r3
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b03      	cmp	r3, #3
 80007b4:	d000      	beq.n	80007b8 <main+0x300>
 80007b6:	e6ae      	b.n	8000516 <main+0x5e>
        // HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
       
       
       
       
        if (rx_buffer[0] == 0x16 && rx_buffer[1] == 0x13 && rx_buffer[2] == 0x16)
 80007b8:	2270      	movs	r2, #112	@ 0x70
 80007ba:	18bb      	adds	r3, r7, r2
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b16      	cmp	r3, #22
 80007c0:	d000      	beq.n	80007c4 <main+0x30c>
 80007c2:	e6a8      	b.n	8000516 <main+0x5e>
 80007c4:	18bb      	adds	r3, r7, r2
 80007c6:	785b      	ldrb	r3, [r3, #1]
 80007c8:	2b13      	cmp	r3, #19
 80007ca:	d000      	beq.n	80007ce <main+0x316>
 80007cc:	e6a3      	b.n	8000516 <main+0x5e>
 80007ce:	18bb      	adds	r3, r7, r2
 80007d0:	789b      	ldrb	r3, [r3, #2]
 80007d2:	2b16      	cmp	r3, #22
 80007d4:	d000      	beq.n	80007d8 <main+0x320>
 80007d6:	e69e      	b.n	8000516 <main+0x5e>
        {
          AM1002_Data_t current_data = ProcessAndPrintAM1002(&huart3, rx_buffer);
 80007d8:	2418      	movs	r4, #24
 80007da:	1938      	adds	r0, r7, r4
 80007dc:	18ba      	adds	r2, r7, r2
 80007de:	490f      	ldr	r1, [pc, #60]	@ (800081c <main+0x364>)
 80007e0:	2394      	movs	r3, #148	@ 0x94
 80007e2:	18fb      	adds	r3, r7, r3
 80007e4:	469c      	mov	ip, r3
 80007e6:	f000 f895 	bl	8000914 <ProcessAndPrintAM1002.0>
          if (current_data.humidity > 500)
 80007ea:	0021      	movs	r1, r4
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	895a      	ldrh	r2, [r3, #10]
 80007f0:	23fa      	movs	r3, #250	@ 0xfa
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d915      	bls.n	8000824 <main+0x36c>
          {
            multiDatawrite(current_data);
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	6859      	ldr	r1, [r3, #4]
 80007fe:	689a      	ldr	r2, [r3, #8]
 8000800:	f7ff fd7c 	bl	80002fc <multiDatawrite>
 8000804:	e687      	b.n	8000516 <main+0x5e>
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	2000002c 	.word	0x2000002c
 800080c:	d8160111 	.word	0xd8160111
 8000810:	080043dc 	.word	0x080043dc
 8000814:	2000020c 	.word	0x2000020c
 8000818:	20000074 	.word	0x20000074
 800081c:	200000fc 	.word	0x200000fc
 8000820:	48000800 	.word	0x48000800
          else
          {
            #ifdef terminal_mode
            HAL_UART_Transmit(&huart3, (uint8_t *)"Humidity is low\r\n", 18, HAL_MAX_DELAY);
            #endif
            uint8_t response[] = {0x03, 0x03, 0x0C, 
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2203      	movs	r2, #3
 8000828:	701a      	strb	r2, [r3, #0]
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2203      	movs	r2, #3
 800082e:	705a      	strb	r2, [r3, #1]
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	220c      	movs	r2, #12
 8000834:	709a      	strb	r2, [r3, #2]
              (uint8_t)(current_data.tvoc >> 8), (uint8_t)(current_data.tvoc & 0xFF), // TVOC 
 8000836:	2118      	movs	r1, #24
 8000838:	187b      	adds	r3, r7, r1
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	b29b      	uxth	r3, r3
 8000840:	b2da      	uxtb	r2, r3
            uint8_t response[] = {0x03, 0x03, 0x0C, 
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	70da      	strb	r2, [r3, #3]
              (uint8_t)(current_data.tvoc >> 8), (uint8_t)(current_data.tvoc & 0xFF), // TVOC 
 8000846:	187b      	adds	r3, r7, r1
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	b2da      	uxtb	r2, r3
            uint8_t response[] = {0x03, 0x03, 0x0C, 
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	711a      	strb	r2, [r3, #4]
              (uint8_t)(current_data.pm1_0 >> 8), (uint8_t)(current_data.pm1_0 & 0xFF), // PM1.0
 8000850:	187b      	adds	r3, r7, r1
 8000852:	885b      	ldrh	r3, [r3, #2]
 8000854:	0a1b      	lsrs	r3, r3, #8
 8000856:	b29b      	uxth	r3, r3
 8000858:	b2da      	uxtb	r2, r3
            uint8_t response[] = {0x03, 0x03, 0x0C, 
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	715a      	strb	r2, [r3, #5]
              (uint8_t)(current_data.pm1_0 >> 8), (uint8_t)(current_data.pm1_0 & 0xFF), // PM1.0
 800085e:	187b      	adds	r3, r7, r1
 8000860:	885b      	ldrh	r3, [r3, #2]
 8000862:	b2da      	uxtb	r2, r3
            uint8_t response[] = {0x03, 0x03, 0x0C, 
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	719a      	strb	r2, [r3, #6]
              (uint8_t)(current_data.pm2_5 >> 8), (uint8_t)(current_data.pm2_5 & 0xFF), // PM2.5
 8000868:	187b      	adds	r3, r7, r1
 800086a:	889b      	ldrh	r3, [r3, #4]
 800086c:	0a1b      	lsrs	r3, r3, #8
 800086e:	b29b      	uxth	r3, r3
 8000870:	b2da      	uxtb	r2, r3
            uint8_t response[] = {0x03, 0x03, 0x0C, 
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	71da      	strb	r2, [r3, #7]
              (uint8_t)(current_data.pm2_5 >> 8), (uint8_t)(current_data.pm2_5 & 0xFF), // PM2.5
 8000876:	187b      	adds	r3, r7, r1
 8000878:	889b      	ldrh	r3, [r3, #4]
 800087a:	b2da      	uxtb	r2, r3
            uint8_t response[] = {0x03, 0x03, 0x0C, 
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	721a      	strb	r2, [r3, #8]
              (uint8_t)(current_data.pm10 >> 8), (uint8_t)(current_data.pm10 & 0xFF), // PM10
 8000880:	187b      	adds	r3, r7, r1
 8000882:	88db      	ldrh	r3, [r3, #6]
 8000884:	0a1b      	lsrs	r3, r3, #8
 8000886:	b29b      	uxth	r3, r3
 8000888:	b2da      	uxtb	r2, r3
            uint8_t response[] = {0x03, 0x03, 0x0C, 
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	725a      	strb	r2, [r3, #9]
              (uint8_t)(current_data.pm10 >> 8), (uint8_t)(current_data.pm10 & 0xFF), // PM10
 800088e:	187b      	adds	r3, r7, r1
 8000890:	88db      	ldrh	r3, [r3, #6]
 8000892:	b2da      	uxtb	r2, r3
            uint8_t response[] = {0x03, 0x03, 0x0C, 
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	729a      	strb	r2, [r3, #10]
              (uint8_t)(current_data.humidity >> 8), (uint8_t)(current_data.humidity & 0xFF), // Temperature
 8000898:	187b      	adds	r3, r7, r1
 800089a:	895b      	ldrh	r3, [r3, #10]
 800089c:	0a1b      	lsrs	r3, r3, #8
 800089e:	b29b      	uxth	r3, r3
 80008a0:	b2da      	uxtb	r2, r3
            uint8_t response[] = {0x03, 0x03, 0x0C, 
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	72da      	strb	r2, [r3, #11]
              (uint8_t)(current_data.humidity >> 8), (uint8_t)(current_data.humidity & 0xFF), // Temperature
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	895b      	ldrh	r3, [r3, #10]
 80008aa:	b2da      	uxtb	r2, r3
            uint8_t response[] = {0x03, 0x03, 0x0C, 
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	731a      	strb	r2, [r3, #12]
              (uint8_t)(current_data.temperature >> 8), (uint8_t)(current_data.temperature & 0xFF), // Humidity
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2208      	movs	r2, #8
 80008b4:	5e9b      	ldrsh	r3, [r3, r2]
 80008b6:	121b      	asrs	r3, r3, #8
 80008b8:	b21b      	sxth	r3, r3
 80008ba:	b2da      	uxtb	r2, r3
            uint8_t response[] = {0x03, 0x03, 0x0C, 
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	735a      	strb	r2, [r3, #13]
              (uint8_t)(current_data.temperature >> 8), (uint8_t)(current_data.temperature & 0xFF), // Humidity
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2208      	movs	r2, #8
 80008c4:	5e9b      	ldrsh	r3, [r3, r2]
 80008c6:	b2da      	uxtb	r2, r3
            uint8_t response[] = {0x03, 0x03, 0x0C, 
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	739a      	strb	r2, [r3, #14]
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	22b4      	movs	r2, #180	@ 0xb4
 80008d0:	73da      	strb	r2, [r3, #15]
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2227      	movs	r2, #39	@ 0x27
 80008d6:	741a      	strb	r2, [r3, #16]
              0xB4, 0x27};
            uint16_t crc = ModBus_CRC16(response, sizeof(response) - 2);
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	210f      	movs	r1, #15
 80008dc:	0018      	movs	r0, r3
 80008de:	f000 f9c7 	bl	8000c70 <ModBus_CRC16>
 80008e2:	0002      	movs	r2, r0
 80008e4:	2198      	movs	r1, #152	@ 0x98
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	801a      	strh	r2, [r3, #0]
            response[sizeof(response) - 2] = crc & 0xFF; // CRC Low
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	73da      	strb	r2, [r3, #15]
            response[sizeof(response) - 1] = (crc >> 8) & 0xFF; // CRC High
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	741a      	strb	r2, [r3, #16]

            HAL_UART_Transmit(&huart3, &response, sizeof(response), 100);
 8000902:	1d39      	adds	r1, r7, #4
 8000904:	4802      	ldr	r0, [pc, #8]	@ (8000910 <main+0x458>)
 8000906:	2364      	movs	r3, #100	@ 0x64
 8000908:	2211      	movs	r2, #17
 800090a:	f002 fc9f 	bl	800324c <HAL_UART_Transmit>
    if (g_timer_ms_1000 == ENABLE)
 800090e:	e602      	b.n	8000516 <main+0x5e>
 8000910:	200000fc 	.word	0x200000fc

08000914 <ProcessAndPrintAM1002.0>:
  {
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b08b      	sub	sp, #44	@ 0x2c
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
 8000920:	4663      	mov	r3, ip
 8000922:	4662      	mov	r2, ip
 8000924:	603a      	str	r2, [r7, #0]
    AM1002_Data_t result = ProcessAM1002Data(rx_buffer, &sensorData);
 8000926:	2410      	movs	r4, #16
 8000928:	1938      	adds	r0, r7, r4
 800092a:	221c      	movs	r2, #28
 800092c:	18ba      	adds	r2, r7, r2
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	469c      	mov	ip, r3
 8000932:	f7ff fd4e 	bl	80003d2 <ProcessAM1002Data.1>
    return result;
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	193b      	adds	r3, r7, r4
 800093a:	0010      	movs	r0, r2
 800093c:	0019      	movs	r1, r3
 800093e:	230c      	movs	r3, #12
 8000940:	001a      	movs	r2, r3
 8000942:	f003 fd35 	bl	80043b0 <memcpy>
  }
 8000946:	68f8      	ldr	r0, [r7, #12]
 8000948:	46bd      	mov	sp, r7
 800094a:	b00b      	add	sp, #44	@ 0x2c
 800094c:	bd90      	pop	{r4, r7, pc}

0800094e <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800094e:	b590      	push	{r4, r7, lr}
 8000950:	b099      	sub	sp, #100	@ 0x64
 8000952:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000954:	242c      	movs	r4, #44	@ 0x2c
 8000956:	193b      	adds	r3, r7, r4
 8000958:	0018      	movs	r0, r3
 800095a:	2334      	movs	r3, #52	@ 0x34
 800095c:	001a      	movs	r2, r3
 800095e:	2100      	movs	r1, #0
 8000960:	f003 fcfa 	bl	8004358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	231c      	movs	r3, #28
 8000966:	18fb      	adds	r3, r7, r3
 8000968:	0018      	movs	r0, r3
 800096a:	2310      	movs	r3, #16
 800096c:	001a      	movs	r2, r3
 800096e:	2100      	movs	r1, #0
 8000970:	f003 fcf2 	bl	8004358 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	0018      	movs	r0, r3
 8000978:	2318      	movs	r3, #24
 800097a:	001a      	movs	r2, r3
 800097c:	2100      	movs	r1, #0
 800097e:	f003 fceb 	bl	8004358 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000982:	0021      	movs	r1, r4
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2202      	movs	r2, #2
 8000988:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2201      	movs	r2, #1
 800098e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2210      	movs	r2, #16
 8000994:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2200      	movs	r2, #0
 800099a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099c:	187b      	adds	r3, r7, r1
 800099e:	0018      	movs	r0, r3
 80009a0:	f001 fa06 	bl	8001db0 <HAL_RCC_OscConfig>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80009a8:	f000 f95c 	bl	8000c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80009ac:	211c      	movs	r1, #28
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2207      	movs	r2, #7
 80009b2:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2200      	movs	r2, #0
 80009b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2100      	movs	r1, #0
 80009ca:	0018      	movs	r0, r3
 80009cc:	f001 fd76 	bl	80024bc <HAL_RCC_ClockConfig>
 80009d0:	1e03      	subs	r3, r0, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80009d4:	f000 f946 	bl	8000c64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2202      	movs	r2, #2
 80009dc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	0018      	movs	r0, r3
 80009e8:	f001 fed4 	bl	8002794 <HAL_RCCEx_PeriphCLKConfig>
 80009ec:	1e03      	subs	r3, r0, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009f0:	f000 f938 	bl	8000c64 <Error_Handler>
  }
}
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b019      	add	sp, #100	@ 0x64
 80009fa:	bd90      	pop	{r4, r7, pc}

080009fc <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a02:	2308      	movs	r3, #8
 8000a04:	18fb      	adds	r3, r7, r3
 8000a06:	0018      	movs	r0, r3
 8000a08:	2310      	movs	r3, #16
 8000a0a:	001a      	movs	r2, r3
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	f003 fca3 	bl	8004358 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a12:	003b      	movs	r3, r7
 8000a14:	0018      	movs	r0, r3
 8000a16:	2308      	movs	r3, #8
 8000a18:	001a      	movs	r2, r3
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f003 fc9c 	bl	8004358 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a20:	4b22      	ldr	r3, [pc, #136]	@ (8000aac <MX_TIM2_Init+0xb0>)
 8000a22:	2280      	movs	r2, #128	@ 0x80
 8000a24:	05d2      	lsls	r2, r2, #23
 8000a26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000a28:	4b20      	ldr	r3, [pc, #128]	@ (8000aac <MX_TIM2_Init+0xb0>)
 8000a2a:	4a21      	ldr	r2, [pc, #132]	@ (8000ab0 <MX_TIM2_Init+0xb4>)
 8000a2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000aac <MX_TIM2_Init+0xb0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000a34:	4b1d      	ldr	r3, [pc, #116]	@ (8000aac <MX_TIM2_Init+0xb0>)
 8000a36:	4a1f      	ldr	r2, [pc, #124]	@ (8000ab4 <MX_TIM2_Init+0xb8>)
 8000a38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aac <MX_TIM2_Init+0xb0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a40:	4b1a      	ldr	r3, [pc, #104]	@ (8000aac <MX_TIM2_Init+0xb0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a46:	4b19      	ldr	r3, [pc, #100]	@ (8000aac <MX_TIM2_Init+0xb0>)
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f001 ff91 	bl	8002970 <HAL_TIM_Base_Init>
 8000a4e:	1e03      	subs	r3, r0, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000a52:	f000 f907 	bl	8000c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a56:	2108      	movs	r1, #8
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2280      	movs	r2, #128	@ 0x80
 8000a5c:	0152      	lsls	r2, r2, #5
 8000a5e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a60:	187a      	adds	r2, r7, r1
 8000a62:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <MX_TIM2_Init+0xb0>)
 8000a64:	0011      	movs	r1, r2
 8000a66:	0018      	movs	r0, r3
 8000a68:	f002 f912 	bl	8002c90 <HAL_TIM_ConfigClockSource>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000a70:	f000 f8f8 	bl	8000c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a74:	003b      	movs	r3, r7
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a80:	003a      	movs	r2, r7
 8000a82:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <MX_TIM2_Init+0xb0>)
 8000a84:	0011      	movs	r1, r2
 8000a86:	0018      	movs	r0, r3
 8000a88:	f002 fb1e 	bl	80030c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000a90:	f000 f8e8 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2100      	movs	r1, #0
 8000a98:	200f      	movs	r0, #15
 8000a9a:	f000 fc21 	bl	80012e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a9e:	200f      	movs	r0, #15
 8000aa0:	f000 fc33 	bl	800130a <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM2_Init 2 */
}
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b006      	add	sp, #24
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	2000002c 	.word	0x2000002c
 8000ab0:	00001f3f 	.word	0x00001f3f
 8000ab4:	000003e7 	.word	0x000003e7

08000ab8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000abc:	4b14      	ldr	r3, [pc, #80]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000abe:	4a15      	ldr	r2, [pc, #84]	@ (8000b14 <MX_USART2_UART_Init+0x5c>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000ac4:	2296      	movs	r2, #150	@ 0x96
 8000ac6:	0192      	lsls	r2, r2, #6
 8000ac8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000afa:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000afc:	0018      	movs	r0, r3
 8000afe:	f002 fb51 	bl	80031a4 <HAL_UART_Init>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b06:	f000 f8ad 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000074 	.word	0x20000074
 8000b14:	40004400 	.word	0x40004400

08000b18 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b1e:	4a15      	ldr	r2, [pc, #84]	@ (8000b74 <MX_USART3_UART_Init+0x5c>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000b22:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b24:	2296      	movs	r2, #150	@ 0x96
 8000b26:	0192      	lsls	r2, r2, #6
 8000b28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b5a:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f002 fb21 	bl	80031a4 <HAL_UART_Init>
 8000b62:	1e03      	subs	r3, r0, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b66:	f000 f87d 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200000fc 	.word	0x200000fc
 8000b74:	40004800 	.word	0x40004800

08000b78 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <MX_DMA_Init+0x38>)
 8000b80:	695a      	ldr	r2, [r3, #20]
 8000b82:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <MX_DMA_Init+0x38>)
 8000b84:	2101      	movs	r1, #1
 8000b86:	430a      	orrs	r2, r1
 8000b88:	615a      	str	r2, [r3, #20]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <MX_DMA_Init+0x38>)
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	2201      	movs	r2, #1
 8000b90:	4013      	ands	r3, r2
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	200b      	movs	r0, #11
 8000b9c:	f000 fba0 	bl	80012e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000ba0:	200b      	movs	r0, #11
 8000ba2:	f000 fbb2 	bl	800130a <HAL_NVIC_EnableIRQ>
}
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b002      	add	sp, #8
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			@ (mov r8, r8)
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b089      	sub	sp, #36	@ 0x24
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	240c      	movs	r4, #12
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	2314      	movs	r3, #20
 8000bc2:	001a      	movs	r2, r3
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f003 fbc7 	bl	8004358 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	4b24      	ldr	r3, [pc, #144]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000bcc:	695a      	ldr	r2, [r3, #20]
 8000bce:	4b23      	ldr	r3, [pc, #140]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000bd0:	2180      	movs	r1, #128	@ 0x80
 8000bd2:	0309      	lsls	r1, r1, #12
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	615a      	str	r2, [r3, #20]
 8000bd8:	4b20      	ldr	r3, [pc, #128]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000bda:	695a      	ldr	r2, [r3, #20]
 8000bdc:	2380      	movs	r3, #128	@ 0x80
 8000bde:	031b      	lsls	r3, r3, #12
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000be8:	695a      	ldr	r2, [r3, #20]
 8000bea:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000bec:	2180      	movs	r1, #128	@ 0x80
 8000bee:	0289      	lsls	r1, r1, #10
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	615a      	str	r2, [r3, #20]
 8000bf4:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000bf6:	695a      	ldr	r2, [r3, #20]
 8000bf8:	2380      	movs	r3, #128	@ 0x80
 8000bfa:	029b      	lsls	r3, r3, #10
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000c04:	695a      	ldr	r2, [r3, #20]
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000c08:	2180      	movs	r1, #128	@ 0x80
 8000c0a:	02c9      	lsls	r1, r1, #11
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	615a      	str	r2, [r3, #20]
 8000c10:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000c12:	695a      	ldr	r2, [r3, #20]
 8000c14:	2380      	movs	r3, #128	@ 0x80
 8000c16:	02db      	lsls	r3, r3, #11
 8000c18:	4013      	ands	r3, r2
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c1e:	2380      	movs	r3, #128	@ 0x80
 8000c20:	019b      	lsls	r3, r3, #6
 8000c22:	480f      	ldr	r0, [pc, #60]	@ (8000c60 <MX_GPIO_Init+0xac>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	0019      	movs	r1, r3
 8000c28:	f001 f88a 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c2c:	193b      	adds	r3, r7, r4
 8000c2e:	2280      	movs	r2, #128	@ 0x80
 8000c30:	0192      	lsls	r2, r2, #6
 8000c32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	193b      	adds	r3, r7, r4
 8000c36:	2201      	movs	r2, #1
 8000c38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	193b      	adds	r3, r7, r4
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	4a05      	ldr	r2, [pc, #20]	@ (8000c60 <MX_GPIO_Init+0xac>)
 8000c4a:	0019      	movs	r1, r3
 8000c4c:	0010      	movs	r0, r2
 8000c4e:	f000 feff 	bl	8001a50 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b009      	add	sp, #36	@ 0x24
 8000c58:	bd90      	pop	{r4, r7, pc}
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	48000800 	.word	0x48000800

08000c64 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6c:	46c0      	nop			@ (mov r8, r8)
 8000c6e:	e7fd      	b.n	8000c6c <Error_Handler+0x8>

08000c70 <ModBus_CRC16>:
#include "main.h"

uint16_t ModBus_CRC16(uint8_t *data, uint16_t length) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	000a      	movs	r2, r1
 8000c7a:	1cbb      	adds	r3, r7, #2
 8000c7c:	801a      	strh	r2, [r3, #0]
  uint16_t crc = 0xFFFF;    // Initial value
 8000c7e:	230e      	movs	r3, #14
 8000c80:	18fb      	adds	r3, r7, r3
 8000c82:	2201      	movs	r2, #1
 8000c84:	4252      	negs	r2, r2
 8000c86:	801a      	strh	r2, [r3, #0]
  uint16_t i, j;
  
  for(i = 0; i < length; i++) {
 8000c88:	230c      	movs	r3, #12
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	801a      	strh	r2, [r3, #0]
 8000c90:	e037      	b.n	8000d02 <ModBus_CRC16+0x92>
      crc ^= data[i];       // XOR byte with CRC
 8000c92:	230c      	movs	r3, #12
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	18d3      	adds	r3, r2, r3
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	220e      	movs	r2, #14
 8000ca2:	18bb      	adds	r3, r7, r2
 8000ca4:	18ba      	adds	r2, r7, r2
 8000ca6:	8812      	ldrh	r2, [r2, #0]
 8000ca8:	404a      	eors	r2, r1
 8000caa:	801a      	strh	r2, [r3, #0]
      for(j = 0; j < 8; j++) {   // Process each bit
 8000cac:	230a      	movs	r3, #10
 8000cae:	18fb      	adds	r3, r7, r3
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	801a      	strh	r2, [r3, #0]
 8000cb4:	e01a      	b.n	8000cec <ModBus_CRC16+0x7c>
          if(crc & 0x0001) {     // If LSB is 1
 8000cb6:	210e      	movs	r1, #14
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	d008      	beq.n	8000cd4 <ModBus_CRC16+0x64>
              crc = (crc >> 1) ^ 0xA001;  // Shift right and XOR with polynomial
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	085b      	lsrs	r3, r3, #1
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	4914      	ldr	r1, [pc, #80]	@ (8000d20 <ModBus_CRC16+0xb0>)
 8000cce:	404a      	eors	r2, r1
 8000cd0:	801a      	strh	r2, [r3, #0]
 8000cd2:	e005      	b.n	8000ce0 <ModBus_CRC16+0x70>
          } else {
              crc = crc >> 1;    // Just shift right
 8000cd4:	220e      	movs	r2, #14
 8000cd6:	18bb      	adds	r3, r7, r2
 8000cd8:	18ba      	adds	r2, r7, r2
 8000cda:	8812      	ldrh	r2, [r2, #0]
 8000cdc:	0852      	lsrs	r2, r2, #1
 8000cde:	801a      	strh	r2, [r3, #0]
      for(j = 0; j < 8; j++) {   // Process each bit
 8000ce0:	210a      	movs	r1, #10
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	881a      	ldrh	r2, [r3, #0]
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	3201      	adds	r2, #1
 8000cea:	801a      	strh	r2, [r3, #0]
 8000cec:	230a      	movs	r3, #10
 8000cee:	18fb      	adds	r3, r7, r3
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	2b07      	cmp	r3, #7
 8000cf4:	d9df      	bls.n	8000cb6 <ModBus_CRC16+0x46>
  for(i = 0; i < length; i++) {
 8000cf6:	210c      	movs	r1, #12
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	881a      	ldrh	r2, [r3, #0]
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	3201      	adds	r2, #1
 8000d00:	801a      	strh	r2, [r3, #0]
 8000d02:	230c      	movs	r3, #12
 8000d04:	18fa      	adds	r2, r7, r3
 8000d06:	1cbb      	adds	r3, r7, #2
 8000d08:	8812      	ldrh	r2, [r2, #0]
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d3c0      	bcc.n	8000c92 <ModBus_CRC16+0x22>
          }
      }
  }
  
  return crc;
 8000d10:	230e      	movs	r3, #14
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	0018      	movs	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b004      	add	sp, #16
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	ffffa001 	.word	0xffffa001

08000d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <HAL_MspInit+0x44>)
 8000d2c:	699a      	ldr	r2, [r3, #24]
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <HAL_MspInit+0x44>)
 8000d30:	2101      	movs	r1, #1
 8000d32:	430a      	orrs	r2, r1
 8000d34:	619a      	str	r2, [r3, #24]
 8000d36:	4b0c      	ldr	r3, [pc, #48]	@ (8000d68 <HAL_MspInit+0x44>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b09      	ldr	r3, [pc, #36]	@ (8000d68 <HAL_MspInit+0x44>)
 8000d44:	69da      	ldr	r2, [r3, #28]
 8000d46:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <HAL_MspInit+0x44>)
 8000d48:	2180      	movs	r1, #128	@ 0x80
 8000d4a:	0549      	lsls	r1, r1, #21
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	61da      	str	r2, [r3, #28]
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <HAL_MspInit+0x44>)
 8000d52:	69da      	ldr	r2, [r3, #28]
 8000d54:	2380      	movs	r3, #128	@ 0x80
 8000d56:	055b      	lsls	r3, r3, #21
 8000d58:	4013      	ands	r3, r2
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b002      	add	sp, #8
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	40021000 	.word	0x40021000

08000d6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	2380      	movs	r3, #128	@ 0x80
 8000d7a:	05db      	lsls	r3, r3, #23
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d113      	bne.n	8000da8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d80:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <HAL_TIM_Base_MspInit+0x44>)
 8000d82:	69da      	ldr	r2, [r3, #28]
 8000d84:	4b0a      	ldr	r3, [pc, #40]	@ (8000db0 <HAL_TIM_Base_MspInit+0x44>)
 8000d86:	2101      	movs	r1, #1
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	61da      	str	r2, [r3, #28]
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <HAL_TIM_Base_MspInit+0x44>)
 8000d8e:	69db      	ldr	r3, [r3, #28]
 8000d90:	2201      	movs	r2, #1
 8000d92:	4013      	ands	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	200f      	movs	r0, #15
 8000d9e:	f000 fa9f 	bl	80012e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000da2:	200f      	movs	r0, #15
 8000da4:	f000 fab1 	bl	800130a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000da8:	46c0      	nop			@ (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b004      	add	sp, #16
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40021000 	.word	0x40021000

08000db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b08d      	sub	sp, #52	@ 0x34
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	241c      	movs	r4, #28
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	2314      	movs	r3, #20
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	f003 fac6 	bl	8004358 <memset>
  if(huart->Instance==USART2)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a67      	ldr	r2, [pc, #412]	@ (8000f70 <HAL_UART_MspInit+0x1bc>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d000      	beq.n	8000dd8 <HAL_UART_MspInit+0x24>
 8000dd6:	e087      	b.n	8000ee8 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd8:	4b66      	ldr	r3, [pc, #408]	@ (8000f74 <HAL_UART_MspInit+0x1c0>)
 8000dda:	69da      	ldr	r2, [r3, #28]
 8000ddc:	4b65      	ldr	r3, [pc, #404]	@ (8000f74 <HAL_UART_MspInit+0x1c0>)
 8000dde:	2180      	movs	r1, #128	@ 0x80
 8000de0:	0289      	lsls	r1, r1, #10
 8000de2:	430a      	orrs	r2, r1
 8000de4:	61da      	str	r2, [r3, #28]
 8000de6:	4b63      	ldr	r3, [pc, #396]	@ (8000f74 <HAL_UART_MspInit+0x1c0>)
 8000de8:	69da      	ldr	r2, [r3, #28]
 8000dea:	2380      	movs	r3, #128	@ 0x80
 8000dec:	029b      	lsls	r3, r3, #10
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
 8000df2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b5f      	ldr	r3, [pc, #380]	@ (8000f74 <HAL_UART_MspInit+0x1c0>)
 8000df6:	695a      	ldr	r2, [r3, #20]
 8000df8:	4b5e      	ldr	r3, [pc, #376]	@ (8000f74 <HAL_UART_MspInit+0x1c0>)
 8000dfa:	2180      	movs	r1, #128	@ 0x80
 8000dfc:	0289      	lsls	r1, r1, #10
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	615a      	str	r2, [r3, #20]
 8000e02:	4b5c      	ldr	r3, [pc, #368]	@ (8000f74 <HAL_UART_MspInit+0x1c0>)
 8000e04:	695a      	ldr	r2, [r3, #20]
 8000e06:	2380      	movs	r3, #128	@ 0x80
 8000e08:	029b      	lsls	r3, r3, #10
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e10:	0021      	movs	r1, r4
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	220c      	movs	r2, #12
 8000e16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	2203      	movs	r2, #3
 8000e28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e2a:	187b      	adds	r3, r7, r1
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	187a      	adds	r2, r7, r1
 8000e32:	2390      	movs	r3, #144	@ 0x90
 8000e34:	05db      	lsls	r3, r3, #23
 8000e36:	0011      	movs	r1, r2
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f000 fe09 	bl	8001a50 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000e3e:	4b4e      	ldr	r3, [pc, #312]	@ (8000f78 <HAL_UART_MspInit+0x1c4>)
 8000e40:	4a4e      	ldr	r2, [pc, #312]	@ (8000f7c <HAL_UART_MspInit+0x1c8>)
 8000e42:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e44:	4b4c      	ldr	r3, [pc, #304]	@ (8000f78 <HAL_UART_MspInit+0x1c4>)
 8000e46:	2210      	movs	r2, #16
 8000e48:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e4a:	4b4b      	ldr	r3, [pc, #300]	@ (8000f78 <HAL_UART_MspInit+0x1c4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e50:	4b49      	ldr	r3, [pc, #292]	@ (8000f78 <HAL_UART_MspInit+0x1c4>)
 8000e52:	2280      	movs	r2, #128	@ 0x80
 8000e54:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e56:	4b48      	ldr	r3, [pc, #288]	@ (8000f78 <HAL_UART_MspInit+0x1c4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e5c:	4b46      	ldr	r3, [pc, #280]	@ (8000f78 <HAL_UART_MspInit+0x1c4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e62:	4b45      	ldr	r3, [pc, #276]	@ (8000f78 <HAL_UART_MspInit+0x1c4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e68:	4b43      	ldr	r3, [pc, #268]	@ (8000f78 <HAL_UART_MspInit+0x1c4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e6e:	4b42      	ldr	r3, [pc, #264]	@ (8000f78 <HAL_UART_MspInit+0x1c4>)
 8000e70:	0018      	movs	r0, r3
 8000e72:	f000 fa67 	bl	8001344 <HAL_DMA_Init>
 8000e76:	1e03      	subs	r3, r0, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000e7a:	f7ff fef3 	bl	8000c64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a3d      	ldr	r2, [pc, #244]	@ (8000f78 <HAL_UART_MspInit+0x1c4>)
 8000e82:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e84:	4b3c      	ldr	r3, [pc, #240]	@ (8000f78 <HAL_UART_MspInit+0x1c4>)
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000e8a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f80 <HAL_UART_MspInit+0x1cc>)
 8000e8c:	4a3d      	ldr	r2, [pc, #244]	@ (8000f84 <HAL_UART_MspInit+0x1d0>)
 8000e8e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e90:	4b3b      	ldr	r3, [pc, #236]	@ (8000f80 <HAL_UART_MspInit+0x1cc>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e96:	4b3a      	ldr	r3, [pc, #232]	@ (8000f80 <HAL_UART_MspInit+0x1cc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e9c:	4b38      	ldr	r3, [pc, #224]	@ (8000f80 <HAL_UART_MspInit+0x1cc>)
 8000e9e:	2280      	movs	r2, #128	@ 0x80
 8000ea0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ea2:	4b37      	ldr	r3, [pc, #220]	@ (8000f80 <HAL_UART_MspInit+0x1cc>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ea8:	4b35      	ldr	r3, [pc, #212]	@ (8000f80 <HAL_UART_MspInit+0x1cc>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000eae:	4b34      	ldr	r3, [pc, #208]	@ (8000f80 <HAL_UART_MspInit+0x1cc>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eb4:	4b32      	ldr	r3, [pc, #200]	@ (8000f80 <HAL_UART_MspInit+0x1cc>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000eba:	4b31      	ldr	r3, [pc, #196]	@ (8000f80 <HAL_UART_MspInit+0x1cc>)
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f000 fa41 	bl	8001344 <HAL_DMA_Init>
 8000ec2:	1e03      	subs	r3, r0, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8000ec6:	f7ff fecd 	bl	8000c64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a2c      	ldr	r2, [pc, #176]	@ (8000f80 <HAL_UART_MspInit+0x1cc>)
 8000ece:	675a      	str	r2, [r3, #116]	@ 0x74
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f80 <HAL_UART_MspInit+0x1cc>)
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	201c      	movs	r0, #28
 8000edc:	f000 fa00 	bl	80012e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ee0:	201c      	movs	r0, #28
 8000ee2:	f000 fa12 	bl	800130a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ee6:	e03f      	b.n	8000f68 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a26      	ldr	r2, [pc, #152]	@ (8000f88 <HAL_UART_MspInit+0x1d4>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d13a      	bne.n	8000f68 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ef2:	4b20      	ldr	r3, [pc, #128]	@ (8000f74 <HAL_UART_MspInit+0x1c0>)
 8000ef4:	69da      	ldr	r2, [r3, #28]
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f74 <HAL_UART_MspInit+0x1c0>)
 8000ef8:	2180      	movs	r1, #128	@ 0x80
 8000efa:	02c9      	lsls	r1, r1, #11
 8000efc:	430a      	orrs	r2, r1
 8000efe:	61da      	str	r2, [r3, #28]
 8000f00:	4b1c      	ldr	r3, [pc, #112]	@ (8000f74 <HAL_UART_MspInit+0x1c0>)
 8000f02:	69da      	ldr	r2, [r3, #28]
 8000f04:	2380      	movs	r3, #128	@ 0x80
 8000f06:	02db      	lsls	r3, r3, #11
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	4b19      	ldr	r3, [pc, #100]	@ (8000f74 <HAL_UART_MspInit+0x1c0>)
 8000f10:	695a      	ldr	r2, [r3, #20]
 8000f12:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <HAL_UART_MspInit+0x1c0>)
 8000f14:	2180      	movs	r1, #128	@ 0x80
 8000f16:	02c9      	lsls	r1, r1, #11
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	615a      	str	r2, [r3, #20]
 8000f1c:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <HAL_UART_MspInit+0x1c0>)
 8000f1e:	695a      	ldr	r2, [r3, #20]
 8000f20:	2380      	movs	r3, #128	@ 0x80
 8000f22:	02db      	lsls	r3, r3, #11
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f2a:	211c      	movs	r1, #28
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	22c0      	movs	r2, #192	@ 0xc0
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	2202      	movs	r2, #2
 8000f38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2203      	movs	r2, #3
 8000f44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2204      	movs	r2, #4
 8000f4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f8c <HAL_UART_MspInit+0x1d8>)
 8000f50:	0019      	movs	r1, r3
 8000f52:	0010      	movs	r0, r2
 8000f54:	f000 fd7c 	bl	8001a50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	201d      	movs	r0, #29
 8000f5e:	f000 f9bf 	bl	80012e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000f62:	201d      	movs	r0, #29
 8000f64:	f000 f9d1 	bl	800130a <HAL_NVIC_EnableIRQ>
}
 8000f68:	46c0      	nop			@ (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b00d      	add	sp, #52	@ 0x34
 8000f6e:	bd90      	pop	{r4, r7, pc}
 8000f70:	40004400 	.word	0x40004400
 8000f74:	40021000 	.word	0x40021000
 8000f78:	20000184 	.word	0x20000184
 8000f7c:	40020044 	.word	0x40020044
 8000f80:	200001c8 	.word	0x200001c8
 8000f84:	40020058 	.word	0x40020058
 8000f88:	40004800 	.word	0x40004800
 8000f8c:	48000400 	.word	0x48000400

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f94:	46c0      	nop			@ (mov r8, r8)
 8000f96:	e7fd      	b.n	8000f94 <NMI_Handler+0x4>

08000f98 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9c:	46c0      	nop			@ (mov r8, r8)
 8000f9e:	e7fd      	b.n	8000f9c <HardFault_Handler+0x4>

08000fa0 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fa4:	46c0      	nop			@ (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb8:	f000 f8ca 	bl	8001150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbc:	46c0      	nop			@ (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
 * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
 */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f000 fa7f 	bl	80014ce <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000fd0:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f000 fa7b 	bl	80014ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000fd8:	46c0      	nop			@ (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	20000184 	.word	0x20000184
 8000fe4:	200001c8 	.word	0x200001c8

08000fe8 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fec:	4b03      	ldr	r3, [pc, #12]	@ (8000ffc <TIM2_IRQHandler+0x14>)
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f001 fd60 	bl	8002ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ff4:	46c0      	nop			@ (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	2000002c 	.word	0x2000002c

08001000 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
 */
void USART2_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001004:	4b03      	ldr	r3, [pc, #12]	@ (8001014 <USART2_IRQHandler+0x14>)
 8001006:	0018      	movs	r0, r3
 8001008:	f002 faa8 	bl	800355c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800100c:	46c0      	nop			@ (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			@ (mov r8, r8)
 8001014:	20000074 	.word	0x20000074

08001018 <USART3_4_IRQHandler>:

/**
 * @brief This function handles USART3 and USART4 global interrupts.
 */
void USART3_4_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800101c:	4b03      	ldr	r3, [pc, #12]	@ (800102c <USART3_4_IRQHandler+0x14>)
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fa9c 	bl	800355c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8001024:	46c0      	nop			@ (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			@ (mov r8, r8)
 800102c:	200000fc 	.word	0x200000fc

08001030 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001034:	46c0      	nop			@ (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_TIM_PeriodElapsedCallback>:
#include "main.h"

uint8_t g_timer_ms_1000 = DISABLE;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	2380      	movs	r3, #128	@ 0x80
 800104a:	05db      	lsls	r3, r3, #23
 800104c:	429a      	cmp	r2, r3
 800104e:	d106      	bne.n	800105e <HAL_TIM_PeriodElapsedCallback+0x22>
    {
        if(g_timer_ms_1000 == DISABLE)
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <HAL_TIM_PeriodElapsedCallback+0x22>
        {
            g_timer_ms_1000 = ENABLE;
 8001058:	4b03      	ldr	r3, [pc, #12]	@ (8001068 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800105a:	2201      	movs	r2, #1
 800105c:	701a      	strb	r2, [r3, #0]
        }
    }
}
 800105e:	46c0      	nop			@ (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	b002      	add	sp, #8
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	2000020c 	.word	0x2000020c

0800106c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800106c:	480d      	ldr	r0, [pc, #52]	@ (80010a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800106e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001070:	f7ff ffde 	bl	8001030 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001074:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001076:	490d      	ldr	r1, [pc, #52]	@ (80010ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001078:	4a0d      	ldr	r2, [pc, #52]	@ (80010b0 <LoopForever+0xe>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800108c:	4c0a      	ldr	r4, [pc, #40]	@ (80010b8 <LoopForever+0x16>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800109a:	f003 f965 	bl	8004368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800109e:	f7ff fa0b 	bl	80004b8 <main>

080010a2 <LoopForever>:

LoopForever:
    b LoopForever
 80010a2:	e7fe      	b.n	80010a2 <LoopForever>
  ldr   r0, =_estack
 80010a4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010b0:	08004424 	.word	0x08004424
  ldr r2, =_sbss
 80010b4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010b8:	20000238 	.word	0x20000238

080010bc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC1_COMP_IRQHandler>
	...

080010c0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c4:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <HAL_Init+0x24>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_Init+0x24>)
 80010ca:	2110      	movs	r1, #16
 80010cc:	430a      	orrs	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 f809 	bl	80010e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d6:	f7ff fe25 	bl	8000d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	0018      	movs	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			@ (mov r8, r8)
 80010e4:	40022000 	.word	0x40022000

080010e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f0:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <HAL_InitTick+0x5c>)
 80010f2:	681c      	ldr	r4, [r3, #0]
 80010f4:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <HAL_InitTick+0x60>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	0019      	movs	r1, r3
 80010fa:	23fa      	movs	r3, #250	@ 0xfa
 80010fc:	0098      	lsls	r0, r3, #2
 80010fe:	f7ff f803 	bl	8000108 <__udivsi3>
 8001102:	0003      	movs	r3, r0
 8001104:	0019      	movs	r1, r3
 8001106:	0020      	movs	r0, r4
 8001108:	f7fe fffe 	bl	8000108 <__udivsi3>
 800110c:	0003      	movs	r3, r0
 800110e:	0018      	movs	r0, r3
 8001110:	f000 f90b 	bl	800132a <HAL_SYSTICK_Config>
 8001114:	1e03      	subs	r3, r0, #0
 8001116:	d001      	beq.n	800111c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e00f      	b.n	800113c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b03      	cmp	r3, #3
 8001120:	d80b      	bhi.n	800113a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	2301      	movs	r3, #1
 8001126:	425b      	negs	r3, r3
 8001128:	2200      	movs	r2, #0
 800112a:	0018      	movs	r0, r3
 800112c:	f000 f8d8 	bl	80012e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <HAL_InitTick+0x64>)
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
}
 800113c:	0018      	movs	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	b003      	add	sp, #12
 8001142:	bd90      	pop	{r4, r7, pc}
 8001144:	20000000 	.word	0x20000000
 8001148:	20000008 	.word	0x20000008
 800114c:	20000004 	.word	0x20000004

08001150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b05      	ldr	r3, [pc, #20]	@ (800116c <HAL_IncTick+0x1c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	001a      	movs	r2, r3
 800115a:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <HAL_IncTick+0x20>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	18d2      	adds	r2, r2, r3
 8001160:	4b03      	ldr	r3, [pc, #12]	@ (8001170 <HAL_IncTick+0x20>)
 8001162:	601a      	str	r2, [r3, #0]
}
 8001164:	46c0      	nop			@ (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	46c0      	nop			@ (mov r8, r8)
 800116c:	20000008 	.word	0x20000008
 8001170:	20000210 	.word	0x20000210

08001174 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b02      	ldr	r3, [pc, #8]	@ (8001184 <HAL_GetTick+0x10>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	0018      	movs	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	20000210 	.word	0x20000210

08001188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	0002      	movs	r2, r0
 8001190:	1dfb      	adds	r3, r7, #7
 8001192:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001194:	1dfb      	adds	r3, r7, #7
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b7f      	cmp	r3, #127	@ 0x7f
 800119a:	d809      	bhi.n	80011b0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119c:	1dfb      	adds	r3, r7, #7
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	001a      	movs	r2, r3
 80011a2:	231f      	movs	r3, #31
 80011a4:	401a      	ands	r2, r3
 80011a6:	4b04      	ldr	r3, [pc, #16]	@ (80011b8 <__NVIC_EnableIRQ+0x30>)
 80011a8:	2101      	movs	r1, #1
 80011aa:	4091      	lsls	r1, r2
 80011ac:	000a      	movs	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]
  }
}
 80011b0:	46c0      	nop			@ (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b002      	add	sp, #8
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	e000e100 	.word	0xe000e100

080011bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	0002      	movs	r2, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80011d0:	d828      	bhi.n	8001224 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001290 <__NVIC_SetPriority+0xd4>)
 80011d4:	1dfb      	adds	r3, r7, #7
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	33c0      	adds	r3, #192	@ 0xc0
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	589b      	ldr	r3, [r3, r2]
 80011e2:	1dfa      	adds	r2, r7, #7
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	0011      	movs	r1, r2
 80011e8:	2203      	movs	r2, #3
 80011ea:	400a      	ands	r2, r1
 80011ec:	00d2      	lsls	r2, r2, #3
 80011ee:	21ff      	movs	r1, #255	@ 0xff
 80011f0:	4091      	lsls	r1, r2
 80011f2:	000a      	movs	r2, r1
 80011f4:	43d2      	mvns	r2, r2
 80011f6:	401a      	ands	r2, r3
 80011f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	019b      	lsls	r3, r3, #6
 80011fe:	22ff      	movs	r2, #255	@ 0xff
 8001200:	401a      	ands	r2, r3
 8001202:	1dfb      	adds	r3, r7, #7
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	0018      	movs	r0, r3
 8001208:	2303      	movs	r3, #3
 800120a:	4003      	ands	r3, r0
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001210:	481f      	ldr	r0, [pc, #124]	@ (8001290 <__NVIC_SetPriority+0xd4>)
 8001212:	1dfb      	adds	r3, r7, #7
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b25b      	sxtb	r3, r3
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	430a      	orrs	r2, r1
 800121c:	33c0      	adds	r3, #192	@ 0xc0
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001222:	e031      	b.n	8001288 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001224:	4a1b      	ldr	r2, [pc, #108]	@ (8001294 <__NVIC_SetPriority+0xd8>)
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	0019      	movs	r1, r3
 800122c:	230f      	movs	r3, #15
 800122e:	400b      	ands	r3, r1
 8001230:	3b08      	subs	r3, #8
 8001232:	089b      	lsrs	r3, r3, #2
 8001234:	3306      	adds	r3, #6
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	18d3      	adds	r3, r2, r3
 800123a:	3304      	adds	r3, #4
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	1dfa      	adds	r2, r7, #7
 8001240:	7812      	ldrb	r2, [r2, #0]
 8001242:	0011      	movs	r1, r2
 8001244:	2203      	movs	r2, #3
 8001246:	400a      	ands	r2, r1
 8001248:	00d2      	lsls	r2, r2, #3
 800124a:	21ff      	movs	r1, #255	@ 0xff
 800124c:	4091      	lsls	r1, r2
 800124e:	000a      	movs	r2, r1
 8001250:	43d2      	mvns	r2, r2
 8001252:	401a      	ands	r2, r3
 8001254:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	019b      	lsls	r3, r3, #6
 800125a:	22ff      	movs	r2, #255	@ 0xff
 800125c:	401a      	ands	r2, r3
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	0018      	movs	r0, r3
 8001264:	2303      	movs	r3, #3
 8001266:	4003      	ands	r3, r0
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800126c:	4809      	ldr	r0, [pc, #36]	@ (8001294 <__NVIC_SetPriority+0xd8>)
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	001c      	movs	r4, r3
 8001274:	230f      	movs	r3, #15
 8001276:	4023      	ands	r3, r4
 8001278:	3b08      	subs	r3, #8
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	430a      	orrs	r2, r1
 800127e:	3306      	adds	r3, #6
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	18c3      	adds	r3, r0, r3
 8001284:	3304      	adds	r3, #4
 8001286:	601a      	str	r2, [r3, #0]
}
 8001288:	46c0      	nop			@ (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	b003      	add	sp, #12
 800128e:	bd90      	pop	{r4, r7, pc}
 8001290:	e000e100 	.word	0xe000e100
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	1e5a      	subs	r2, r3, #1
 80012a4:	2380      	movs	r3, #128	@ 0x80
 80012a6:	045b      	lsls	r3, r3, #17
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d301      	bcc.n	80012b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ac:	2301      	movs	r3, #1
 80012ae:	e010      	b.n	80012d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b0:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <SysTick_Config+0x44>)
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	3a01      	subs	r2, #1
 80012b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b8:	2301      	movs	r3, #1
 80012ba:	425b      	negs	r3, r3
 80012bc:	2103      	movs	r1, #3
 80012be:	0018      	movs	r0, r3
 80012c0:	f7ff ff7c 	bl	80011bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <SysTick_Config+0x44>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <SysTick_Config+0x44>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	210f      	movs	r1, #15
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	1c02      	adds	r2, r0, #0
 80012f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	0011      	movs	r1, r2
 80012fc:	0018      	movs	r0, r3
 80012fe:	f7ff ff5d 	bl	80011bc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001302:	46c0      	nop			@ (mov r8, r8)
 8001304:	46bd      	mov	sp, r7
 8001306:	b004      	add	sp, #16
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	0002      	movs	r2, r0
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001316:	1dfb      	adds	r3, r7, #7
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b25b      	sxtb	r3, r3
 800131c:	0018      	movs	r0, r3
 800131e:	f7ff ff33 	bl	8001188 <__NVIC_EnableIRQ>
}
 8001322:	46c0      	nop			@ (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	b002      	add	sp, #8
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	0018      	movs	r0, r3
 8001336:	f7ff ffaf 	bl	8001298 <SysTick_Config>
 800133a:	0003      	movs	r3, r0
}
 800133c:	0018      	movs	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	b002      	add	sp, #8
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e036      	b.n	80013c8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2221      	movs	r2, #33	@ 0x21
 800135e:	2102      	movs	r1, #2
 8001360:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4a18      	ldr	r2, [pc, #96]	@ (80013d0 <HAL_DMA_Init+0x8c>)
 800136e:	4013      	ands	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800137a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001386:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001392:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	0018      	movs	r0, r3
 80013ac:	f000 f932 	bl	8001614 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2221      	movs	r2, #33	@ 0x21
 80013ba:	2101      	movs	r1, #1
 80013bc:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2220      	movs	r2, #32
 80013c2:	2100      	movs	r1, #0
 80013c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	0018      	movs	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b004      	add	sp, #16
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	ffffc00f 	.word	0xffffc00f

080013d4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2221      	movs	r2, #33	@ 0x21
 80013e0:	5c9b      	ldrb	r3, [r3, r2]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d008      	beq.n	80013fa <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2204      	movs	r2, #4
 80013ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2220      	movs	r2, #32
 80013f2:	2100      	movs	r1, #0
 80013f4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e020      	b.n	800143c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	210e      	movs	r1, #14
 8001406:	438a      	bics	r2, r1
 8001408:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2101      	movs	r1, #1
 8001416:	438a      	bics	r2, r1
 8001418:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001422:	2101      	movs	r1, #1
 8001424:	4091      	lsls	r1, r2
 8001426:	000a      	movs	r2, r1
 8001428:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2221      	movs	r2, #33	@ 0x21
 800142e:	2101      	movs	r1, #1
 8001430:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2220      	movs	r2, #32
 8001436:	2100      	movs	r1, #0
 8001438:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	0018      	movs	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	b002      	add	sp, #8
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800144c:	210f      	movs	r1, #15
 800144e:	187b      	adds	r3, r7, r1
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2221      	movs	r2, #33	@ 0x21
 8001458:	5c9b      	ldrb	r3, [r3, r2]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d006      	beq.n	800146e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2204      	movs	r2, #4
 8001464:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001466:	187b      	adds	r3, r7, r1
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
 800146c:	e028      	b.n	80014c0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	210e      	movs	r1, #14
 800147a:	438a      	bics	r2, r1
 800147c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2101      	movs	r1, #1
 800148a:	438a      	bics	r2, r1
 800148c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001496:	2101      	movs	r1, #1
 8001498:	4091      	lsls	r1, r2
 800149a:	000a      	movs	r2, r1
 800149c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2221      	movs	r2, #33	@ 0x21
 80014a2:	2101      	movs	r1, #1
 80014a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2220      	movs	r2, #32
 80014aa:	2100      	movs	r1, #0
 80014ac:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d004      	beq.n	80014c0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	0010      	movs	r0, r2
 80014be:	4798      	blx	r3
    }
  }
  return status;
 80014c0:	230f      	movs	r3, #15
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	781b      	ldrb	r3, [r3, #0]
}
 80014c6:	0018      	movs	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b004      	add	sp, #16
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b084      	sub	sp, #16
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ea:	2204      	movs	r2, #4
 80014ec:	409a      	lsls	r2, r3
 80014ee:	0013      	movs	r3, r2
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	4013      	ands	r3, r2
 80014f4:	d024      	beq.n	8001540 <HAL_DMA_IRQHandler+0x72>
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	2204      	movs	r2, #4
 80014fa:	4013      	ands	r3, r2
 80014fc:	d020      	beq.n	8001540 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2220      	movs	r2, #32
 8001506:	4013      	ands	r3, r2
 8001508:	d107      	bne.n	800151a <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2104      	movs	r1, #4
 8001516:	438a      	bics	r2, r1
 8001518:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001522:	2104      	movs	r1, #4
 8001524:	4091      	lsls	r1, r2
 8001526:	000a      	movs	r2, r1
 8001528:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800152e:	2b00      	cmp	r3, #0
 8001530:	d100      	bne.n	8001534 <HAL_DMA_IRQHandler+0x66>
 8001532:	e06a      	b.n	800160a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	0010      	movs	r0, r2
 800153c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800153e:	e064      	b.n	800160a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001544:	2202      	movs	r2, #2
 8001546:	409a      	lsls	r2, r3
 8001548:	0013      	movs	r3, r2
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	4013      	ands	r3, r2
 800154e:	d02b      	beq.n	80015a8 <HAL_DMA_IRQHandler+0xda>
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	2202      	movs	r2, #2
 8001554:	4013      	ands	r3, r2
 8001556:	d027      	beq.n	80015a8 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2220      	movs	r2, #32
 8001560:	4013      	ands	r3, r2
 8001562:	d10b      	bne.n	800157c <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	210a      	movs	r1, #10
 8001570:	438a      	bics	r2, r1
 8001572:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2221      	movs	r2, #33	@ 0x21
 8001578:	2101      	movs	r1, #1
 800157a:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001584:	2102      	movs	r1, #2
 8001586:	4091      	lsls	r1, r2
 8001588:	000a      	movs	r2, r1
 800158a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2220      	movs	r2, #32
 8001590:	2100      	movs	r1, #0
 8001592:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001598:	2b00      	cmp	r3, #0
 800159a:	d036      	beq.n	800160a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	0010      	movs	r0, r2
 80015a4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80015a6:	e030      	b.n	800160a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ac:	2208      	movs	r2, #8
 80015ae:	409a      	lsls	r2, r3
 80015b0:	0013      	movs	r3, r2
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	4013      	ands	r3, r2
 80015b6:	d028      	beq.n	800160a <HAL_DMA_IRQHandler+0x13c>
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2208      	movs	r2, #8
 80015bc:	4013      	ands	r3, r2
 80015be:	d024      	beq.n	800160a <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	210e      	movs	r1, #14
 80015cc:	438a      	bics	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015d8:	2101      	movs	r1, #1
 80015da:	4091      	lsls	r1, r2
 80015dc:	000a      	movs	r2, r1
 80015de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2221      	movs	r2, #33	@ 0x21
 80015ea:	2101      	movs	r1, #1
 80015ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2220      	movs	r2, #32
 80015f2:	2100      	movs	r1, #0
 80015f4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d005      	beq.n	800160a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	0010      	movs	r0, r2
 8001606:	4798      	blx	r3
    }
  }
}
 8001608:	e7ff      	b.n	800160a <HAL_DMA_IRQHandler+0x13c>
 800160a:	46c0      	nop			@ (mov r8, r8)
 800160c:	46bd      	mov	sp, r7
 800160e:	b004      	add	sp, #16
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a08      	ldr	r2, [pc, #32]	@ (8001644 <DMA_CalcBaseAndBitshift+0x30>)
 8001622:	4694      	mov	ip, r2
 8001624:	4463      	add	r3, ip
 8001626:	2114      	movs	r1, #20
 8001628:	0018      	movs	r0, r3
 800162a:	f7fe fd6d 	bl	8000108 <__udivsi3>
 800162e:	0003      	movs	r3, r0
 8001630:	009a      	lsls	r2, r3, #2
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a03      	ldr	r2, [pc, #12]	@ (8001648 <DMA_CalcBaseAndBitshift+0x34>)
 800163a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 800163c:	46c0      	nop			@ (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	b002      	add	sp, #8
 8001642:	bd80      	pop	{r7, pc}
 8001644:	bffdfff8 	.word	0xbffdfff8
 8001648:	40020000 	.word	0x40020000

0800164c <HAL_FLASH_Program>:
 * @param  Data          Specifie the data to be programmed
 *
 * @retval HAL_StatusTypeDef HAL Status
 */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800164c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164e:	b087      	sub	sp, #28
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	603a      	str	r2, [r7, #0]
 8001658:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800165a:	2317      	movs	r3, #23
 800165c:	18fb      	adds	r3, r7, r3
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8001662:	2316      	movs	r3, #22
 8001664:	18fb      	adds	r3, r7, r3
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 800166a:	2315      	movs	r3, #21
 800166c:	18fb      	adds	r3, r7, r3
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001672:	4b3e      	ldr	r3, [pc, #248]	@ (800176c <HAL_FLASH_Program+0x120>)
 8001674:	7e1b      	ldrb	r3, [r3, #24]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_FLASH_Program+0x32>
 800167a:	2302      	movs	r3, #2
 800167c:	e072      	b.n	8001764 <HAL_FLASH_Program+0x118>
 800167e:	4b3b      	ldr	r3, [pc, #236]	@ (800176c <HAL_FLASH_Program+0x120>)
 8001680:	2201      	movs	r2, #1
 8001682:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001684:	2317      	movs	r3, #23
 8001686:	18fe      	adds	r6, r7, r3
 8001688:	4b39      	ldr	r3, [pc, #228]	@ (8001770 <HAL_FLASH_Program+0x124>)
 800168a:	0018      	movs	r0, r3
 800168c:	f000 f8c4 	bl	8001818 <FLASH_WaitForLastOperation>
 8001690:	0003      	movs	r3, r0
 8001692:	7033      	strb	r3, [r6, #0]

  if (status == HAL_OK)
 8001694:	2317      	movs	r3, #23
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d15c      	bne.n	8001758 <HAL_FLASH_Program+0x10c>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d104      	bne.n	80016ae <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80016a4:	2315      	movs	r3, #21
 80016a6:	18fb      	adds	r3, r7, r3
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
 80016ac:	e00b      	b.n	80016c6 <HAL_FLASH_Program+0x7a>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d104      	bne.n	80016be <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80016b4:	2315      	movs	r3, #21
 80016b6:	18fb      	adds	r3, r7, r3
 80016b8:	2202      	movs	r2, #2
 80016ba:	701a      	strb	r2, [r3, #0]
 80016bc:	e003      	b.n	80016c6 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80016be:	2315      	movs	r3, #21
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	2204      	movs	r2, #4
 80016c4:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 80016c6:	2316      	movs	r3, #22
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
 80016ce:	e039      	b.n	8001744 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U * index)), (uint16_t)(Data >> (16U * index)));
 80016d0:	2116      	movs	r1, #22
 80016d2:	187b      	adds	r3, r7, r1
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	005a      	lsls	r2, r3, #1
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	18d0      	adds	r0, r2, r3
 80016dc:	187b      	adds	r3, r7, r1
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	011b      	lsls	r3, r3, #4
 80016e2:	001a      	movs	r2, r3
 80016e4:	3a20      	subs	r2, #32
 80016e6:	2a00      	cmp	r2, #0
 80016e8:	db03      	blt.n	80016f2 <HAL_FLASH_Program+0xa6>
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	40d1      	lsrs	r1, r2
 80016ee:	000c      	movs	r4, r1
 80016f0:	e008      	b.n	8001704 <HAL_FLASH_Program+0xb8>
 80016f2:	2220      	movs	r2, #32
 80016f4:	1ad2      	subs	r2, r2, r3
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	4091      	lsls	r1, r2
 80016fa:	000a      	movs	r2, r1
 80016fc:	6839      	ldr	r1, [r7, #0]
 80016fe:	40d9      	lsrs	r1, r3
 8001700:	000c      	movs	r4, r1
 8001702:	4314      	orrs	r4, r2
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	40da      	lsrs	r2, r3
 8001708:	0015      	movs	r5, r2
 800170a:	b2a3      	uxth	r3, r4
 800170c:	0019      	movs	r1, r3
 800170e:	f000 f867 	bl	80017e0 <FLASH_Program_HalfWord>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001712:	2317      	movs	r3, #23
 8001714:	18fe      	adds	r6, r7, r3
 8001716:	4b16      	ldr	r3, [pc, #88]	@ (8001770 <HAL_FLASH_Program+0x124>)
 8001718:	0018      	movs	r0, r3
 800171a:	f000 f87d 	bl	8001818 <FLASH_WaitForLastOperation>
 800171e:	0003      	movs	r3, r0
 8001720:	7033      	strb	r3, [r6, #0]

      /* If the program operation is completed, disable the PG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001722:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <HAL_FLASH_Program+0x128>)
 8001724:	691a      	ldr	r2, [r3, #16]
 8001726:	4b13      	ldr	r3, [pc, #76]	@ (8001774 <HAL_FLASH_Program+0x128>)
 8001728:	2101      	movs	r1, #1
 800172a:	438a      	bics	r2, r1
 800172c:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 800172e:	2317      	movs	r3, #23
 8001730:	18fb      	adds	r3, r7, r3
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10e      	bne.n	8001756 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8001738:	2116      	movs	r1, #22
 800173a:	187b      	adds	r3, r7, r1
 800173c:	781a      	ldrb	r2, [r3, #0]
 800173e:	187b      	adds	r3, r7, r1
 8001740:	3201      	adds	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
 8001744:	2316      	movs	r3, #22
 8001746:	18fa      	adds	r2, r7, r3
 8001748:	2315      	movs	r3, #21
 800174a:	18fb      	adds	r3, r7, r3
 800174c:	7812      	ldrb	r2, [r2, #0]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	d3bd      	bcc.n	80016d0 <HAL_FLASH_Program+0x84>
 8001754:	e000      	b.n	8001758 <HAL_FLASH_Program+0x10c>
      {
        break;
 8001756:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001758:	4b04      	ldr	r3, [pc, #16]	@ (800176c <HAL_FLASH_Program+0x120>)
 800175a:	2200      	movs	r2, #0
 800175c:	761a      	strb	r2, [r3, #24]

  return status;
 800175e:	2317      	movs	r3, #23
 8001760:	18fb      	adds	r3, r7, r3
 8001762:	781b      	ldrb	r3, [r3, #0]
}
 8001764:	0018      	movs	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	b007      	add	sp, #28
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	20000218 	.word	0x20000218
 8001770:	0000c350 	.word	0x0000c350
 8001774:	40022000 	.word	0x40022000

08001778 <HAL_FLASH_Unlock>:
/**
 * @brief  Unlock the FLASH control register access
 * @retval HAL Status
 */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800177e:	1dfb      	adds	r3, r7, #7
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <HAL_FLASH_Unlock+0x40>)
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	2280      	movs	r2, #128	@ 0x80
 800178a:	4013      	ands	r3, r2
 800178c:	d00d      	beq.n	80017aa <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800178e:	4b0a      	ldr	r3, [pc, #40]	@ (80017b8 <HAL_FLASH_Unlock+0x40>)
 8001790:	4a0a      	ldr	r2, [pc, #40]	@ (80017bc <HAL_FLASH_Unlock+0x44>)
 8001792:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001794:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <HAL_FLASH_Unlock+0x40>)
 8001796:	4a0a      	ldr	r2, [pc, #40]	@ (80017c0 <HAL_FLASH_Unlock+0x48>)
 8001798:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800179a:	4b07      	ldr	r3, [pc, #28]	@ (80017b8 <HAL_FLASH_Unlock+0x40>)
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	2280      	movs	r2, #128	@ 0x80
 80017a0:	4013      	ands	r3, r2
 80017a2:	d002      	beq.n	80017aa <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80017a4:	1dfb      	adds	r3, r7, #7
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80017aa:	1dfb      	adds	r3, r7, #7
 80017ac:	781b      	ldrb	r3, [r3, #0]
}
 80017ae:	0018      	movs	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	b002      	add	sp, #8
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	40022000 	.word	0x40022000
 80017bc:	45670123 	.word	0x45670123
 80017c0:	cdef89ab 	.word	0xcdef89ab

080017c4 <HAL_FLASH_Lock>:
/**
 * @brief  Locks the FLASH control register access
 * @retval HAL Status
 */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80017c8:	4b04      	ldr	r3, [pc, #16]	@ (80017dc <HAL_FLASH_Lock+0x18>)
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <HAL_FLASH_Lock+0x18>)
 80017ce:	2180      	movs	r1, #128	@ 0x80
 80017d0:	430a      	orrs	r2, r1
 80017d2:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	0018      	movs	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40022000 	.word	0x40022000

080017e0 <FLASH_Program_HalfWord>:
 * @param  Address specify the address to be programmed.
 * @param  Data    specify the data to be programmed.
 * @retval None
 */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	000a      	movs	r2, r1
 80017ea:	1cbb      	adds	r3, r7, #2
 80017ec:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80017ee:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <FLASH_Program_HalfWord+0x30>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	61da      	str	r2, [r3, #28]

  /* Proceed to program the new data */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80017f4:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <FLASH_Program_HalfWord+0x34>)
 80017f6:	691a      	ldr	r2, [r3, #16]
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <FLASH_Program_HalfWord+0x34>)
 80017fa:	2101      	movs	r1, #1
 80017fc:	430a      	orrs	r2, r1
 80017fe:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t *)Address = Data;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	1cba      	adds	r2, r7, #2
 8001804:	8812      	ldrh	r2, [r2, #0]
 8001806:	801a      	strh	r2, [r3, #0]
}
 8001808:	46c0      	nop			@ (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	b002      	add	sp, #8
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000218 	.word	0x20000218
 8001814:	40022000 	.word	0x40022000

08001818 <FLASH_WaitForLastOperation>:
 * @brief  Wait for a FLASH operation to complete.
 * @param  Timeout  maximum flash operation timeout
 * @retval HAL Status
 */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001820:	f7ff fca8 	bl	8001174 <HAL_GetTick>
 8001824:	0003      	movs	r3, r0
 8001826:	60fb      	str	r3, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001828:	e00f      	b.n	800184a <FLASH_WaitForLastOperation+0x32>
  {
    if (Timeout != HAL_MAX_DELAY)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3301      	adds	r3, #1
 800182e:	d00c      	beq.n	800184a <FLASH_WaitForLastOperation+0x32>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d007      	beq.n	8001846 <FLASH_WaitForLastOperation+0x2e>
 8001836:	f7ff fc9d 	bl	8001174 <HAL_GetTick>
 800183a:	0002      	movs	r2, r0
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	429a      	cmp	r2, r3
 8001844:	d201      	bcs.n	800184a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e01f      	b.n	800188a <FLASH_WaitForLastOperation+0x72>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800184a:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <FLASH_WaitForLastOperation+0x7c>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2201      	movs	r2, #1
 8001850:	4013      	ands	r3, r2
 8001852:	2b01      	cmp	r3, #1
 8001854:	d0e9      	beq.n	800182a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001856:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <FLASH_WaitForLastOperation+0x7c>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2220      	movs	r2, #32
 800185c:	4013      	ands	r3, r2
 800185e:	2b20      	cmp	r3, #32
 8001860:	d102      	bne.n	8001868 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001862:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <FLASH_WaitForLastOperation+0x7c>)
 8001864:	2220      	movs	r2, #32
 8001866:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||
 8001868:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <FLASH_WaitForLastOperation+0x7c>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	2210      	movs	r2, #16
 800186e:	4013      	ands	r3, r2
 8001870:	2b10      	cmp	r3, #16
 8001872:	d005      	beq.n	8001880 <FLASH_WaitForLastOperation+0x68>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001874:	4b07      	ldr	r3, [pc, #28]	@ (8001894 <FLASH_WaitForLastOperation+0x7c>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2204      	movs	r2, #4
 800187a:	4013      	ands	r3, r2
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||
 800187c:	2b04      	cmp	r3, #4
 800187e:	d103      	bne.n	8001888 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001880:	f000 f80a 	bl	8001898 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	0018      	movs	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	b004      	add	sp, #16
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			@ (mov r8, r8)
 8001894:	40022000 	.word	0x40022000

08001898 <FLASH_SetErrorCode>:
/**
 * @brief  Set the specific FLASH error flag.
 * @retval None
 */
static void FLASH_SetErrorCode(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80018a2:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <FLASH_SetErrorCode+0x58>)
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	2210      	movs	r2, #16
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b10      	cmp	r3, #16
 80018ac:	d109      	bne.n	80018c2 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80018ae:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <FLASH_SetErrorCode+0x5c>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	2202      	movs	r2, #2
 80018b4:	431a      	orrs	r2, r3
 80018b6:	4b0f      	ldr	r3, [pc, #60]	@ (80018f4 <FLASH_SetErrorCode+0x5c>)
 80018b8:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2210      	movs	r2, #16
 80018be:	4313      	orrs	r3, r2
 80018c0:	607b      	str	r3, [r7, #4]
  }
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80018c2:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <FLASH_SetErrorCode+0x58>)
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	2204      	movs	r2, #4
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d109      	bne.n	80018e2 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80018ce:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <FLASH_SetErrorCode+0x5c>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	2201      	movs	r2, #1
 80018d4:	431a      	orrs	r2, r3
 80018d6:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <FLASH_SetErrorCode+0x5c>)
 80018d8:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2204      	movs	r2, #4
 80018de:	4313      	orrs	r3, r2
 80018e0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80018e2:	4b03      	ldr	r3, [pc, #12]	@ (80018f0 <FLASH_SetErrorCode+0x58>)
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	60da      	str	r2, [r3, #12]
}
 80018e8:	46c0      	nop			@ (mov r8, r8)
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b002      	add	sp, #8
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40022000 	.word	0x40022000
 80018f4:	20000218 	.word	0x20000218

080018f8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80018f8:	b5b0      	push	{r4, r5, r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001902:	230f      	movs	r3, #15
 8001904:	18fb      	adds	r3, r7, r3
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800190e:	4b32      	ldr	r3, [pc, #200]	@ (80019d8 <HAL_FLASHEx_Erase+0xe0>)
 8001910:	7e1b      	ldrb	r3, [r3, #24]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d101      	bne.n	800191a <HAL_FLASHEx_Erase+0x22>
 8001916:	2302      	movs	r3, #2
 8001918:	e05a      	b.n	80019d0 <HAL_FLASHEx_Erase+0xd8>
 800191a:	4b2f      	ldr	r3, [pc, #188]	@ (80019d8 <HAL_FLASHEx_Erase+0xe0>)
 800191c:	2201      	movs	r2, #1
 800191e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d116      	bne.n	8001956 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001928:	4b2c      	ldr	r3, [pc, #176]	@ (80019dc <HAL_FLASHEx_Erase+0xe4>)
 800192a:	0018      	movs	r0, r3
 800192c:	f7ff ff74 	bl	8001818 <FLASH_WaitForLastOperation>
 8001930:	1e03      	subs	r3, r0, #0
 8001932:	d147      	bne.n	80019c4 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8001934:	f000 f856 	bl	80019e4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001938:	230f      	movs	r3, #15
 800193a:	18fc      	adds	r4, r7, r3
 800193c:	4b27      	ldr	r3, [pc, #156]	@ (80019dc <HAL_FLASHEx_Erase+0xe4>)
 800193e:	0018      	movs	r0, r3
 8001940:	f7ff ff6a 	bl	8001818 <FLASH_WaitForLastOperation>
 8001944:	0003      	movs	r3, r0
 8001946:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001948:	4b25      	ldr	r3, [pc, #148]	@ (80019e0 <HAL_FLASHEx_Erase+0xe8>)
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	4b24      	ldr	r3, [pc, #144]	@ (80019e0 <HAL_FLASHEx_Erase+0xe8>)
 800194e:	2104      	movs	r1, #4
 8001950:	438a      	bics	r2, r1
 8001952:	611a      	str	r2, [r3, #16]
 8001954:	e036      	b.n	80019c4 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001956:	4b21      	ldr	r3, [pc, #132]	@ (80019dc <HAL_FLASHEx_Erase+0xe4>)
 8001958:	0018      	movs	r0, r3
 800195a:	f7ff ff5d 	bl	8001818 <FLASH_WaitForLastOperation>
 800195e:	1e03      	subs	r3, r0, #0
 8001960:	d130      	bne.n	80019c4 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	4252      	negs	r2, r2
 8001968:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	e01f      	b.n	80019b2 <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	0018      	movs	r0, r3
 8001976:	f000 f84d 	bl	8001a14 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800197a:	250f      	movs	r5, #15
 800197c:	197c      	adds	r4, r7, r5
 800197e:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <HAL_FLASHEx_Erase+0xe4>)
 8001980:	0018      	movs	r0, r3
 8001982:	f7ff ff49 	bl	8001818 <FLASH_WaitForLastOperation>
 8001986:	0003      	movs	r3, r0
 8001988:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800198a:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <HAL_FLASHEx_Erase+0xe8>)
 800198c:	691a      	ldr	r2, [r3, #16]
 800198e:	4b14      	ldr	r3, [pc, #80]	@ (80019e0 <HAL_FLASHEx_Erase+0xe8>)
 8001990:	2102      	movs	r1, #2
 8001992:	438a      	bics	r2, r1
 8001994:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8001996:	197b      	adds	r3, r7, r5
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	601a      	str	r2, [r3, #0]
            break;
 80019a4:	e00e      	b.n	80019c4 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	2280      	movs	r2, #128	@ 0x80
 80019aa:	0112      	lsls	r2, r2, #4
 80019ac:	4694      	mov	ip, r2
 80019ae:	4463      	add	r3, ip
 80019b0:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	02da      	lsls	r2, r3, #11
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	18d3      	adds	r3, r2, r3
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d3d6      	bcc.n	8001972 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80019c4:	4b04      	ldr	r3, [pc, #16]	@ (80019d8 <HAL_FLASHEx_Erase+0xe0>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	761a      	strb	r2, [r3, #24]

  return status;
 80019ca:	230f      	movs	r3, #15
 80019cc:	18fb      	adds	r3, r7, r3
 80019ce:	781b      	ldrb	r3, [r3, #0]
}
 80019d0:	0018      	movs	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b004      	add	sp, #16
 80019d6:	bdb0      	pop	{r4, r5, r7, pc}
 80019d8:	20000218 	.word	0x20000218
 80019dc:	0000c350 	.word	0x0000c350
 80019e0:	40022000 	.word	0x40022000

080019e4 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80019e8:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <FLASH_MassErase+0x28>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80019ee:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <FLASH_MassErase+0x2c>)
 80019f0:	691a      	ldr	r2, [r3, #16]
 80019f2:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <FLASH_MassErase+0x2c>)
 80019f4:	2104      	movs	r1, #4
 80019f6:	430a      	orrs	r2, r1
 80019f8:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80019fa:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <FLASH_MassErase+0x2c>)
 80019fc:	691a      	ldr	r2, [r3, #16]
 80019fe:	4b04      	ldr	r3, [pc, #16]	@ (8001a10 <FLASH_MassErase+0x2c>)
 8001a00:	2140      	movs	r1, #64	@ 0x40
 8001a02:	430a      	orrs	r2, r1
 8001a04:	611a      	str	r2, [r3, #16]
}
 8001a06:	46c0      	nop			@ (mov r8, r8)
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000218 	.word	0x20000218
 8001a10:	40022000 	.word	0x40022000

08001a14 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <FLASH_PageErase+0x34>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001a22:	4b0a      	ldr	r3, [pc, #40]	@ (8001a4c <FLASH_PageErase+0x38>)
 8001a24:	691a      	ldr	r2, [r3, #16]
 8001a26:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <FLASH_PageErase+0x38>)
 8001a28:	2102      	movs	r1, #2
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001a2e:	4b07      	ldr	r3, [pc, #28]	@ (8001a4c <FLASH_PageErase+0x38>)
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001a34:	4b05      	ldr	r3, [pc, #20]	@ (8001a4c <FLASH_PageErase+0x38>)
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <FLASH_PageErase+0x38>)
 8001a3a:	2140      	movs	r1, #64	@ 0x40
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	611a      	str	r2, [r3, #16]
}
 8001a40:	46c0      	nop			@ (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b002      	add	sp, #8
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000218 	.word	0x20000218
 8001a4c:	40022000 	.word	0x40022000

08001a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a5e:	e155      	b.n	8001d0c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2101      	movs	r1, #1
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4091      	lsls	r1, r2
 8001a6a:	000a      	movs	r2, r1
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d100      	bne.n	8001a78 <HAL_GPIO_Init+0x28>
 8001a76:	e146      	b.n	8001d06 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d005      	beq.n	8001a90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2203      	movs	r2, #3
 8001a8a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d130      	bne.n	8001af2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	0013      	movs	r3, r2
 8001aa0:	43da      	mvns	r2, r3
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	0013      	movs	r3, r2
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	409a      	lsls	r2, r3
 8001acc:	0013      	movs	r3, r2
 8001ace:	43da      	mvns	r2, r3
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	091b      	lsrs	r3, r3, #4
 8001adc:	2201      	movs	r2, #1
 8001ade:	401a      	ands	r2, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	0013      	movs	r3, r2
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2203      	movs	r2, #3
 8001af8:	4013      	ands	r3, r2
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d017      	beq.n	8001b2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	2203      	movs	r2, #3
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	0013      	movs	r3, r2
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	0013      	movs	r3, r2
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2203      	movs	r2, #3
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d123      	bne.n	8001b82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	08da      	lsrs	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3208      	adds	r2, #8
 8001b42:	0092      	lsls	r2, r2, #2
 8001b44:	58d3      	ldr	r3, [r2, r3]
 8001b46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	2207      	movs	r2, #7
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	220f      	movs	r2, #15
 8001b52:	409a      	lsls	r2, r3
 8001b54:	0013      	movs	r3, r2
 8001b56:	43da      	mvns	r2, r3
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	691a      	ldr	r2, [r3, #16]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2107      	movs	r1, #7
 8001b66:	400b      	ands	r3, r1
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	0013      	movs	r3, r2
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	08da      	lsrs	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3208      	adds	r2, #8
 8001b7c:	0092      	lsls	r2, r2, #2
 8001b7e:	6939      	ldr	r1, [r7, #16]
 8001b80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	0013      	movs	r3, r2
 8001b92:	43da      	mvns	r2, r3
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4013      	ands	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	401a      	ands	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	0013      	movs	r3, r2
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	23c0      	movs	r3, #192	@ 0xc0
 8001bbc:	029b      	lsls	r3, r3, #10
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d100      	bne.n	8001bc4 <HAL_GPIO_Init+0x174>
 8001bc2:	e0a0      	b.n	8001d06 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc4:	4b57      	ldr	r3, [pc, #348]	@ (8001d24 <HAL_GPIO_Init+0x2d4>)
 8001bc6:	699a      	ldr	r2, [r3, #24]
 8001bc8:	4b56      	ldr	r3, [pc, #344]	@ (8001d24 <HAL_GPIO_Init+0x2d4>)
 8001bca:	2101      	movs	r1, #1
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	619a      	str	r2, [r3, #24]
 8001bd0:	4b54      	ldr	r3, [pc, #336]	@ (8001d24 <HAL_GPIO_Init+0x2d4>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bdc:	4a52      	ldr	r2, [pc, #328]	@ (8001d28 <HAL_GPIO_Init+0x2d8>)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	089b      	lsrs	r3, r3, #2
 8001be2:	3302      	adds	r3, #2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	589b      	ldr	r3, [r3, r2]
 8001be8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2203      	movs	r2, #3
 8001bee:	4013      	ands	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	220f      	movs	r2, #15
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	0013      	movs	r3, r2
 8001bf8:	43da      	mvns	r2, r3
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	2390      	movs	r3, #144	@ 0x90
 8001c04:	05db      	lsls	r3, r3, #23
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d019      	beq.n	8001c3e <HAL_GPIO_Init+0x1ee>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a47      	ldr	r2, [pc, #284]	@ (8001d2c <HAL_GPIO_Init+0x2dc>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d013      	beq.n	8001c3a <HAL_GPIO_Init+0x1ea>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a46      	ldr	r2, [pc, #280]	@ (8001d30 <HAL_GPIO_Init+0x2e0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00d      	beq.n	8001c36 <HAL_GPIO_Init+0x1e6>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a45      	ldr	r2, [pc, #276]	@ (8001d34 <HAL_GPIO_Init+0x2e4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d007      	beq.n	8001c32 <HAL_GPIO_Init+0x1e2>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a44      	ldr	r2, [pc, #272]	@ (8001d38 <HAL_GPIO_Init+0x2e8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d101      	bne.n	8001c2e <HAL_GPIO_Init+0x1de>
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	e008      	b.n	8001c40 <HAL_GPIO_Init+0x1f0>
 8001c2e:	2305      	movs	r3, #5
 8001c30:	e006      	b.n	8001c40 <HAL_GPIO_Init+0x1f0>
 8001c32:	2303      	movs	r3, #3
 8001c34:	e004      	b.n	8001c40 <HAL_GPIO_Init+0x1f0>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e002      	b.n	8001c40 <HAL_GPIO_Init+0x1f0>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <HAL_GPIO_Init+0x1f0>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	2103      	movs	r1, #3
 8001c44:	400a      	ands	r2, r1
 8001c46:	0092      	lsls	r2, r2, #2
 8001c48:	4093      	lsls	r3, r2
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c50:	4935      	ldr	r1, [pc, #212]	@ (8001d28 <HAL_GPIO_Init+0x2d8>)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	089b      	lsrs	r3, r3, #2
 8001c56:	3302      	adds	r3, #2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c5e:	4b37      	ldr	r3, [pc, #220]	@ (8001d3c <HAL_GPIO_Init+0x2ec>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	43da      	mvns	r2, r3
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	2380      	movs	r3, #128	@ 0x80
 8001c74:	035b      	lsls	r3, r3, #13
 8001c76:	4013      	ands	r3, r2
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c82:	4b2e      	ldr	r3, [pc, #184]	@ (8001d3c <HAL_GPIO_Init+0x2ec>)
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001c88:	4b2c      	ldr	r3, [pc, #176]	@ (8001d3c <HAL_GPIO_Init+0x2ec>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	43da      	mvns	r2, r3
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	2380      	movs	r3, #128	@ 0x80
 8001c9e:	039b      	lsls	r3, r3, #14
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cac:	4b23      	ldr	r3, [pc, #140]	@ (8001d3c <HAL_GPIO_Init+0x2ec>)
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001cb2:	4b22      	ldr	r3, [pc, #136]	@ (8001d3c <HAL_GPIO_Init+0x2ec>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	2380      	movs	r3, #128	@ 0x80
 8001cc8:	029b      	lsls	r3, r3, #10
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cd6:	4b19      	ldr	r3, [pc, #100]	@ (8001d3c <HAL_GPIO_Init+0x2ec>)
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001cdc:	4b17      	ldr	r3, [pc, #92]	@ (8001d3c <HAL_GPIO_Init+0x2ec>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	43da      	mvns	r2, r3
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	2380      	movs	r3, #128	@ 0x80
 8001cf2:	025b      	lsls	r3, r3, #9
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d00:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <HAL_GPIO_Init+0x2ec>)
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	40da      	lsrs	r2, r3
 8001d14:	1e13      	subs	r3, r2, #0
 8001d16:	d000      	beq.n	8001d1a <HAL_GPIO_Init+0x2ca>
 8001d18:	e6a2      	b.n	8001a60 <HAL_GPIO_Init+0x10>
  } 
}
 8001d1a:	46c0      	nop			@ (mov r8, r8)
 8001d1c:	46c0      	nop			@ (mov r8, r8)
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b006      	add	sp, #24
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40010000 	.word	0x40010000
 8001d2c:	48000400 	.word	0x48000400
 8001d30:	48000800 	.word	0x48000800
 8001d34:	48000c00 	.word	0x48000c00
 8001d38:	48001000 	.word	0x48001000
 8001d3c:	40010400 	.word	0x40010400

08001d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	0008      	movs	r0, r1
 8001d4a:	0011      	movs	r1, r2
 8001d4c:	1cbb      	adds	r3, r7, #2
 8001d4e:	1c02      	adds	r2, r0, #0
 8001d50:	801a      	strh	r2, [r3, #0]
 8001d52:	1c7b      	adds	r3, r7, #1
 8001d54:	1c0a      	adds	r2, r1, #0
 8001d56:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d58:	1c7b      	adds	r3, r7, #1
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d004      	beq.n	8001d6a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d60:	1cbb      	adds	r3, r7, #2
 8001d62:	881a      	ldrh	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d68:	e003      	b.n	8001d72 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d6a:	1cbb      	adds	r3, r7, #2
 8001d6c:	881a      	ldrh	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d72:	46c0      	nop			@ (mov r8, r8)
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b002      	add	sp, #8
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	000a      	movs	r2, r1
 8001d84:	1cbb      	adds	r3, r7, #2
 8001d86:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d8e:	1cbb      	adds	r3, r7, #2
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4013      	ands	r3, r2
 8001d96:	041a      	lsls	r2, r3, #16
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	1cb9      	adds	r1, r7, #2
 8001d9e:	8809      	ldrh	r1, [r1, #0]
 8001da0:	400b      	ands	r3, r1
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	619a      	str	r2, [r3, #24]
}
 8001da8:	46c0      	nop			@ (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b004      	add	sp, #16
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d102      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	f000 fb76 	bl	80024b0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d100      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x20>
 8001dce:	e08e      	b.n	8001eee <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001dd0:	4bc5      	ldr	r3, [pc, #788]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	220c      	movs	r2, #12
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d00e      	beq.n	8001dfa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ddc:	4bc2      	ldr	r3, [pc, #776]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	220c      	movs	r2, #12
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d117      	bne.n	8001e18 <HAL_RCC_OscConfig+0x68>
 8001de8:	4bbf      	ldr	r3, [pc, #764]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	23c0      	movs	r3, #192	@ 0xc0
 8001dee:	025b      	lsls	r3, r3, #9
 8001df0:	401a      	ands	r2, r3
 8001df2:	2380      	movs	r3, #128	@ 0x80
 8001df4:	025b      	lsls	r3, r3, #9
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d10e      	bne.n	8001e18 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfa:	4bbb      	ldr	r3, [pc, #748]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	2380      	movs	r3, #128	@ 0x80
 8001e00:	029b      	lsls	r3, r3, #10
 8001e02:	4013      	ands	r3, r2
 8001e04:	d100      	bne.n	8001e08 <HAL_RCC_OscConfig+0x58>
 8001e06:	e071      	b.n	8001eec <HAL_RCC_OscConfig+0x13c>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d000      	beq.n	8001e12 <HAL_RCC_OscConfig+0x62>
 8001e10:	e06c      	b.n	8001eec <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	f000 fb4c 	bl	80024b0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d107      	bne.n	8001e30 <HAL_RCC_OscConfig+0x80>
 8001e20:	4bb1      	ldr	r3, [pc, #708]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4bb0      	ldr	r3, [pc, #704]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001e26:	2180      	movs	r1, #128	@ 0x80
 8001e28:	0249      	lsls	r1, r1, #9
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	e02f      	b.n	8001e90 <HAL_RCC_OscConfig+0xe0>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10c      	bne.n	8001e52 <HAL_RCC_OscConfig+0xa2>
 8001e38:	4bab      	ldr	r3, [pc, #684]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4baa      	ldr	r3, [pc, #680]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001e3e:	49ab      	ldr	r1, [pc, #684]	@ (80020ec <HAL_RCC_OscConfig+0x33c>)
 8001e40:	400a      	ands	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	4ba8      	ldr	r3, [pc, #672]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4ba7      	ldr	r3, [pc, #668]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001e4a:	49a9      	ldr	r1, [pc, #676]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	e01e      	b.n	8001e90 <HAL_RCC_OscConfig+0xe0>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b05      	cmp	r3, #5
 8001e58:	d10e      	bne.n	8001e78 <HAL_RCC_OscConfig+0xc8>
 8001e5a:	4ba3      	ldr	r3, [pc, #652]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4ba2      	ldr	r3, [pc, #648]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001e60:	2180      	movs	r1, #128	@ 0x80
 8001e62:	02c9      	lsls	r1, r1, #11
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	4b9f      	ldr	r3, [pc, #636]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b9e      	ldr	r3, [pc, #632]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001e6e:	2180      	movs	r1, #128	@ 0x80
 8001e70:	0249      	lsls	r1, r1, #9
 8001e72:	430a      	orrs	r2, r1
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	e00b      	b.n	8001e90 <HAL_RCC_OscConfig+0xe0>
 8001e78:	4b9b      	ldr	r3, [pc, #620]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b9a      	ldr	r3, [pc, #616]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001e7e:	499b      	ldr	r1, [pc, #620]	@ (80020ec <HAL_RCC_OscConfig+0x33c>)
 8001e80:	400a      	ands	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	4b98      	ldr	r3, [pc, #608]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b97      	ldr	r3, [pc, #604]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001e8a:	4999      	ldr	r1, [pc, #612]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001e8c:	400a      	ands	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d014      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff f96c 	bl	8001174 <HAL_GetTick>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea2:	f7ff f967 	bl	8001174 <HAL_GetTick>
 8001ea6:	0002      	movs	r2, r0
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b64      	cmp	r3, #100	@ 0x64
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e2fd      	b.n	80024b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb4:	4b8c      	ldr	r3, [pc, #560]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2380      	movs	r3, #128	@ 0x80
 8001eba:	029b      	lsls	r3, r3, #10
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0xf2>
 8001ec0:	e015      	b.n	8001eee <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec2:	f7ff f957 	bl	8001174 <HAL_GetTick>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7ff f952 	bl	8001174 <HAL_GetTick>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	@ 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e2e8      	b.n	80024b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ede:	4b82      	ldr	r3, [pc, #520]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	@ 0x80
 8001ee4:	029b      	lsls	r3, r3, #10
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x11c>
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d100      	bne.n	8001efa <HAL_RCC_OscConfig+0x14a>
 8001ef8:	e06c      	b.n	8001fd4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001efa:	4b7b      	ldr	r3, [pc, #492]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	220c      	movs	r2, #12
 8001f00:	4013      	ands	r3, r2
 8001f02:	d00e      	beq.n	8001f22 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f04:	4b78      	ldr	r3, [pc, #480]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	220c      	movs	r2, #12
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d11f      	bne.n	8001f50 <HAL_RCC_OscConfig+0x1a0>
 8001f10:	4b75      	ldr	r3, [pc, #468]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	23c0      	movs	r3, #192	@ 0xc0
 8001f16:	025b      	lsls	r3, r3, #9
 8001f18:	401a      	ands	r2, r3
 8001f1a:	2380      	movs	r3, #128	@ 0x80
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d116      	bne.n	8001f50 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f22:	4b71      	ldr	r3, [pc, #452]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2202      	movs	r2, #2
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_OscConfig+0x188>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e2bb      	b.n	80024b0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f38:	4b6b      	ldr	r3, [pc, #428]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	22f8      	movs	r2, #248	@ 0xf8
 8001f3e:	4393      	bics	r3, r2
 8001f40:	0019      	movs	r1, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	00da      	lsls	r2, r3, #3
 8001f48:	4b67      	ldr	r3, [pc, #412]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4e:	e041      	b.n	8001fd4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d024      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f58:	4b63      	ldr	r3, [pc, #396]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b62      	ldr	r3, [pc, #392]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001f5e:	2101      	movs	r1, #1
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff f906 	bl	8001174 <HAL_GetTick>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f6e:	f7ff f901 	bl	8001174 <HAL_GetTick>
 8001f72:	0002      	movs	r2, r0
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e297      	b.n	80024b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f80:	4b59      	ldr	r3, [pc, #356]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2202      	movs	r2, #2
 8001f86:	4013      	ands	r3, r2
 8001f88:	d0f1      	beq.n	8001f6e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8a:	4b57      	ldr	r3, [pc, #348]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	22f8      	movs	r2, #248	@ 0xf8
 8001f90:	4393      	bics	r3, r2
 8001f92:	0019      	movs	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	00da      	lsls	r2, r3, #3
 8001f9a:	4b53      	ldr	r3, [pc, #332]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	e018      	b.n	8001fd4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa2:	4b51      	ldr	r3, [pc, #324]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	4b50      	ldr	r3, [pc, #320]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001fa8:	2101      	movs	r1, #1
 8001faa:	438a      	bics	r2, r1
 8001fac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fae:	f7ff f8e1 	bl	8001174 <HAL_GetTick>
 8001fb2:	0003      	movs	r3, r0
 8001fb4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb8:	f7ff f8dc 	bl	8001174 <HAL_GetTick>
 8001fbc:	0002      	movs	r2, r0
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e272      	b.n	80024b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	4b47      	ldr	r3, [pc, #284]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d1f1      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2208      	movs	r2, #8
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d036      	beq.n	800204c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d019      	beq.n	800201a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe6:	4b40      	ldr	r3, [pc, #256]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001fe8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fea:	4b3f      	ldr	r3, [pc, #252]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001fec:	2101      	movs	r1, #1
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff f8bf 	bl	8001174 <HAL_GetTick>
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffc:	f7ff f8ba 	bl	8001174 <HAL_GetTick>
 8002000:	0002      	movs	r2, r0
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e250      	b.n	80024b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200e:	4b36      	ldr	r3, [pc, #216]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8002010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002012:	2202      	movs	r2, #2
 8002014:	4013      	ands	r3, r2
 8002016:	d0f1      	beq.n	8001ffc <HAL_RCC_OscConfig+0x24c>
 8002018:	e018      	b.n	800204c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800201a:	4b33      	ldr	r3, [pc, #204]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 800201c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800201e:	4b32      	ldr	r3, [pc, #200]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8002020:	2101      	movs	r1, #1
 8002022:	438a      	bics	r2, r1
 8002024:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002026:	f7ff f8a5 	bl	8001174 <HAL_GetTick>
 800202a:	0003      	movs	r3, r0
 800202c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002030:	f7ff f8a0 	bl	8001174 <HAL_GetTick>
 8002034:	0002      	movs	r2, r0
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e236      	b.n	80024b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002042:	4b29      	ldr	r3, [pc, #164]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8002044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002046:	2202      	movs	r2, #2
 8002048:	4013      	ands	r3, r2
 800204a:	d1f1      	bne.n	8002030 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2204      	movs	r2, #4
 8002052:	4013      	ands	r3, r2
 8002054:	d100      	bne.n	8002058 <HAL_RCC_OscConfig+0x2a8>
 8002056:	e0b5      	b.n	80021c4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002058:	201f      	movs	r0, #31
 800205a:	183b      	adds	r3, r7, r0
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002060:	4b21      	ldr	r3, [pc, #132]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8002062:	69da      	ldr	r2, [r3, #28]
 8002064:	2380      	movs	r3, #128	@ 0x80
 8002066:	055b      	lsls	r3, r3, #21
 8002068:	4013      	ands	r3, r2
 800206a:	d110      	bne.n	800208e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206c:	4b1e      	ldr	r3, [pc, #120]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 800206e:	69da      	ldr	r2, [r3, #28]
 8002070:	4b1d      	ldr	r3, [pc, #116]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 8002072:	2180      	movs	r1, #128	@ 0x80
 8002074:	0549      	lsls	r1, r1, #21
 8002076:	430a      	orrs	r2, r1
 8002078:	61da      	str	r2, [r3, #28]
 800207a:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 800207c:	69da      	ldr	r2, [r3, #28]
 800207e:	2380      	movs	r3, #128	@ 0x80
 8002080:	055b      	lsls	r3, r3, #21
 8002082:	4013      	ands	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002088:	183b      	adds	r3, r7, r0
 800208a:	2201      	movs	r2, #1
 800208c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208e:	4b19      	ldr	r3, [pc, #100]	@ (80020f4 <HAL_RCC_OscConfig+0x344>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	2380      	movs	r3, #128	@ 0x80
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4013      	ands	r3, r2
 8002098:	d11a      	bne.n	80020d0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209a:	4b16      	ldr	r3, [pc, #88]	@ (80020f4 <HAL_RCC_OscConfig+0x344>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	4b15      	ldr	r3, [pc, #84]	@ (80020f4 <HAL_RCC_OscConfig+0x344>)
 80020a0:	2180      	movs	r1, #128	@ 0x80
 80020a2:	0049      	lsls	r1, r1, #1
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a8:	f7ff f864 	bl	8001174 <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b2:	f7ff f85f 	bl	8001174 <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b64      	cmp	r3, #100	@ 0x64
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e1f5      	b.n	80024b0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c4:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <HAL_RCC_OscConfig+0x344>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	2380      	movs	r3, #128	@ 0x80
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	4013      	ands	r3, r2
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d10f      	bne.n	80020f8 <HAL_RCC_OscConfig+0x348>
 80020d8:	4b03      	ldr	r3, [pc, #12]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 80020da:	6a1a      	ldr	r2, [r3, #32]
 80020dc:	4b02      	ldr	r3, [pc, #8]	@ (80020e8 <HAL_RCC_OscConfig+0x338>)
 80020de:	2101      	movs	r1, #1
 80020e0:	430a      	orrs	r2, r1
 80020e2:	621a      	str	r2, [r3, #32]
 80020e4:	e036      	b.n	8002154 <HAL_RCC_OscConfig+0x3a4>
 80020e6:	46c0      	nop			@ (mov r8, r8)
 80020e8:	40021000 	.word	0x40021000
 80020ec:	fffeffff 	.word	0xfffeffff
 80020f0:	fffbffff 	.word	0xfffbffff
 80020f4:	40007000 	.word	0x40007000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10c      	bne.n	800211a <HAL_RCC_OscConfig+0x36a>
 8002100:	4bca      	ldr	r3, [pc, #808]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 8002102:	6a1a      	ldr	r2, [r3, #32]
 8002104:	4bc9      	ldr	r3, [pc, #804]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 8002106:	2101      	movs	r1, #1
 8002108:	438a      	bics	r2, r1
 800210a:	621a      	str	r2, [r3, #32]
 800210c:	4bc7      	ldr	r3, [pc, #796]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 800210e:	6a1a      	ldr	r2, [r3, #32]
 8002110:	4bc6      	ldr	r3, [pc, #792]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 8002112:	2104      	movs	r1, #4
 8002114:	438a      	bics	r2, r1
 8002116:	621a      	str	r2, [r3, #32]
 8002118:	e01c      	b.n	8002154 <HAL_RCC_OscConfig+0x3a4>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b05      	cmp	r3, #5
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0x38c>
 8002122:	4bc2      	ldr	r3, [pc, #776]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 8002124:	6a1a      	ldr	r2, [r3, #32]
 8002126:	4bc1      	ldr	r3, [pc, #772]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 8002128:	2104      	movs	r1, #4
 800212a:	430a      	orrs	r2, r1
 800212c:	621a      	str	r2, [r3, #32]
 800212e:	4bbf      	ldr	r3, [pc, #764]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 8002130:	6a1a      	ldr	r2, [r3, #32]
 8002132:	4bbe      	ldr	r3, [pc, #760]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 8002134:	2101      	movs	r1, #1
 8002136:	430a      	orrs	r2, r1
 8002138:	621a      	str	r2, [r3, #32]
 800213a:	e00b      	b.n	8002154 <HAL_RCC_OscConfig+0x3a4>
 800213c:	4bbb      	ldr	r3, [pc, #748]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 800213e:	6a1a      	ldr	r2, [r3, #32]
 8002140:	4bba      	ldr	r3, [pc, #744]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 8002142:	2101      	movs	r1, #1
 8002144:	438a      	bics	r2, r1
 8002146:	621a      	str	r2, [r3, #32]
 8002148:	4bb8      	ldr	r3, [pc, #736]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 800214a:	6a1a      	ldr	r2, [r3, #32]
 800214c:	4bb7      	ldr	r3, [pc, #732]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 800214e:	2104      	movs	r1, #4
 8002150:	438a      	bics	r2, r1
 8002152:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d014      	beq.n	8002186 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215c:	f7ff f80a 	bl	8001174 <HAL_GetTick>
 8002160:	0003      	movs	r3, r0
 8002162:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002164:	e009      	b.n	800217a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002166:	f7ff f805 	bl	8001174 <HAL_GetTick>
 800216a:	0002      	movs	r2, r0
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	4aaf      	ldr	r2, [pc, #700]	@ (8002430 <HAL_RCC_OscConfig+0x680>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e19a      	b.n	80024b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217a:	4bac      	ldr	r3, [pc, #688]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	2202      	movs	r2, #2
 8002180:	4013      	ands	r3, r2
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x3b6>
 8002184:	e013      	b.n	80021ae <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002186:	f7fe fff5 	bl	8001174 <HAL_GetTick>
 800218a:	0003      	movs	r3, r0
 800218c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800218e:	e009      	b.n	80021a4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002190:	f7fe fff0 	bl	8001174 <HAL_GetTick>
 8002194:	0002      	movs	r2, r0
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	4aa5      	ldr	r2, [pc, #660]	@ (8002430 <HAL_RCC_OscConfig+0x680>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e185      	b.n	80024b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a4:	4ba1      	ldr	r3, [pc, #644]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	2202      	movs	r2, #2
 80021aa:	4013      	ands	r3, r2
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021ae:	231f      	movs	r3, #31
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d105      	bne.n	80021c4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b8:	4b9c      	ldr	r3, [pc, #624]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 80021ba:	69da      	ldr	r2, [r3, #28]
 80021bc:	4b9b      	ldr	r3, [pc, #620]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 80021be:	499d      	ldr	r1, [pc, #628]	@ (8002434 <HAL_RCC_OscConfig+0x684>)
 80021c0:	400a      	ands	r2, r1
 80021c2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2210      	movs	r2, #16
 80021ca:	4013      	ands	r3, r2
 80021cc:	d063      	beq.n	8002296 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d12a      	bne.n	800222c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80021d6:	4b95      	ldr	r3, [pc, #596]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 80021d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021da:	4b94      	ldr	r3, [pc, #592]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 80021dc:	2104      	movs	r1, #4
 80021de:	430a      	orrs	r2, r1
 80021e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80021e2:	4b92      	ldr	r3, [pc, #584]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 80021e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021e6:	4b91      	ldr	r3, [pc, #580]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 80021e8:	2101      	movs	r1, #1
 80021ea:	430a      	orrs	r2, r1
 80021ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ee:	f7fe ffc1 	bl	8001174 <HAL_GetTick>
 80021f2:	0003      	movs	r3, r0
 80021f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80021f8:	f7fe ffbc 	bl	8001174 <HAL_GetTick>
 80021fc:	0002      	movs	r2, r0
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e152      	b.n	80024b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800220a:	4b88      	ldr	r3, [pc, #544]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 800220c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800220e:	2202      	movs	r2, #2
 8002210:	4013      	ands	r3, r2
 8002212:	d0f1      	beq.n	80021f8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002214:	4b85      	ldr	r3, [pc, #532]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 8002216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002218:	22f8      	movs	r2, #248	@ 0xf8
 800221a:	4393      	bics	r3, r2
 800221c:	0019      	movs	r1, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	00da      	lsls	r2, r3, #3
 8002224:	4b81      	ldr	r3, [pc, #516]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 8002226:	430a      	orrs	r2, r1
 8002228:	635a      	str	r2, [r3, #52]	@ 0x34
 800222a:	e034      	b.n	8002296 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	3305      	adds	r3, #5
 8002232:	d111      	bne.n	8002258 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002234:	4b7d      	ldr	r3, [pc, #500]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 8002236:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002238:	4b7c      	ldr	r3, [pc, #496]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 800223a:	2104      	movs	r1, #4
 800223c:	438a      	bics	r2, r1
 800223e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002240:	4b7a      	ldr	r3, [pc, #488]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 8002242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002244:	22f8      	movs	r2, #248	@ 0xf8
 8002246:	4393      	bics	r3, r2
 8002248:	0019      	movs	r1, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	00da      	lsls	r2, r3, #3
 8002250:	4b76      	ldr	r3, [pc, #472]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 8002252:	430a      	orrs	r2, r1
 8002254:	635a      	str	r2, [r3, #52]	@ 0x34
 8002256:	e01e      	b.n	8002296 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002258:	4b74      	ldr	r3, [pc, #464]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 800225a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800225c:	4b73      	ldr	r3, [pc, #460]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 800225e:	2104      	movs	r1, #4
 8002260:	430a      	orrs	r2, r1
 8002262:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002264:	4b71      	ldr	r3, [pc, #452]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 8002266:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002268:	4b70      	ldr	r3, [pc, #448]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 800226a:	2101      	movs	r1, #1
 800226c:	438a      	bics	r2, r1
 800226e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002270:	f7fe ff80 	bl	8001174 <HAL_GetTick>
 8002274:	0003      	movs	r3, r0
 8002276:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800227a:	f7fe ff7b 	bl	8001174 <HAL_GetTick>
 800227e:	0002      	movs	r2, r0
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e111      	b.n	80024b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800228c:	4b67      	ldr	r3, [pc, #412]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 800228e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002290:	2202      	movs	r2, #2
 8002292:	4013      	ands	r3, r2
 8002294:	d1f1      	bne.n	800227a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2220      	movs	r2, #32
 800229c:	4013      	ands	r3, r2
 800229e:	d05c      	beq.n	800235a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80022a0:	4b62      	ldr	r3, [pc, #392]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	220c      	movs	r2, #12
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b0c      	cmp	r3, #12
 80022aa:	d00e      	beq.n	80022ca <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80022ac:	4b5f      	ldr	r3, [pc, #380]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	220c      	movs	r2, #12
 80022b2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d114      	bne.n	80022e2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80022b8:	4b5c      	ldr	r3, [pc, #368]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	23c0      	movs	r3, #192	@ 0xc0
 80022be:	025b      	lsls	r3, r3, #9
 80022c0:	401a      	ands	r2, r3
 80022c2:	23c0      	movs	r3, #192	@ 0xc0
 80022c4:	025b      	lsls	r3, r3, #9
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d10b      	bne.n	80022e2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80022ca:	4b58      	ldr	r3, [pc, #352]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 80022cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022ce:	2380      	movs	r3, #128	@ 0x80
 80022d0:	029b      	lsls	r3, r3, #10
 80022d2:	4013      	ands	r3, r2
 80022d4:	d040      	beq.n	8002358 <HAL_RCC_OscConfig+0x5a8>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d03c      	beq.n	8002358 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0e6      	b.n	80024b0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d01b      	beq.n	8002322 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80022ea:	4b50      	ldr	r3, [pc, #320]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 80022ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022ee:	4b4f      	ldr	r3, [pc, #316]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 80022f0:	2180      	movs	r1, #128	@ 0x80
 80022f2:	0249      	lsls	r1, r1, #9
 80022f4:	430a      	orrs	r2, r1
 80022f6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7fe ff3c 	bl	8001174 <HAL_GetTick>
 80022fc:	0003      	movs	r3, r0
 80022fe:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002302:	f7fe ff37 	bl	8001174 <HAL_GetTick>
 8002306:	0002      	movs	r2, r0
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e0cd      	b.n	80024b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002314:	4b45      	ldr	r3, [pc, #276]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 8002316:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002318:	2380      	movs	r3, #128	@ 0x80
 800231a:	029b      	lsls	r3, r3, #10
 800231c:	4013      	ands	r3, r2
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x552>
 8002320:	e01b      	b.n	800235a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002322:	4b42      	ldr	r3, [pc, #264]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 8002324:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002326:	4b41      	ldr	r3, [pc, #260]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 8002328:	4943      	ldr	r1, [pc, #268]	@ (8002438 <HAL_RCC_OscConfig+0x688>)
 800232a:	400a      	ands	r2, r1
 800232c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232e:	f7fe ff21 	bl	8001174 <HAL_GetTick>
 8002332:	0003      	movs	r3, r0
 8002334:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002338:	f7fe ff1c 	bl	8001174 <HAL_GetTick>
 800233c:	0002      	movs	r2, r0
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e0b2      	b.n	80024b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800234a:	4b38      	ldr	r3, [pc, #224]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 800234c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800234e:	2380      	movs	r3, #128	@ 0x80
 8002350:	029b      	lsls	r3, r3, #10
 8002352:	4013      	ands	r3, r2
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x588>
 8002356:	e000      	b.n	800235a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002358:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235e:	2b00      	cmp	r3, #0
 8002360:	d100      	bne.n	8002364 <HAL_RCC_OscConfig+0x5b4>
 8002362:	e0a4      	b.n	80024ae <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002364:	4b31      	ldr	r3, [pc, #196]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	220c      	movs	r2, #12
 800236a:	4013      	ands	r3, r2
 800236c:	2b08      	cmp	r3, #8
 800236e:	d100      	bne.n	8002372 <HAL_RCC_OscConfig+0x5c2>
 8002370:	e078      	b.n	8002464 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002376:	2b02      	cmp	r3, #2
 8002378:	d14c      	bne.n	8002414 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237a:	4b2c      	ldr	r3, [pc, #176]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	4b2b      	ldr	r3, [pc, #172]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 8002380:	492e      	ldr	r1, [pc, #184]	@ (800243c <HAL_RCC_OscConfig+0x68c>)
 8002382:	400a      	ands	r2, r1
 8002384:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002386:	f7fe fef5 	bl	8001174 <HAL_GetTick>
 800238a:	0003      	movs	r3, r0
 800238c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002390:	f7fe fef0 	bl	8001174 <HAL_GetTick>
 8002394:	0002      	movs	r2, r0
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e086      	b.n	80024b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a2:	4b22      	ldr	r3, [pc, #136]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	2380      	movs	r3, #128	@ 0x80
 80023a8:	049b      	lsls	r3, r3, #18
 80023aa:	4013      	ands	r3, r2
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ae:	4b1f      	ldr	r3, [pc, #124]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 80023b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b2:	220f      	movs	r2, #15
 80023b4:	4393      	bics	r3, r2
 80023b6:	0019      	movs	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023bc:	4b1b      	ldr	r3, [pc, #108]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 80023be:	430a      	orrs	r2, r1
 80023c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80023c2:	4b1a      	ldr	r3, [pc, #104]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002440 <HAL_RCC_OscConfig+0x690>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	0019      	movs	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d4:	431a      	orrs	r2, r3
 80023d6:	4b15      	ldr	r3, [pc, #84]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 80023d8:	430a      	orrs	r2, r1
 80023da:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023dc:	4b13      	ldr	r3, [pc, #76]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b12      	ldr	r3, [pc, #72]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 80023e2:	2180      	movs	r1, #128	@ 0x80
 80023e4:	0449      	lsls	r1, r1, #17
 80023e6:	430a      	orrs	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ea:	f7fe fec3 	bl	8001174 <HAL_GetTick>
 80023ee:	0003      	movs	r3, r0
 80023f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f4:	f7fe febe 	bl	8001174 <HAL_GetTick>
 80023f8:	0002      	movs	r2, r0
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e054      	b.n	80024b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002406:	4b09      	ldr	r3, [pc, #36]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	2380      	movs	r3, #128	@ 0x80
 800240c:	049b      	lsls	r3, r3, #18
 800240e:	4013      	ands	r3, r2
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0x644>
 8002412:	e04c      	b.n	80024ae <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002414:	4b05      	ldr	r3, [pc, #20]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b04      	ldr	r3, [pc, #16]	@ (800242c <HAL_RCC_OscConfig+0x67c>)
 800241a:	4908      	ldr	r1, [pc, #32]	@ (800243c <HAL_RCC_OscConfig+0x68c>)
 800241c:	400a      	ands	r2, r1
 800241e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7fe fea8 	bl	8001174 <HAL_GetTick>
 8002424:	0003      	movs	r3, r0
 8002426:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002428:	e015      	b.n	8002456 <HAL_RCC_OscConfig+0x6a6>
 800242a:	46c0      	nop			@ (mov r8, r8)
 800242c:	40021000 	.word	0x40021000
 8002430:	00001388 	.word	0x00001388
 8002434:	efffffff 	.word	0xefffffff
 8002438:	fffeffff 	.word	0xfffeffff
 800243c:	feffffff 	.word	0xfeffffff
 8002440:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002444:	f7fe fe96 	bl	8001174 <HAL_GetTick>
 8002448:	0002      	movs	r2, r0
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e02c      	b.n	80024b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002456:	4b18      	ldr	r3, [pc, #96]	@ (80024b8 <HAL_RCC_OscConfig+0x708>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	2380      	movs	r3, #128	@ 0x80
 800245c:	049b      	lsls	r3, r3, #18
 800245e:	4013      	ands	r3, r2
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x694>
 8002462:	e024      	b.n	80024ae <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e01f      	b.n	80024b0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002470:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <HAL_RCC_OscConfig+0x708>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002476:	4b10      	ldr	r3, [pc, #64]	@ (80024b8 <HAL_RCC_OscConfig+0x708>)
 8002478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	23c0      	movs	r3, #192	@ 0xc0
 8002480:	025b      	lsls	r3, r3, #9
 8002482:	401a      	ands	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002488:	429a      	cmp	r2, r3
 800248a:	d10e      	bne.n	80024aa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	220f      	movs	r2, #15
 8002490:	401a      	ands	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002496:	429a      	cmp	r2, r3
 8002498:	d107      	bne.n	80024aa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	23f0      	movs	r3, #240	@ 0xf0
 800249e:	039b      	lsls	r3, r3, #14
 80024a0:	401a      	ands	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d001      	beq.n	80024ae <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	0018      	movs	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b008      	add	sp, #32
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000

080024bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0bf      	b.n	8002650 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d0:	4b61      	ldr	r3, [pc, #388]	@ (8002658 <HAL_RCC_ClockConfig+0x19c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2201      	movs	r2, #1
 80024d6:	4013      	ands	r3, r2
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d911      	bls.n	8002502 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b5e      	ldr	r3, [pc, #376]	@ (8002658 <HAL_RCC_ClockConfig+0x19c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2201      	movs	r2, #1
 80024e4:	4393      	bics	r3, r2
 80024e6:	0019      	movs	r1, r3
 80024e8:	4b5b      	ldr	r3, [pc, #364]	@ (8002658 <HAL_RCC_ClockConfig+0x19c>)
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f0:	4b59      	ldr	r3, [pc, #356]	@ (8002658 <HAL_RCC_ClockConfig+0x19c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2201      	movs	r2, #1
 80024f6:	4013      	ands	r3, r2
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d001      	beq.n	8002502 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e0a6      	b.n	8002650 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2202      	movs	r2, #2
 8002508:	4013      	ands	r3, r2
 800250a:	d015      	beq.n	8002538 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2204      	movs	r2, #4
 8002512:	4013      	ands	r3, r2
 8002514:	d006      	beq.n	8002524 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002516:	4b51      	ldr	r3, [pc, #324]	@ (800265c <HAL_RCC_ClockConfig+0x1a0>)
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	4b50      	ldr	r3, [pc, #320]	@ (800265c <HAL_RCC_ClockConfig+0x1a0>)
 800251c:	21e0      	movs	r1, #224	@ 0xe0
 800251e:	00c9      	lsls	r1, r1, #3
 8002520:	430a      	orrs	r2, r1
 8002522:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002524:	4b4d      	ldr	r3, [pc, #308]	@ (800265c <HAL_RCC_ClockConfig+0x1a0>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	22f0      	movs	r2, #240	@ 0xf0
 800252a:	4393      	bics	r3, r2
 800252c:	0019      	movs	r1, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	4b4a      	ldr	r3, [pc, #296]	@ (800265c <HAL_RCC_ClockConfig+0x1a0>)
 8002534:	430a      	orrs	r2, r1
 8002536:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2201      	movs	r2, #1
 800253e:	4013      	ands	r3, r2
 8002540:	d04c      	beq.n	80025dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d107      	bne.n	800255a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254a:	4b44      	ldr	r3, [pc, #272]	@ (800265c <HAL_RCC_ClockConfig+0x1a0>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	2380      	movs	r3, #128	@ 0x80
 8002550:	029b      	lsls	r3, r3, #10
 8002552:	4013      	ands	r3, r2
 8002554:	d120      	bne.n	8002598 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e07a      	b.n	8002650 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d107      	bne.n	8002572 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002562:	4b3e      	ldr	r3, [pc, #248]	@ (800265c <HAL_RCC_ClockConfig+0x1a0>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	2380      	movs	r3, #128	@ 0x80
 8002568:	049b      	lsls	r3, r3, #18
 800256a:	4013      	ands	r3, r2
 800256c:	d114      	bne.n	8002598 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e06e      	b.n	8002650 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b03      	cmp	r3, #3
 8002578:	d107      	bne.n	800258a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800257a:	4b38      	ldr	r3, [pc, #224]	@ (800265c <HAL_RCC_ClockConfig+0x1a0>)
 800257c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800257e:	2380      	movs	r3, #128	@ 0x80
 8002580:	029b      	lsls	r3, r3, #10
 8002582:	4013      	ands	r3, r2
 8002584:	d108      	bne.n	8002598 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e062      	b.n	8002650 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258a:	4b34      	ldr	r3, [pc, #208]	@ (800265c <HAL_RCC_ClockConfig+0x1a0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2202      	movs	r2, #2
 8002590:	4013      	ands	r3, r2
 8002592:	d101      	bne.n	8002598 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e05b      	b.n	8002650 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002598:	4b30      	ldr	r3, [pc, #192]	@ (800265c <HAL_RCC_ClockConfig+0x1a0>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2203      	movs	r2, #3
 800259e:	4393      	bics	r3, r2
 80025a0:	0019      	movs	r1, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	4b2d      	ldr	r3, [pc, #180]	@ (800265c <HAL_RCC_ClockConfig+0x1a0>)
 80025a8:	430a      	orrs	r2, r1
 80025aa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025ac:	f7fe fde2 	bl	8001174 <HAL_GetTick>
 80025b0:	0003      	movs	r3, r0
 80025b2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b4:	e009      	b.n	80025ca <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b6:	f7fe fddd 	bl	8001174 <HAL_GetTick>
 80025ba:	0002      	movs	r2, r0
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	4a27      	ldr	r2, [pc, #156]	@ (8002660 <HAL_RCC_ClockConfig+0x1a4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e042      	b.n	8002650 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ca:	4b24      	ldr	r3, [pc, #144]	@ (800265c <HAL_RCC_ClockConfig+0x1a0>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	220c      	movs	r2, #12
 80025d0:	401a      	ands	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	429a      	cmp	r2, r3
 80025da:	d1ec      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002658 <HAL_RCC_ClockConfig+0x19c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2201      	movs	r2, #1
 80025e2:	4013      	ands	r3, r2
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d211      	bcs.n	800260e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002658 <HAL_RCC_ClockConfig+0x19c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2201      	movs	r2, #1
 80025f0:	4393      	bics	r3, r2
 80025f2:	0019      	movs	r1, r3
 80025f4:	4b18      	ldr	r3, [pc, #96]	@ (8002658 <HAL_RCC_ClockConfig+0x19c>)
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fc:	4b16      	ldr	r3, [pc, #88]	@ (8002658 <HAL_RCC_ClockConfig+0x19c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2201      	movs	r2, #1
 8002602:	4013      	ands	r3, r2
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d001      	beq.n	800260e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e020      	b.n	8002650 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2204      	movs	r2, #4
 8002614:	4013      	ands	r3, r2
 8002616:	d009      	beq.n	800262c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002618:	4b10      	ldr	r3, [pc, #64]	@ (800265c <HAL_RCC_ClockConfig+0x1a0>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a11      	ldr	r2, [pc, #68]	@ (8002664 <HAL_RCC_ClockConfig+0x1a8>)
 800261e:	4013      	ands	r3, r2
 8002620:	0019      	movs	r1, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	4b0d      	ldr	r3, [pc, #52]	@ (800265c <HAL_RCC_ClockConfig+0x1a0>)
 8002628:	430a      	orrs	r2, r1
 800262a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800262c:	f000 f820 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 8002630:	0001      	movs	r1, r0
 8002632:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <HAL_RCC_ClockConfig+0x1a0>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	220f      	movs	r2, #15
 800263a:	4013      	ands	r3, r2
 800263c:	4a0a      	ldr	r2, [pc, #40]	@ (8002668 <HAL_RCC_ClockConfig+0x1ac>)
 800263e:	5cd3      	ldrb	r3, [r2, r3]
 8002640:	000a      	movs	r2, r1
 8002642:	40da      	lsrs	r2, r3
 8002644:	4b09      	ldr	r3, [pc, #36]	@ (800266c <HAL_RCC_ClockConfig+0x1b0>)
 8002646:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002648:	2003      	movs	r0, #3
 800264a:	f7fe fd4d 	bl	80010e8 <HAL_InitTick>
  
  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	0018      	movs	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	b004      	add	sp, #16
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40022000 	.word	0x40022000
 800265c:	40021000 	.word	0x40021000
 8002660:	00001388 	.word	0x00001388
 8002664:	fffff8ff 	.word	0xfffff8ff
 8002668:	080043e4 	.word	0x080043e4
 800266c:	20000000 	.word	0x20000000

08002670 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800268a:	4b2d      	ldr	r3, [pc, #180]	@ (8002740 <HAL_RCC_GetSysClockFreq+0xd0>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	220c      	movs	r2, #12
 8002694:	4013      	ands	r3, r2
 8002696:	2b0c      	cmp	r3, #12
 8002698:	d046      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0xb8>
 800269a:	d848      	bhi.n	800272e <HAL_RCC_GetSysClockFreq+0xbe>
 800269c:	2b04      	cmp	r3, #4
 800269e:	d002      	beq.n	80026a6 <HAL_RCC_GetSysClockFreq+0x36>
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d003      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x3c>
 80026a4:	e043      	b.n	800272e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026a6:	4b27      	ldr	r3, [pc, #156]	@ (8002744 <HAL_RCC_GetSysClockFreq+0xd4>)
 80026a8:	613b      	str	r3, [r7, #16]
      break;
 80026aa:	e043      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	0c9b      	lsrs	r3, r3, #18
 80026b0:	220f      	movs	r2, #15
 80026b2:	4013      	ands	r3, r2
 80026b4:	4a24      	ldr	r2, [pc, #144]	@ (8002748 <HAL_RCC_GetSysClockFreq+0xd8>)
 80026b6:	5cd3      	ldrb	r3, [r2, r3]
 80026b8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80026ba:	4b21      	ldr	r3, [pc, #132]	@ (8002740 <HAL_RCC_GetSysClockFreq+0xd0>)
 80026bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026be:	220f      	movs	r2, #15
 80026c0:	4013      	ands	r3, r2
 80026c2:	4a22      	ldr	r2, [pc, #136]	@ (800274c <HAL_RCC_GetSysClockFreq+0xdc>)
 80026c4:	5cd3      	ldrb	r3, [r2, r3]
 80026c6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	23c0      	movs	r3, #192	@ 0xc0
 80026cc:	025b      	lsls	r3, r3, #9
 80026ce:	401a      	ands	r2, r3
 80026d0:	2380      	movs	r3, #128	@ 0x80
 80026d2:	025b      	lsls	r3, r3, #9
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d109      	bne.n	80026ec <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	481a      	ldr	r0, [pc, #104]	@ (8002744 <HAL_RCC_GetSysClockFreq+0xd4>)
 80026dc:	f7fd fd14 	bl	8000108 <__udivsi3>
 80026e0:	0003      	movs	r3, r0
 80026e2:	001a      	movs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4353      	muls	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	e01a      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	23c0      	movs	r3, #192	@ 0xc0
 80026f0:	025b      	lsls	r3, r3, #9
 80026f2:	401a      	ands	r2, r3
 80026f4:	23c0      	movs	r3, #192	@ 0xc0
 80026f6:	025b      	lsls	r3, r3, #9
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d109      	bne.n	8002710 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	4814      	ldr	r0, [pc, #80]	@ (8002750 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002700:	f7fd fd02 	bl	8000108 <__udivsi3>
 8002704:	0003      	movs	r3, r0
 8002706:	001a      	movs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4353      	muls	r3, r2
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	e008      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	480c      	ldr	r0, [pc, #48]	@ (8002744 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002714:	f7fd fcf8 	bl	8000108 <__udivsi3>
 8002718:	0003      	movs	r3, r0
 800271a:	001a      	movs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4353      	muls	r3, r2
 8002720:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	613b      	str	r3, [r7, #16]
      break;
 8002726:	e005      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002728:	4b09      	ldr	r3, [pc, #36]	@ (8002750 <HAL_RCC_GetSysClockFreq+0xe0>)
 800272a:	613b      	str	r3, [r7, #16]
      break;
 800272c:	e002      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800272e:	4b05      	ldr	r3, [pc, #20]	@ (8002744 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002730:	613b      	str	r3, [r7, #16]
      break;
 8002732:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002734:	693b      	ldr	r3, [r7, #16]
}
 8002736:	0018      	movs	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	b006      	add	sp, #24
 800273c:	bd80      	pop	{r7, pc}
 800273e:	46c0      	nop			@ (mov r8, r8)
 8002740:	40021000 	.word	0x40021000
 8002744:	007a1200 	.word	0x007a1200
 8002748:	080043fc 	.word	0x080043fc
 800274c:	0800440c 	.word	0x0800440c
 8002750:	02dc6c00 	.word	0x02dc6c00

08002754 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002758:	4b02      	ldr	r3, [pc, #8]	@ (8002764 <HAL_RCC_GetHCLKFreq+0x10>)
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	0018      	movs	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			@ (mov r8, r8)
 8002764:	20000000 	.word	0x20000000

08002768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800276c:	f7ff fff2 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 8002770:	0001      	movs	r1, r0
 8002772:	4b06      	ldr	r3, [pc, #24]	@ (800278c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	0a1b      	lsrs	r3, r3, #8
 8002778:	2207      	movs	r2, #7
 800277a:	4013      	ands	r3, r2
 800277c:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <HAL_RCC_GetPCLK1Freq+0x28>)
 800277e:	5cd3      	ldrb	r3, [r2, r3]
 8002780:	40d9      	lsrs	r1, r3
 8002782:	000b      	movs	r3, r1
}    
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	46c0      	nop			@ (mov r8, r8)
 800278c:	40021000 	.word	0x40021000
 8002790:	080043f4 	.word	0x080043f4

08002794 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2380      	movs	r3, #128	@ 0x80
 80027aa:	025b      	lsls	r3, r3, #9
 80027ac:	4013      	ands	r3, r2
 80027ae:	d100      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80027b0:	e08e      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80027b2:	2017      	movs	r0, #23
 80027b4:	183b      	adds	r3, r7, r0
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ba:	4b66      	ldr	r3, [pc, #408]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	2380      	movs	r3, #128	@ 0x80
 80027c0:	055b      	lsls	r3, r3, #21
 80027c2:	4013      	ands	r3, r2
 80027c4:	d110      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027c6:	4b63      	ldr	r3, [pc, #396]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027c8:	69da      	ldr	r2, [r3, #28]
 80027ca:	4b62      	ldr	r3, [pc, #392]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027cc:	2180      	movs	r1, #128	@ 0x80
 80027ce:	0549      	lsls	r1, r1, #21
 80027d0:	430a      	orrs	r2, r1
 80027d2:	61da      	str	r2, [r3, #28]
 80027d4:	4b5f      	ldr	r3, [pc, #380]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027d6:	69da      	ldr	r2, [r3, #28]
 80027d8:	2380      	movs	r3, #128	@ 0x80
 80027da:	055b      	lsls	r3, r3, #21
 80027dc:	4013      	ands	r3, r2
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e2:	183b      	adds	r3, r7, r0
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e8:	4b5b      	ldr	r3, [pc, #364]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	2380      	movs	r3, #128	@ 0x80
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4013      	ands	r3, r2
 80027f2:	d11a      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f4:	4b58      	ldr	r3, [pc, #352]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b57      	ldr	r3, [pc, #348]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027fa:	2180      	movs	r1, #128	@ 0x80
 80027fc:	0049      	lsls	r1, r1, #1
 80027fe:	430a      	orrs	r2, r1
 8002800:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002802:	f7fe fcb7 	bl	8001174 <HAL_GetTick>
 8002806:	0003      	movs	r3, r0
 8002808:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280a:	e008      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280c:	f7fe fcb2 	bl	8001174 <HAL_GetTick>
 8002810:	0002      	movs	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	@ 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e096      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281e:	4b4e      	ldr	r3, [pc, #312]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	2380      	movs	r3, #128	@ 0x80
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4013      	ands	r3, r2
 8002828:	d0f0      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800282a:	4b4a      	ldr	r3, [pc, #296]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800282c:	6a1a      	ldr	r2, [r3, #32]
 800282e:	23c0      	movs	r3, #192	@ 0xc0
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4013      	ands	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d034      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	23c0      	movs	r3, #192	@ 0xc0
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4013      	ands	r3, r2
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	429a      	cmp	r2, r3
 800284a:	d02c      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800284c:	4b41      	ldr	r3, [pc, #260]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	4a42      	ldr	r2, [pc, #264]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002852:	4013      	ands	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002856:	4b3f      	ldr	r3, [pc, #252]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002858:	6a1a      	ldr	r2, [r3, #32]
 800285a:	4b3e      	ldr	r3, [pc, #248]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800285c:	2180      	movs	r1, #128	@ 0x80
 800285e:	0249      	lsls	r1, r1, #9
 8002860:	430a      	orrs	r2, r1
 8002862:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002864:	4b3b      	ldr	r3, [pc, #236]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002866:	6a1a      	ldr	r2, [r3, #32]
 8002868:	4b3a      	ldr	r3, [pc, #232]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800286a:	493d      	ldr	r1, [pc, #244]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800286c:	400a      	ands	r2, r1
 800286e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002870:	4b38      	ldr	r3, [pc, #224]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	4013      	ands	r3, r2
 800287c:	d013      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7fe fc79 	bl	8001174 <HAL_GetTick>
 8002882:	0003      	movs	r3, r0
 8002884:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002886:	e009      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002888:	f7fe fc74 	bl	8001174 <HAL_GetTick>
 800288c:	0002      	movs	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	4a34      	ldr	r2, [pc, #208]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e057      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289c:	4b2d      	ldr	r3, [pc, #180]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	2202      	movs	r2, #2
 80028a2:	4013      	ands	r3, r2
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	4a2c      	ldr	r2, [pc, #176]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	0019      	movs	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	4b27      	ldr	r3, [pc, #156]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028b6:	430a      	orrs	r2, r1
 80028b8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028ba:	2317      	movs	r3, #23
 80028bc:	18fb      	adds	r3, r7, r3
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d105      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c4:	4b23      	ldr	r3, [pc, #140]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028c6:	69da      	ldr	r2, [r3, #28]
 80028c8:	4b22      	ldr	r3, [pc, #136]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028ca:	4927      	ldr	r1, [pc, #156]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028cc:	400a      	ands	r2, r1
 80028ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2201      	movs	r2, #1
 80028d6:	4013      	ands	r3, r2
 80028d8:	d009      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028da:	4b1e      	ldr	r3, [pc, #120]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	2203      	movs	r2, #3
 80028e0:	4393      	bics	r3, r2
 80028e2:	0019      	movs	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028ea:	430a      	orrs	r2, r1
 80028ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2202      	movs	r2, #2
 80028f4:	4013      	ands	r3, r2
 80028f6:	d009      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028f8:	4b16      	ldr	r3, [pc, #88]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fc:	4a1b      	ldr	r2, [pc, #108]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028fe:	4013      	ands	r3, r2
 8002900:	0019      	movs	r1, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	4b13      	ldr	r3, [pc, #76]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002908:	430a      	orrs	r2, r1
 800290a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2220      	movs	r2, #32
 8002912:	4013      	ands	r3, r2
 8002914:	d009      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002916:	4b0f      	ldr	r3, [pc, #60]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	2210      	movs	r2, #16
 800291c:	4393      	bics	r3, r2
 800291e:	0019      	movs	r1, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	4b0b      	ldr	r3, [pc, #44]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002926:	430a      	orrs	r2, r1
 8002928:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	2380      	movs	r3, #128	@ 0x80
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4013      	ands	r3, r2
 8002934:	d009      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002936:	4b07      	ldr	r3, [pc, #28]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	2240      	movs	r2, #64	@ 0x40
 800293c:	4393      	bics	r3, r2
 800293e:	0019      	movs	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	4b03      	ldr	r3, [pc, #12]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002946:	430a      	orrs	r2, r1
 8002948:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	0018      	movs	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	b006      	add	sp, #24
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000
 8002958:	40007000 	.word	0x40007000
 800295c:	fffffcff 	.word	0xfffffcff
 8002960:	fffeffff 	.word	0xfffeffff
 8002964:	00001388 	.word	0x00001388
 8002968:	efffffff 	.word	0xefffffff
 800296c:	fffcffff 	.word	0xfffcffff

08002970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e042      	b.n	8002a08 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	223d      	movs	r2, #61	@ 0x3d
 8002986:	5c9b      	ldrb	r3, [r3, r2]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d107      	bne.n	800299e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	223c      	movs	r2, #60	@ 0x3c
 8002992:	2100      	movs	r1, #0
 8002994:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	0018      	movs	r0, r3
 800299a:	f7fe f9e7 	bl	8000d6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	223d      	movs	r2, #61	@ 0x3d
 80029a2:	2102      	movs	r1, #2
 80029a4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3304      	adds	r3, #4
 80029ae:	0019      	movs	r1, r3
 80029b0:	0010      	movs	r0, r2
 80029b2:	f000 fa61 	bl	8002e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2246      	movs	r2, #70	@ 0x46
 80029ba:	2101      	movs	r1, #1
 80029bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	223e      	movs	r2, #62	@ 0x3e
 80029c2:	2101      	movs	r1, #1
 80029c4:	5499      	strb	r1, [r3, r2]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	223f      	movs	r2, #63	@ 0x3f
 80029ca:	2101      	movs	r1, #1
 80029cc:	5499      	strb	r1, [r3, r2]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2240      	movs	r2, #64	@ 0x40
 80029d2:	2101      	movs	r1, #1
 80029d4:	5499      	strb	r1, [r3, r2]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2241      	movs	r2, #65	@ 0x41
 80029da:	2101      	movs	r1, #1
 80029dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2242      	movs	r2, #66	@ 0x42
 80029e2:	2101      	movs	r1, #1
 80029e4:	5499      	strb	r1, [r3, r2]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2243      	movs	r2, #67	@ 0x43
 80029ea:	2101      	movs	r1, #1
 80029ec:	5499      	strb	r1, [r3, r2]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2244      	movs	r2, #68	@ 0x44
 80029f2:	2101      	movs	r1, #1
 80029f4:	5499      	strb	r1, [r3, r2]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2245      	movs	r2, #69	@ 0x45
 80029fa:	2101      	movs	r1, #1
 80029fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	223d      	movs	r2, #61	@ 0x3d
 8002a02:	2101      	movs	r1, #1
 8002a04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	0018      	movs	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b002      	add	sp, #8
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	223d      	movs	r2, #61	@ 0x3d
 8002a1c:	5c9b      	ldrb	r3, [r3, r2]
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d001      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e03b      	b.n	8002aa0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	223d      	movs	r2, #61	@ 0x3d
 8002a2c:	2102      	movs	r1, #2
 8002a2e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a18      	ldr	r2, [pc, #96]	@ (8002aa8 <HAL_TIM_Base_Start_IT+0x98>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00f      	beq.n	8002a6a <HAL_TIM_Base_Start_IT+0x5a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	2380      	movs	r3, #128	@ 0x80
 8002a50:	05db      	lsls	r3, r3, #23
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d009      	beq.n	8002a6a <HAL_TIM_Base_Start_IT+0x5a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a14      	ldr	r2, [pc, #80]	@ (8002aac <HAL_TIM_Base_Start_IT+0x9c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d004      	beq.n	8002a6a <HAL_TIM_Base_Start_IT+0x5a>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a12      	ldr	r2, [pc, #72]	@ (8002ab0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d111      	bne.n	8002a8e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2207      	movs	r2, #7
 8002a72:	4013      	ands	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b06      	cmp	r3, #6
 8002a7a:	d010      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2101      	movs	r1, #1
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8c:	e007      	b.n	8002a9e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2101      	movs	r1, #1
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b004      	add	sp, #16
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40012c00 	.word	0x40012c00
 8002aac:	40000400 	.word	0x40000400
 8002ab0:	40014000 	.word	0x40014000

08002ab4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d021      	beq.n	8002b18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d01d      	beq.n	8002b18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	4252      	negs	r2, r2
 8002ae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2203      	movs	r2, #3
 8002af4:	4013      	ands	r3, r2
 8002af6:	d004      	beq.n	8002b02 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	0018      	movs	r0, r3
 8002afc:	f000 f9a4 	bl	8002e48 <HAL_TIM_IC_CaptureCallback>
 8002b00:	e007      	b.n	8002b12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	0018      	movs	r0, r3
 8002b06:	f000 f997 	bl	8002e38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f000 f9a3 	bl	8002e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d022      	beq.n	8002b66 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2204      	movs	r2, #4
 8002b24:	4013      	ands	r3, r2
 8002b26:	d01e      	beq.n	8002b66 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2205      	movs	r2, #5
 8002b2e:	4252      	negs	r2, r2
 8002b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2202      	movs	r2, #2
 8002b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699a      	ldr	r2, [r3, #24]
 8002b3e:	23c0      	movs	r3, #192	@ 0xc0
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4013      	ands	r3, r2
 8002b44:	d004      	beq.n	8002b50 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f000 f97d 	bl	8002e48 <HAL_TIM_IC_CaptureCallback>
 8002b4e:	e007      	b.n	8002b60 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	0018      	movs	r0, r3
 8002b54:	f000 f970 	bl	8002e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f000 f97c 	bl	8002e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2208      	movs	r2, #8
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d021      	beq.n	8002bb2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2208      	movs	r2, #8
 8002b72:	4013      	ands	r3, r2
 8002b74:	d01d      	beq.n	8002bb2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2209      	movs	r2, #9
 8002b7c:	4252      	negs	r2, r2
 8002b7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2204      	movs	r2, #4
 8002b84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d004      	beq.n	8002b9c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	0018      	movs	r0, r3
 8002b96:	f000 f957 	bl	8002e48 <HAL_TIM_IC_CaptureCallback>
 8002b9a:	e007      	b.n	8002bac <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f000 f94a 	bl	8002e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f000 f956 	bl	8002e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2210      	movs	r2, #16
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d022      	beq.n	8002c00 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2210      	movs	r2, #16
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d01e      	beq.n	8002c00 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2211      	movs	r2, #17
 8002bc8:	4252      	negs	r2, r2
 8002bca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2208      	movs	r2, #8
 8002bd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69da      	ldr	r2, [r3, #28]
 8002bd8:	23c0      	movs	r3, #192	@ 0xc0
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d004      	beq.n	8002bea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	0018      	movs	r0, r3
 8002be4:	f000 f930 	bl	8002e48 <HAL_TIM_IC_CaptureCallback>
 8002be8:	e007      	b.n	8002bfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	0018      	movs	r0, r3
 8002bee:	f000 f923 	bl	8002e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f000 f92f 	bl	8002e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2201      	movs	r2, #1
 8002c04:	4013      	ands	r3, r2
 8002c06:	d00c      	beq.n	8002c22 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d008      	beq.n	8002c22 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2202      	movs	r2, #2
 8002c16:	4252      	negs	r2, r2
 8002c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f7fe fa0d 	bl	800103c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2280      	movs	r2, #128	@ 0x80
 8002c26:	4013      	ands	r3, r2
 8002c28:	d00c      	beq.n	8002c44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2280      	movs	r2, #128	@ 0x80
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d008      	beq.n	8002c44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2281      	movs	r2, #129	@ 0x81
 8002c38:	4252      	negs	r2, r2
 8002c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f000 faa8 	bl	8003194 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2240      	movs	r2, #64	@ 0x40
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d00c      	beq.n	8002c66 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2240      	movs	r2, #64	@ 0x40
 8002c50:	4013      	ands	r3, r2
 8002c52:	d008      	beq.n	8002c66 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2241      	movs	r2, #65	@ 0x41
 8002c5a:	4252      	negs	r2, r2
 8002c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f000 f901 	bl	8002e68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d00c      	beq.n	8002c88 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2220      	movs	r2, #32
 8002c72:	4013      	ands	r3, r2
 8002c74:	d008      	beq.n	8002c88 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2221      	movs	r2, #33	@ 0x21
 8002c7c:	4252      	negs	r2, r2
 8002c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	0018      	movs	r0, r3
 8002c84:	f000 fa7e 	bl	8003184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c88:	46c0      	nop			@ (mov r8, r8)
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b004      	add	sp, #16
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c9a:	230f      	movs	r3, #15
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	223c      	movs	r2, #60	@ 0x3c
 8002ca6:	5c9b      	ldrb	r3, [r3, r2]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_TIM_ConfigClockSource+0x20>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e0bc      	b.n	8002e2a <HAL_TIM_ConfigClockSource+0x19a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	223c      	movs	r2, #60	@ 0x3c
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	223d      	movs	r2, #61	@ 0x3d
 8002cbc:	2102      	movs	r1, #2
 8002cbe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2277      	movs	r2, #119	@ 0x77
 8002ccc:	4393      	bics	r3, r2
 8002cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4a58      	ldr	r2, [pc, #352]	@ (8002e34 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2280      	movs	r2, #128	@ 0x80
 8002ce6:	0192      	lsls	r2, r2, #6
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d040      	beq.n	8002d6e <HAL_TIM_ConfigClockSource+0xde>
 8002cec:	2280      	movs	r2, #128	@ 0x80
 8002cee:	0192      	lsls	r2, r2, #6
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d900      	bls.n	8002cf6 <HAL_TIM_ConfigClockSource+0x66>
 8002cf4:	e088      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x178>
 8002cf6:	2280      	movs	r2, #128	@ 0x80
 8002cf8:	0152      	lsls	r2, r2, #5
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d100      	bne.n	8002d00 <HAL_TIM_ConfigClockSource+0x70>
 8002cfe:	e088      	b.n	8002e12 <HAL_TIM_ConfigClockSource+0x182>
 8002d00:	2280      	movs	r2, #128	@ 0x80
 8002d02:	0152      	lsls	r2, r2, #5
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d900      	bls.n	8002d0a <HAL_TIM_ConfigClockSource+0x7a>
 8002d08:	e07e      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x178>
 8002d0a:	2b70      	cmp	r3, #112	@ 0x70
 8002d0c:	d018      	beq.n	8002d40 <HAL_TIM_ConfigClockSource+0xb0>
 8002d0e:	d900      	bls.n	8002d12 <HAL_TIM_ConfigClockSource+0x82>
 8002d10:	e07a      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x178>
 8002d12:	2b60      	cmp	r3, #96	@ 0x60
 8002d14:	d04f      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x126>
 8002d16:	d900      	bls.n	8002d1a <HAL_TIM_ConfigClockSource+0x8a>
 8002d18:	e076      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x178>
 8002d1a:	2b50      	cmp	r3, #80	@ 0x50
 8002d1c:	d03b      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x106>
 8002d1e:	d900      	bls.n	8002d22 <HAL_TIM_ConfigClockSource+0x92>
 8002d20:	e072      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x178>
 8002d22:	2b40      	cmp	r3, #64	@ 0x40
 8002d24:	d057      	beq.n	8002dd6 <HAL_TIM_ConfigClockSource+0x146>
 8002d26:	d900      	bls.n	8002d2a <HAL_TIM_ConfigClockSource+0x9a>
 8002d28:	e06e      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x178>
 8002d2a:	2b30      	cmp	r3, #48	@ 0x30
 8002d2c:	d063      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x166>
 8002d2e:	d86b      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x178>
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d060      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x166>
 8002d34:	d868      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x178>
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d05d      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x166>
 8002d3a:	2b10      	cmp	r3, #16
 8002d3c:	d05b      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x166>
 8002d3e:	e063      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d50:	f000 f99a 	bl	8003088 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2277      	movs	r2, #119	@ 0x77
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	609a      	str	r2, [r3, #8]
      break;
 8002d6c:	e052      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d7e:	f000 f983 	bl	8003088 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2180      	movs	r1, #128	@ 0x80
 8002d8e:	01c9      	lsls	r1, r1, #7
 8002d90:	430a      	orrs	r2, r1
 8002d92:	609a      	str	r2, [r3, #8]
      break;
 8002d94:	e03e      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da2:	001a      	movs	r2, r3
 8002da4:	f000 f8f6 	bl	8002f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2150      	movs	r1, #80	@ 0x50
 8002dae:	0018      	movs	r0, r3
 8002db0:	f000 f950 	bl	8003054 <TIM_ITRx_SetConfig>
      break;
 8002db4:	e02e      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dc2:	001a      	movs	r2, r3
 8002dc4:	f000 f914 	bl	8002ff0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2160      	movs	r1, #96	@ 0x60
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f000 f940 	bl	8003054 <TIM_ITRx_SetConfig>
      break;
 8002dd4:	e01e      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de2:	001a      	movs	r2, r3
 8002de4:	f000 f8d6 	bl	8002f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2140      	movs	r1, #64	@ 0x40
 8002dee:	0018      	movs	r0, r3
 8002df0:	f000 f930 	bl	8003054 <TIM_ITRx_SetConfig>
      break;
 8002df4:	e00e      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	0019      	movs	r1, r3
 8002e00:	0010      	movs	r0, r2
 8002e02:	f000 f927 	bl	8003054 <TIM_ITRx_SetConfig>
      break;
 8002e06:	e005      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002e08:	230f      	movs	r3, #15
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
      break;
 8002e10:	e000      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002e12:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	223d      	movs	r2, #61	@ 0x3d
 8002e18:	2101      	movs	r1, #1
 8002e1a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	223c      	movs	r2, #60	@ 0x3c
 8002e20:	2100      	movs	r1, #0
 8002e22:	5499      	strb	r1, [r3, r2]

  return status;
 8002e24:	230f      	movs	r3, #15
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	781b      	ldrb	r3, [r3, #0]
}
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b004      	add	sp, #16
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	46c0      	nop			@ (mov r8, r8)
 8002e34:	ffff00ff 	.word	0xffff00ff

08002e38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e40:	46c0      	nop			@ (mov r8, r8)
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b002      	add	sp, #8
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e50:	46c0      	nop			@ (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b002      	add	sp, #8
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e60:	46c0      	nop			@ (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b002      	add	sp, #8
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e70:	46c0      	nop			@ (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b002      	add	sp, #8
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a3b      	ldr	r2, [pc, #236]	@ (8002f78 <TIM_Base_SetConfig+0x100>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d008      	beq.n	8002ea2 <TIM_Base_SetConfig+0x2a>
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	2380      	movs	r3, #128	@ 0x80
 8002e94:	05db      	lsls	r3, r3, #23
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d003      	beq.n	8002ea2 <TIM_Base_SetConfig+0x2a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a37      	ldr	r2, [pc, #220]	@ (8002f7c <TIM_Base_SetConfig+0x104>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d108      	bne.n	8002eb4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2270      	movs	r2, #112	@ 0x70
 8002ea6:	4393      	bics	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a30      	ldr	r2, [pc, #192]	@ (8002f78 <TIM_Base_SetConfig+0x100>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d018      	beq.n	8002eee <TIM_Base_SetConfig+0x76>
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	2380      	movs	r3, #128	@ 0x80
 8002ec0:	05db      	lsls	r3, r3, #23
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d013      	beq.n	8002eee <TIM_Base_SetConfig+0x76>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a2c      	ldr	r2, [pc, #176]	@ (8002f7c <TIM_Base_SetConfig+0x104>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00f      	beq.n	8002eee <TIM_Base_SetConfig+0x76>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a2b      	ldr	r2, [pc, #172]	@ (8002f80 <TIM_Base_SetConfig+0x108>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00b      	beq.n	8002eee <TIM_Base_SetConfig+0x76>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a2a      	ldr	r2, [pc, #168]	@ (8002f84 <TIM_Base_SetConfig+0x10c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d007      	beq.n	8002eee <TIM_Base_SetConfig+0x76>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a29      	ldr	r2, [pc, #164]	@ (8002f88 <TIM_Base_SetConfig+0x110>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d003      	beq.n	8002eee <TIM_Base_SetConfig+0x76>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a28      	ldr	r2, [pc, #160]	@ (8002f8c <TIM_Base_SetConfig+0x114>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d108      	bne.n	8002f00 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4a27      	ldr	r2, [pc, #156]	@ (8002f90 <TIM_Base_SetConfig+0x118>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2280      	movs	r2, #128	@ 0x80
 8002f04:	4393      	bics	r3, r2
 8002f06:	001a      	movs	r2, r3
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a13      	ldr	r2, [pc, #76]	@ (8002f78 <TIM_Base_SetConfig+0x100>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00b      	beq.n	8002f46 <TIM_Base_SetConfig+0xce>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a14      	ldr	r2, [pc, #80]	@ (8002f84 <TIM_Base_SetConfig+0x10c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d007      	beq.n	8002f46 <TIM_Base_SetConfig+0xce>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a13      	ldr	r2, [pc, #76]	@ (8002f88 <TIM_Base_SetConfig+0x110>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d003      	beq.n	8002f46 <TIM_Base_SetConfig+0xce>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a12      	ldr	r2, [pc, #72]	@ (8002f8c <TIM_Base_SetConfig+0x114>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d103      	bne.n	8002f4e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	691a      	ldr	r2, [r3, #16]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d106      	bne.n	8002f6e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	2201      	movs	r2, #1
 8002f66:	4393      	bics	r3, r2
 8002f68:	001a      	movs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	611a      	str	r2, [r3, #16]
  }
}
 8002f6e:	46c0      	nop			@ (mov r8, r8)
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b004      	add	sp, #16
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	46c0      	nop			@ (mov r8, r8)
 8002f78:	40012c00 	.word	0x40012c00
 8002f7c:	40000400 	.word	0x40000400
 8002f80:	40002000 	.word	0x40002000
 8002f84:	40014000 	.word	0x40014000
 8002f88:	40014400 	.word	0x40014400
 8002f8c:	40014800 	.word	0x40014800
 8002f90:	fffffcff 	.word	0xfffffcff

08002f94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	2201      	movs	r2, #1
 8002fac:	4393      	bics	r3, r2
 8002fae:	001a      	movs	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	22f0      	movs	r2, #240	@ 0xf0
 8002fbe:	4393      	bics	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	220a      	movs	r2, #10
 8002fd0:	4393      	bics	r3, r2
 8002fd2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	621a      	str	r2, [r3, #32]
}
 8002fe8:	46c0      	nop			@ (mov r8, r8)
 8002fea:	46bd      	mov	sp, r7
 8002fec:	b006      	add	sp, #24
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	2210      	movs	r2, #16
 8003008:	4393      	bics	r3, r2
 800300a:	001a      	movs	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4a0d      	ldr	r2, [pc, #52]	@ (8003050 <TIM_TI2_ConfigInputStage+0x60>)
 800301a:	4013      	ands	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	031b      	lsls	r3, r3, #12
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	22a0      	movs	r2, #160	@ 0xa0
 800302c:	4393      	bics	r3, r2
 800302e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	621a      	str	r2, [r3, #32]
}
 8003046:	46c0      	nop			@ (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	b006      	add	sp, #24
 800304c:	bd80      	pop	{r7, pc}
 800304e:	46c0      	nop			@ (mov r8, r8)
 8003050:	ffff0fff 	.word	0xffff0fff

08003054 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2270      	movs	r2, #112	@ 0x70
 8003068:	4393      	bics	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4313      	orrs	r3, r2
 8003072:	2207      	movs	r2, #7
 8003074:	4313      	orrs	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	609a      	str	r2, [r3, #8]
}
 800307e:	46c0      	nop			@ (mov r8, r8)
 8003080:	46bd      	mov	sp, r7
 8003082:	b004      	add	sp, #16
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	4a09      	ldr	r2, [pc, #36]	@ (80030c4 <TIM_ETR_SetConfig+0x3c>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	021a      	lsls	r2, r3, #8
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	609a      	str	r2, [r3, #8]
}
 80030bc:	46c0      	nop			@ (mov r8, r8)
 80030be:	46bd      	mov	sp, r7
 80030c0:	b006      	add	sp, #24
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	ffff00ff 	.word	0xffff00ff

080030c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	223c      	movs	r2, #60	@ 0x3c
 80030d6:	5c9b      	ldrb	r3, [r3, r2]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030dc:	2302      	movs	r3, #2
 80030de:	e047      	b.n	8003170 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	223c      	movs	r2, #60	@ 0x3c
 80030e4:	2101      	movs	r1, #1
 80030e6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	223d      	movs	r2, #61	@ 0x3d
 80030ec:	2102      	movs	r1, #2
 80030ee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2270      	movs	r2, #112	@ 0x70
 8003104:	4393      	bics	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a16      	ldr	r2, [pc, #88]	@ (8003178 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d00f      	beq.n	8003144 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	2380      	movs	r3, #128	@ 0x80
 800312a:	05db      	lsls	r3, r3, #23
 800312c:	429a      	cmp	r2, r3
 800312e:	d009      	beq.n	8003144 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a11      	ldr	r2, [pc, #68]	@ (800317c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d004      	beq.n	8003144 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a10      	ldr	r2, [pc, #64]	@ (8003180 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d10c      	bne.n	800315e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2280      	movs	r2, #128	@ 0x80
 8003148:	4393      	bics	r3, r2
 800314a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	4313      	orrs	r3, r2
 8003154:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	223d      	movs	r2, #61	@ 0x3d
 8003162:	2101      	movs	r1, #1
 8003164:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	223c      	movs	r2, #60	@ 0x3c
 800316a:	2100      	movs	r1, #0
 800316c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	b004      	add	sp, #16
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40012c00 	.word	0x40012c00
 800317c:	40000400 	.word	0x40000400
 8003180:	40014000 	.word	0x40014000

08003184 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800318c:	46c0      	nop			@ (mov r8, r8)
 800318e:	46bd      	mov	sp, r7
 8003190:	b002      	add	sp, #8
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800319c:	46c0      	nop			@ (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b002      	add	sp, #8
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e044      	b.n	8003240 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d107      	bne.n	80031ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2278      	movs	r2, #120	@ 0x78
 80031c2:	2100      	movs	r1, #0
 80031c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	0018      	movs	r0, r3
 80031ca:	f7fd fdf3 	bl	8000db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2224      	movs	r2, #36	@ 0x24
 80031d2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2101      	movs	r1, #1
 80031e0:	438a      	bics	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	0018      	movs	r0, r3
 80031f0:	f000 fe38 	bl	8003e64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	0018      	movs	r0, r3
 80031f8:	f000 fcac 	bl	8003b54 <UART_SetConfig>
 80031fc:	0003      	movs	r3, r0
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e01c      	b.n	8003240 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	490d      	ldr	r1, [pc, #52]	@ (8003248 <HAL_UART_Init+0xa4>)
 8003212:	400a      	ands	r2, r1
 8003214:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	212a      	movs	r1, #42	@ 0x2a
 8003222:	438a      	bics	r2, r1
 8003224:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2101      	movs	r1, #1
 8003232:	430a      	orrs	r2, r1
 8003234:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	0018      	movs	r0, r3
 800323a:	f000 fec7 	bl	8003fcc <UART_CheckIdleState>
 800323e:	0003      	movs	r3, r0
}
 8003240:	0018      	movs	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	b002      	add	sp, #8
 8003246:	bd80      	pop	{r7, pc}
 8003248:	ffffb7ff 	.word	0xffffb7ff

0800324c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08a      	sub	sp, #40	@ 0x28
 8003250:	af02      	add	r7, sp, #8
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	1dbb      	adds	r3, r7, #6
 800325a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003260:	2b20      	cmp	r3, #32
 8003262:	d000      	beq.n	8003266 <HAL_UART_Transmit+0x1a>
 8003264:	e08c      	b.n	8003380 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <HAL_UART_Transmit+0x28>
 800326c:	1dbb      	adds	r3, r7, #6
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e084      	b.n	8003382 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	2380      	movs	r3, #128	@ 0x80
 800327e:	015b      	lsls	r3, r3, #5
 8003280:	429a      	cmp	r2, r3
 8003282:	d109      	bne.n	8003298 <HAL_UART_Transmit+0x4c>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d105      	bne.n	8003298 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2201      	movs	r2, #1
 8003290:	4013      	ands	r3, r2
 8003292:	d001      	beq.n	8003298 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e074      	b.n	8003382 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2284      	movs	r2, #132	@ 0x84
 800329c:	2100      	movs	r1, #0
 800329e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2221      	movs	r2, #33	@ 0x21
 80032a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032a6:	f7fd ff65 	bl	8001174 <HAL_GetTick>
 80032aa:	0003      	movs	r3, r0
 80032ac:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1dba      	adds	r2, r7, #6
 80032b2:	2150      	movs	r1, #80	@ 0x50
 80032b4:	8812      	ldrh	r2, [r2, #0]
 80032b6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1dba      	adds	r2, r7, #6
 80032bc:	2152      	movs	r1, #82	@ 0x52
 80032be:	8812      	ldrh	r2, [r2, #0]
 80032c0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	2380      	movs	r3, #128	@ 0x80
 80032c8:	015b      	lsls	r3, r3, #5
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d108      	bne.n	80032e0 <HAL_UART_Transmit+0x94>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d104      	bne.n	80032e0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	e003      	b.n	80032e8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032e8:	e02f      	b.n	800334a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	0013      	movs	r3, r2
 80032f4:	2200      	movs	r2, #0
 80032f6:	2180      	movs	r1, #128	@ 0x80
 80032f8:	f000 ff10 	bl	800411c <UART_WaitOnFlagUntilTimeout>
 80032fc:	1e03      	subs	r3, r0, #0
 80032fe:	d004      	beq.n	800330a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2220      	movs	r2, #32
 8003304:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e03b      	b.n	8003382 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10b      	bne.n	8003328 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	881a      	ldrh	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	05d2      	lsls	r2, r2, #23
 800331a:	0dd2      	lsrs	r2, r2, #23
 800331c:	b292      	uxth	r2, r2
 800331e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	3302      	adds	r3, #2
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	e007      	b.n	8003338 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	781a      	ldrb	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	3301      	adds	r3, #1
 8003336:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2252      	movs	r2, #82	@ 0x52
 800333c:	5a9b      	ldrh	r3, [r3, r2]
 800333e:	b29b      	uxth	r3, r3
 8003340:	3b01      	subs	r3, #1
 8003342:	b299      	uxth	r1, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2252      	movs	r2, #82	@ 0x52
 8003348:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2252      	movs	r2, #82	@ 0x52
 800334e:	5a9b      	ldrh	r3, [r3, r2]
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1c9      	bne.n	80032ea <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	0013      	movs	r3, r2
 8003360:	2200      	movs	r2, #0
 8003362:	2140      	movs	r1, #64	@ 0x40
 8003364:	f000 feda 	bl	800411c <UART_WaitOnFlagUntilTimeout>
 8003368:	1e03      	subs	r3, r0, #0
 800336a:	d004      	beq.n	8003376 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2220      	movs	r2, #32
 8003370:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e005      	b.n	8003382 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2220      	movs	r2, #32
 800337a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	e000      	b.n	8003382 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003380:	2302      	movs	r3, #2
  }
}
 8003382:	0018      	movs	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	b008      	add	sp, #32
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08a      	sub	sp, #40	@ 0x28
 8003390:	af02      	add	r7, sp, #8
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	1dbb      	adds	r3, r7, #6
 800339a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2280      	movs	r2, #128	@ 0x80
 80033a0:	589b      	ldr	r3, [r3, r2]
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	d000      	beq.n	80033a8 <HAL_UART_Receive+0x1c>
 80033a6:	e0d1      	b.n	800354c <HAL_UART_Receive+0x1c0>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_UART_Receive+0x2a>
 80033ae:	1dbb      	adds	r3, r7, #6
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e0c9      	b.n	800354e <HAL_UART_Receive+0x1c2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	2380      	movs	r3, #128	@ 0x80
 80033c0:	015b      	lsls	r3, r3, #5
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d109      	bne.n	80033da <HAL_UART_Receive+0x4e>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d105      	bne.n	80033da <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2201      	movs	r2, #1
 80033d2:	4013      	ands	r3, r2
 80033d4:	d001      	beq.n	80033da <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e0b9      	b.n	800354e <HAL_UART_Receive+0x1c2>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2284      	movs	r2, #132	@ 0x84
 80033de:	2100      	movs	r1, #0
 80033e0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2280      	movs	r2, #128	@ 0x80
 80033e6:	2122      	movs	r1, #34	@ 0x22
 80033e8:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033f0:	f7fd fec0 	bl	8001174 <HAL_GetTick>
 80033f4:	0003      	movs	r3, r0
 80033f6:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1dba      	adds	r2, r7, #6
 80033fc:	2158      	movs	r1, #88	@ 0x58
 80033fe:	8812      	ldrh	r2, [r2, #0]
 8003400:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1dba      	adds	r2, r7, #6
 8003406:	215a      	movs	r1, #90	@ 0x5a
 8003408:	8812      	ldrh	r2, [r2, #0]
 800340a:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	2380      	movs	r3, #128	@ 0x80
 8003412:	015b      	lsls	r3, r3, #5
 8003414:	429a      	cmp	r2, r3
 8003416:	d10d      	bne.n	8003434 <HAL_UART_Receive+0xa8>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d104      	bne.n	800342a <HAL_UART_Receive+0x9e>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	225c      	movs	r2, #92	@ 0x5c
 8003424:	494c      	ldr	r1, [pc, #304]	@ (8003558 <HAL_UART_Receive+0x1cc>)
 8003426:	5299      	strh	r1, [r3, r2]
 8003428:	e02e      	b.n	8003488 <HAL_UART_Receive+0xfc>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	225c      	movs	r2, #92	@ 0x5c
 800342e:	21ff      	movs	r1, #255	@ 0xff
 8003430:	5299      	strh	r1, [r3, r2]
 8003432:	e029      	b.n	8003488 <HAL_UART_Receive+0xfc>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10d      	bne.n	8003458 <HAL_UART_Receive+0xcc>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d104      	bne.n	800344e <HAL_UART_Receive+0xc2>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	225c      	movs	r2, #92	@ 0x5c
 8003448:	21ff      	movs	r1, #255	@ 0xff
 800344a:	5299      	strh	r1, [r3, r2]
 800344c:	e01c      	b.n	8003488 <HAL_UART_Receive+0xfc>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	225c      	movs	r2, #92	@ 0x5c
 8003452:	217f      	movs	r1, #127	@ 0x7f
 8003454:	5299      	strh	r1, [r3, r2]
 8003456:	e017      	b.n	8003488 <HAL_UART_Receive+0xfc>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	2380      	movs	r3, #128	@ 0x80
 800345e:	055b      	lsls	r3, r3, #21
 8003460:	429a      	cmp	r2, r3
 8003462:	d10d      	bne.n	8003480 <HAL_UART_Receive+0xf4>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d104      	bne.n	8003476 <HAL_UART_Receive+0xea>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	225c      	movs	r2, #92	@ 0x5c
 8003470:	217f      	movs	r1, #127	@ 0x7f
 8003472:	5299      	strh	r1, [r3, r2]
 8003474:	e008      	b.n	8003488 <HAL_UART_Receive+0xfc>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	225c      	movs	r2, #92	@ 0x5c
 800347a:	213f      	movs	r1, #63	@ 0x3f
 800347c:	5299      	strh	r1, [r3, r2]
 800347e:	e003      	b.n	8003488 <HAL_UART_Receive+0xfc>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	225c      	movs	r2, #92	@ 0x5c
 8003484:	2100      	movs	r1, #0
 8003486:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003488:	2312      	movs	r3, #18
 800348a:	18fb      	adds	r3, r7, r3
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	215c      	movs	r1, #92	@ 0x5c
 8003490:	5a52      	ldrh	r2, [r2, r1]
 8003492:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	2380      	movs	r3, #128	@ 0x80
 800349a:	015b      	lsls	r3, r3, #5
 800349c:	429a      	cmp	r2, r3
 800349e:	d108      	bne.n	80034b2 <HAL_UART_Receive+0x126>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d104      	bne.n	80034b2 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	61bb      	str	r3, [r7, #24]
 80034b0:	e003      	b.n	80034ba <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80034ba:	e03b      	b.n	8003534 <HAL_UART_Receive+0x1a8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	0013      	movs	r3, r2
 80034c6:	2200      	movs	r2, #0
 80034c8:	2120      	movs	r1, #32
 80034ca:	f000 fe27 	bl	800411c <UART_WaitOnFlagUntilTimeout>
 80034ce:	1e03      	subs	r3, r0, #0
 80034d0:	d005      	beq.n	80034de <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2280      	movs	r2, #128	@ 0x80
 80034d6:	2120      	movs	r1, #32
 80034d8:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e037      	b.n	800354e <HAL_UART_Receive+0x1c2>
      }
      if (pdata8bits == NULL)
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10e      	bne.n	8003502 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2212      	movs	r2, #18
 80034ee:	18ba      	adds	r2, r7, r2
 80034f0:	8812      	ldrh	r2, [r2, #0]
 80034f2:	4013      	ands	r3, r2
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	3302      	adds	r3, #2
 80034fe:	61bb      	str	r3, [r7, #24]
 8003500:	e00f      	b.n	8003522 <HAL_UART_Receive+0x196>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003508:	b29b      	uxth	r3, r3
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2212      	movs	r2, #18
 800350e:	18ba      	adds	r2, r7, r2
 8003510:	8812      	ldrh	r2, [r2, #0]
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	4013      	ands	r3, r2
 8003516:	b2da      	uxtb	r2, r3
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	3301      	adds	r3, #1
 8003520:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	225a      	movs	r2, #90	@ 0x5a
 8003526:	5a9b      	ldrh	r3, [r3, r2]
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b299      	uxth	r1, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	225a      	movs	r2, #90	@ 0x5a
 8003532:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	225a      	movs	r2, #90	@ 0x5a
 8003538:	5a9b      	ldrh	r3, [r3, r2]
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1bd      	bne.n	80034bc <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2280      	movs	r2, #128	@ 0x80
 8003544:	2120      	movs	r1, #32
 8003546:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	e000      	b.n	800354e <HAL_UART_Receive+0x1c2>
  }
  else
  {
    return HAL_BUSY;
 800354c:	2302      	movs	r3, #2
  }
}
 800354e:	0018      	movs	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	b008      	add	sp, #32
 8003554:	bd80      	pop	{r7, pc}
 8003556:	46c0      	nop			@ (mov r8, r8)
 8003558:	000001ff 	.word	0x000001ff

0800355c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800355c:	b590      	push	{r4, r7, lr}
 800355e:	b0ab      	sub	sp, #172	@ 0xac
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	22a4      	movs	r2, #164	@ 0xa4
 800356c:	18b9      	adds	r1, r7, r2
 800356e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	20a0      	movs	r0, #160	@ 0xa0
 8003578:	1839      	adds	r1, r7, r0
 800357a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	219c      	movs	r1, #156	@ 0x9c
 8003584:	1879      	adds	r1, r7, r1
 8003586:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003588:	0011      	movs	r1, r2
 800358a:	18bb      	adds	r3, r7, r2
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a99      	ldr	r2, [pc, #612]	@ (80037f4 <HAL_UART_IRQHandler+0x298>)
 8003590:	4013      	ands	r3, r2
 8003592:	2298      	movs	r2, #152	@ 0x98
 8003594:	18bc      	adds	r4, r7, r2
 8003596:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003598:	18bb      	adds	r3, r7, r2
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d114      	bne.n	80035ca <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035a0:	187b      	adds	r3, r7, r1
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2220      	movs	r2, #32
 80035a6:	4013      	ands	r3, r2
 80035a8:	d00f      	beq.n	80035ca <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035aa:	183b      	adds	r3, r7, r0
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2220      	movs	r2, #32
 80035b0:	4013      	ands	r3, r2
 80035b2:	d00a      	beq.n	80035ca <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d100      	bne.n	80035be <HAL_UART_IRQHandler+0x62>
 80035bc:	e29e      	b.n	8003afc <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	0010      	movs	r0, r2
 80035c6:	4798      	blx	r3
      }
      return;
 80035c8:	e298      	b.n	8003afc <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035ca:	2398      	movs	r3, #152	@ 0x98
 80035cc:	18fb      	adds	r3, r7, r3
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d100      	bne.n	80035d6 <HAL_UART_IRQHandler+0x7a>
 80035d4:	e114      	b.n	8003800 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80035d6:	239c      	movs	r3, #156	@ 0x9c
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2201      	movs	r2, #1
 80035de:	4013      	ands	r3, r2
 80035e0:	d106      	bne.n	80035f0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80035e2:	23a0      	movs	r3, #160	@ 0xa0
 80035e4:	18fb      	adds	r3, r7, r3
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a83      	ldr	r2, [pc, #524]	@ (80037f8 <HAL_UART_IRQHandler+0x29c>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	d100      	bne.n	80035f0 <HAL_UART_IRQHandler+0x94>
 80035ee:	e107      	b.n	8003800 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035f0:	23a4      	movs	r3, #164	@ 0xa4
 80035f2:	18fb      	adds	r3, r7, r3
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2201      	movs	r2, #1
 80035f8:	4013      	ands	r3, r2
 80035fa:	d012      	beq.n	8003622 <HAL_UART_IRQHandler+0xc6>
 80035fc:	23a0      	movs	r3, #160	@ 0xa0
 80035fe:	18fb      	adds	r3, r7, r3
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	2380      	movs	r3, #128	@ 0x80
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	4013      	ands	r3, r2
 8003608:	d00b      	beq.n	8003622 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2201      	movs	r2, #1
 8003610:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2284      	movs	r2, #132	@ 0x84
 8003616:	589b      	ldr	r3, [r3, r2]
 8003618:	2201      	movs	r2, #1
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2184      	movs	r1, #132	@ 0x84
 8003620:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003622:	23a4      	movs	r3, #164	@ 0xa4
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2202      	movs	r2, #2
 800362a:	4013      	ands	r3, r2
 800362c:	d011      	beq.n	8003652 <HAL_UART_IRQHandler+0xf6>
 800362e:	239c      	movs	r3, #156	@ 0x9c
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2201      	movs	r2, #1
 8003636:	4013      	ands	r3, r2
 8003638:	d00b      	beq.n	8003652 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2202      	movs	r2, #2
 8003640:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2284      	movs	r2, #132	@ 0x84
 8003646:	589b      	ldr	r3, [r3, r2]
 8003648:	2204      	movs	r2, #4
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2184      	movs	r1, #132	@ 0x84
 8003650:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003652:	23a4      	movs	r3, #164	@ 0xa4
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2204      	movs	r2, #4
 800365a:	4013      	ands	r3, r2
 800365c:	d011      	beq.n	8003682 <HAL_UART_IRQHandler+0x126>
 800365e:	239c      	movs	r3, #156	@ 0x9c
 8003660:	18fb      	adds	r3, r7, r3
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2201      	movs	r2, #1
 8003666:	4013      	ands	r3, r2
 8003668:	d00b      	beq.n	8003682 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2204      	movs	r2, #4
 8003670:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2284      	movs	r2, #132	@ 0x84
 8003676:	589b      	ldr	r3, [r3, r2]
 8003678:	2202      	movs	r2, #2
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2184      	movs	r1, #132	@ 0x84
 8003680:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003682:	23a4      	movs	r3, #164	@ 0xa4
 8003684:	18fb      	adds	r3, r7, r3
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2208      	movs	r2, #8
 800368a:	4013      	ands	r3, r2
 800368c:	d017      	beq.n	80036be <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800368e:	23a0      	movs	r3, #160	@ 0xa0
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2220      	movs	r2, #32
 8003696:	4013      	ands	r3, r2
 8003698:	d105      	bne.n	80036a6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800369a:	239c      	movs	r3, #156	@ 0x9c
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2201      	movs	r2, #1
 80036a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036a4:	d00b      	beq.n	80036be <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2208      	movs	r2, #8
 80036ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2284      	movs	r2, #132	@ 0x84
 80036b2:	589b      	ldr	r3, [r3, r2]
 80036b4:	2208      	movs	r2, #8
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2184      	movs	r1, #132	@ 0x84
 80036bc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036be:	23a4      	movs	r3, #164	@ 0xa4
 80036c0:	18fb      	adds	r3, r7, r3
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	2380      	movs	r3, #128	@ 0x80
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	4013      	ands	r3, r2
 80036ca:	d013      	beq.n	80036f4 <HAL_UART_IRQHandler+0x198>
 80036cc:	23a0      	movs	r3, #160	@ 0xa0
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	2380      	movs	r3, #128	@ 0x80
 80036d4:	04db      	lsls	r3, r3, #19
 80036d6:	4013      	ands	r3, r2
 80036d8:	d00c      	beq.n	80036f4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2280      	movs	r2, #128	@ 0x80
 80036e0:	0112      	lsls	r2, r2, #4
 80036e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2284      	movs	r2, #132	@ 0x84
 80036e8:	589b      	ldr	r3, [r3, r2]
 80036ea:	2220      	movs	r2, #32
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2184      	movs	r1, #132	@ 0x84
 80036f2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2284      	movs	r2, #132	@ 0x84
 80036f8:	589b      	ldr	r3, [r3, r2]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d100      	bne.n	8003700 <HAL_UART_IRQHandler+0x1a4>
 80036fe:	e1ff      	b.n	8003b00 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003700:	23a4      	movs	r3, #164	@ 0xa4
 8003702:	18fb      	adds	r3, r7, r3
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2220      	movs	r2, #32
 8003708:	4013      	ands	r3, r2
 800370a:	d00e      	beq.n	800372a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800370c:	23a0      	movs	r3, #160	@ 0xa0
 800370e:	18fb      	adds	r3, r7, r3
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2220      	movs	r2, #32
 8003714:	4013      	ands	r3, r2
 8003716:	d008      	beq.n	800372a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800371c:	2b00      	cmp	r3, #0
 800371e:	d004      	beq.n	800372a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	0010      	movs	r0, r2
 8003728:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2284      	movs	r2, #132	@ 0x84
 800372e:	589b      	ldr	r3, [r3, r2]
 8003730:	2194      	movs	r1, #148	@ 0x94
 8003732:	187a      	adds	r2, r7, r1
 8003734:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	2240      	movs	r2, #64	@ 0x40
 800373e:	4013      	ands	r3, r2
 8003740:	2b40      	cmp	r3, #64	@ 0x40
 8003742:	d004      	beq.n	800374e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003744:	187b      	adds	r3, r7, r1
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2228      	movs	r2, #40	@ 0x28
 800374a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800374c:	d047      	beq.n	80037de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	0018      	movs	r0, r3
 8003752:	f000 fd53 	bl	80041fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2240      	movs	r2, #64	@ 0x40
 800375e:	4013      	ands	r3, r2
 8003760:	2b40      	cmp	r3, #64	@ 0x40
 8003762:	d137      	bne.n	80037d4 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003764:	f3ef 8310 	mrs	r3, PRIMASK
 8003768:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800376a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800376c:	2090      	movs	r0, #144	@ 0x90
 800376e:	183a      	adds	r2, r7, r0
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	2301      	movs	r3, #1
 8003774:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003776:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003778:	f383 8810 	msr	PRIMASK, r3
}
 800377c:	46c0      	nop			@ (mov r8, r8)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2140      	movs	r1, #64	@ 0x40
 800378a:	438a      	bics	r2, r1
 800378c:	609a      	str	r2, [r3, #8]
 800378e:	183b      	adds	r3, r7, r0
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003794:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003796:	f383 8810 	msr	PRIMASK, r3
}
 800379a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d012      	beq.n	80037ca <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a8:	4a14      	ldr	r2, [pc, #80]	@ (80037fc <HAL_UART_IRQHandler+0x2a0>)
 80037aa:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b0:	0018      	movs	r0, r3
 80037b2:	f7fd fe47 	bl	8001444 <HAL_DMA_Abort_IT>
 80037b6:	1e03      	subs	r3, r0, #0
 80037b8:	d01a      	beq.n	80037f0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c4:	0018      	movs	r0, r3
 80037c6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c8:	e012      	b.n	80037f0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	0018      	movs	r0, r3
 80037ce:	f000 f9ad 	bl	8003b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d2:	e00d      	b.n	80037f0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	0018      	movs	r0, r3
 80037d8:	f000 f9a8 	bl	8003b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037dc:	e008      	b.n	80037f0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	0018      	movs	r0, r3
 80037e2:	f000 f9a3 	bl	8003b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2284      	movs	r2, #132	@ 0x84
 80037ea:	2100      	movs	r1, #0
 80037ec:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80037ee:	e187      	b.n	8003b00 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f0:	46c0      	nop			@ (mov r8, r8)
    return;
 80037f2:	e185      	b.n	8003b00 <HAL_UART_IRQHandler+0x5a4>
 80037f4:	0000080f 	.word	0x0000080f
 80037f8:	04000120 	.word	0x04000120
 80037fc:	080042c5 	.word	0x080042c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003804:	2b01      	cmp	r3, #1
 8003806:	d000      	beq.n	800380a <HAL_UART_IRQHandler+0x2ae>
 8003808:	e139      	b.n	8003a7e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800380a:	23a4      	movs	r3, #164	@ 0xa4
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2210      	movs	r2, #16
 8003812:	4013      	ands	r3, r2
 8003814:	d100      	bne.n	8003818 <HAL_UART_IRQHandler+0x2bc>
 8003816:	e132      	b.n	8003a7e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003818:	23a0      	movs	r3, #160	@ 0xa0
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2210      	movs	r2, #16
 8003820:	4013      	ands	r3, r2
 8003822:	d100      	bne.n	8003826 <HAL_UART_IRQHandler+0x2ca>
 8003824:	e12b      	b.n	8003a7e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2210      	movs	r2, #16
 800382c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2240      	movs	r2, #64	@ 0x40
 8003836:	4013      	ands	r3, r2
 8003838:	2b40      	cmp	r3, #64	@ 0x40
 800383a:	d000      	beq.n	800383e <HAL_UART_IRQHandler+0x2e2>
 800383c:	e09f      	b.n	800397e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	217e      	movs	r1, #126	@ 0x7e
 8003848:	187b      	adds	r3, r7, r1
 800384a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800384c:	187b      	adds	r3, r7, r1
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d100      	bne.n	8003856 <HAL_UART_IRQHandler+0x2fa>
 8003854:	e156      	b.n	8003b04 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2258      	movs	r2, #88	@ 0x58
 800385a:	5a9b      	ldrh	r3, [r3, r2]
 800385c:	187a      	adds	r2, r7, r1
 800385e:	8812      	ldrh	r2, [r2, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d300      	bcc.n	8003866 <HAL_UART_IRQHandler+0x30a>
 8003864:	e14e      	b.n	8003b04 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	187a      	adds	r2, r7, r1
 800386a:	215a      	movs	r1, #90	@ 0x5a
 800386c:	8812      	ldrh	r2, [r2, #0]
 800386e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	2b20      	cmp	r3, #32
 8003878:	d06f      	beq.n	800395a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800387a:	f3ef 8310 	mrs	r3, PRIMASK
 800387e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003882:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003884:	2301      	movs	r3, #1
 8003886:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800388a:	f383 8810 	msr	PRIMASK, r3
}
 800388e:	46c0      	nop			@ (mov r8, r8)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	499e      	ldr	r1, [pc, #632]	@ (8003b14 <HAL_UART_IRQHandler+0x5b8>)
 800389c:	400a      	ands	r2, r1
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a6:	f383 8810 	msr	PRIMASK, r3
}
 80038aa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ac:	f3ef 8310 	mrs	r3, PRIMASK
 80038b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80038b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b4:	677b      	str	r3, [r7, #116]	@ 0x74
 80038b6:	2301      	movs	r3, #1
 80038b8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038bc:	f383 8810 	msr	PRIMASK, r3
}
 80038c0:	46c0      	nop			@ (mov r8, r8)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2101      	movs	r1, #1
 80038ce:	438a      	bics	r2, r1
 80038d0:	609a      	str	r2, [r3, #8]
 80038d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038d4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038d8:	f383 8810 	msr	PRIMASK, r3
}
 80038dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038de:	f3ef 8310 	mrs	r3, PRIMASK
 80038e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80038e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80038e8:	2301      	movs	r3, #1
 80038ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038ee:	f383 8810 	msr	PRIMASK, r3
}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2140      	movs	r1, #64	@ 0x40
 8003900:	438a      	bics	r2, r1
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003906:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800390a:	f383 8810 	msr	PRIMASK, r3
}
 800390e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2280      	movs	r2, #128	@ 0x80
 8003914:	2120      	movs	r1, #32
 8003916:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800391e:	f3ef 8310 	mrs	r3, PRIMASK
 8003922:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003926:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003928:	2301      	movs	r3, #1
 800392a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800392e:	f383 8810 	msr	PRIMASK, r3
}
 8003932:	46c0      	nop			@ (mov r8, r8)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2110      	movs	r1, #16
 8003940:	438a      	bics	r2, r1
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003946:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003948:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800394a:	f383 8810 	msr	PRIMASK, r3
}
 800394e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003954:	0018      	movs	r0, r3
 8003956:	f7fd fd3d 	bl	80013d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2202      	movs	r2, #2
 800395e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2258      	movs	r2, #88	@ 0x58
 8003964:	5a9a      	ldrh	r2, [r3, r2]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	215a      	movs	r1, #90	@ 0x5a
 800396a:	5a5b      	ldrh	r3, [r3, r1]
 800396c:	b29b      	uxth	r3, r3
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	b29a      	uxth	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	0011      	movs	r1, r2
 8003976:	0018      	movs	r0, r3
 8003978:	f000 f8e0 	bl	8003b3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800397c:	e0c2      	b.n	8003b04 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2258      	movs	r2, #88	@ 0x58
 8003982:	5a99      	ldrh	r1, [r3, r2]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	225a      	movs	r2, #90	@ 0x5a
 8003988:	5a9b      	ldrh	r3, [r3, r2]
 800398a:	b29a      	uxth	r2, r3
 800398c:	208e      	movs	r0, #142	@ 0x8e
 800398e:	183b      	adds	r3, r7, r0
 8003990:	1a8a      	subs	r2, r1, r2
 8003992:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	225a      	movs	r2, #90	@ 0x5a
 8003998:	5a9b      	ldrh	r3, [r3, r2]
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d100      	bne.n	80039a2 <HAL_UART_IRQHandler+0x446>
 80039a0:	e0b2      	b.n	8003b08 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80039a2:	183b      	adds	r3, r7, r0
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d100      	bne.n	80039ac <HAL_UART_IRQHandler+0x450>
 80039aa:	e0ad      	b.n	8003b08 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ac:	f3ef 8310 	mrs	r3, PRIMASK
 80039b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80039b2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039b4:	2488      	movs	r4, #136	@ 0x88
 80039b6:	193a      	adds	r2, r7, r4
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	2301      	movs	r3, #1
 80039bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f383 8810 	msr	PRIMASK, r3
}
 80039c4:	46c0      	nop			@ (mov r8, r8)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4951      	ldr	r1, [pc, #324]	@ (8003b18 <HAL_UART_IRQHandler+0x5bc>)
 80039d2:	400a      	ands	r2, r1
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	193b      	adds	r3, r7, r4
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f383 8810 	msr	PRIMASK, r3
}
 80039e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e4:	f3ef 8310 	mrs	r3, PRIMASK
 80039e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80039ea:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ec:	2484      	movs	r4, #132	@ 0x84
 80039ee:	193a      	adds	r2, r7, r4
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	2301      	movs	r3, #1
 80039f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	f383 8810 	msr	PRIMASK, r3
}
 80039fc:	46c0      	nop			@ (mov r8, r8)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2101      	movs	r1, #1
 8003a0a:	438a      	bics	r2, r1
 8003a0c:	609a      	str	r2, [r3, #8]
 8003a0e:	193b      	adds	r3, r7, r4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	f383 8810 	msr	PRIMASK, r3
}
 8003a1a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2280      	movs	r2, #128	@ 0x80
 8003a20:	2120      	movs	r1, #32
 8003a22:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a30:	f3ef 8310 	mrs	r3, PRIMASK
 8003a34:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a38:	2480      	movs	r4, #128	@ 0x80
 8003a3a:	193a      	adds	r2, r7, r4
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	2301      	movs	r3, #1
 8003a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a44:	f383 8810 	msr	PRIMASK, r3
}
 8003a48:	46c0      	nop			@ (mov r8, r8)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2110      	movs	r1, #16
 8003a56:	438a      	bics	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	193b      	adds	r3, r7, r4
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a62:	f383 8810 	msr	PRIMASK, r3
}
 8003a66:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a6e:	183b      	adds	r3, r7, r0
 8003a70:	881a      	ldrh	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	0011      	movs	r1, r2
 8003a76:	0018      	movs	r0, r3
 8003a78:	f000 f860 	bl	8003b3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a7c:	e044      	b.n	8003b08 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a7e:	23a4      	movs	r3, #164	@ 0xa4
 8003a80:	18fb      	adds	r3, r7, r3
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	2380      	movs	r3, #128	@ 0x80
 8003a86:	035b      	lsls	r3, r3, #13
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d010      	beq.n	8003aae <HAL_UART_IRQHandler+0x552>
 8003a8c:	239c      	movs	r3, #156	@ 0x9c
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	2380      	movs	r3, #128	@ 0x80
 8003a94:	03db      	lsls	r3, r3, #15
 8003a96:	4013      	ands	r3, r2
 8003a98:	d009      	beq.n	8003aae <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2280      	movs	r2, #128	@ 0x80
 8003aa0:	0352      	lsls	r2, r2, #13
 8003aa2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f000 fc4e 	bl	8004348 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003aac:	e02f      	b.n	8003b0e <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003aae:	23a4      	movs	r3, #164	@ 0xa4
 8003ab0:	18fb      	adds	r3, r7, r3
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2280      	movs	r2, #128	@ 0x80
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d00f      	beq.n	8003ada <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003aba:	23a0      	movs	r3, #160	@ 0xa0
 8003abc:	18fb      	adds	r3, r7, r3
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2280      	movs	r2, #128	@ 0x80
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d009      	beq.n	8003ada <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d01e      	beq.n	8003b0c <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	0010      	movs	r0, r2
 8003ad6:	4798      	blx	r3
    }
    return;
 8003ad8:	e018      	b.n	8003b0c <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ada:	23a4      	movs	r3, #164	@ 0xa4
 8003adc:	18fb      	adds	r3, r7, r3
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2240      	movs	r2, #64	@ 0x40
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d013      	beq.n	8003b0e <HAL_UART_IRQHandler+0x5b2>
 8003ae6:	23a0      	movs	r3, #160	@ 0xa0
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2240      	movs	r2, #64	@ 0x40
 8003aee:	4013      	ands	r3, r2
 8003af0:	d00d      	beq.n	8003b0e <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	0018      	movs	r0, r3
 8003af6:	f000 fbfc 	bl	80042f2 <UART_EndTransmit_IT>
    return;
 8003afa:	e008      	b.n	8003b0e <HAL_UART_IRQHandler+0x5b2>
      return;
 8003afc:	46c0      	nop			@ (mov r8, r8)
 8003afe:	e006      	b.n	8003b0e <HAL_UART_IRQHandler+0x5b2>
    return;
 8003b00:	46c0      	nop			@ (mov r8, r8)
 8003b02:	e004      	b.n	8003b0e <HAL_UART_IRQHandler+0x5b2>
      return;
 8003b04:	46c0      	nop			@ (mov r8, r8)
 8003b06:	e002      	b.n	8003b0e <HAL_UART_IRQHandler+0x5b2>
      return;
 8003b08:	46c0      	nop			@ (mov r8, r8)
 8003b0a:	e000      	b.n	8003b0e <HAL_UART_IRQHandler+0x5b2>
    return;
 8003b0c:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b02b      	add	sp, #172	@ 0xac
 8003b12:	bd90      	pop	{r4, r7, pc}
 8003b14:	fffffeff 	.word	0xfffffeff
 8003b18:	fffffedf 	.word	0xfffffedf

08003b1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b24:	46c0      	nop			@ (mov r8, r8)
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b002      	add	sp, #8
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b34:	46c0      	nop			@ (mov r8, r8)
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b002      	add	sp, #8
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	000a      	movs	r2, r1
 8003b46:	1cbb      	adds	r3, r7, #2
 8003b48:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b4a:	46c0      	nop			@ (mov r8, r8)
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b002      	add	sp, #8
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b5c:	231e      	movs	r3, #30
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4aaf      	ldr	r2, [pc, #700]	@ (8003e40 <UART_SetConfig+0x2ec>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	0019      	movs	r1, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	4aaa      	ldr	r2, [pc, #680]	@ (8003e44 <UART_SetConfig+0x2f0>)
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	0019      	movs	r1, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	4aa1      	ldr	r2, [pc, #644]	@ (8003e48 <UART_SetConfig+0x2f4>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	0019      	movs	r1, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a9d      	ldr	r2, [pc, #628]	@ (8003e4c <UART_SetConfig+0x2f8>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d127      	bne.n	8003c2a <UART_SetConfig+0xd6>
 8003bda:	4b9d      	ldr	r3, [pc, #628]	@ (8003e50 <UART_SetConfig+0x2fc>)
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bde:	2203      	movs	r2, #3
 8003be0:	4013      	ands	r3, r2
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d00d      	beq.n	8003c02 <UART_SetConfig+0xae>
 8003be6:	d81b      	bhi.n	8003c20 <UART_SetConfig+0xcc>
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d014      	beq.n	8003c16 <UART_SetConfig+0xc2>
 8003bec:	d818      	bhi.n	8003c20 <UART_SetConfig+0xcc>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <UART_SetConfig+0xa4>
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d00a      	beq.n	8003c0c <UART_SetConfig+0xb8>
 8003bf6:	e013      	b.n	8003c20 <UART_SetConfig+0xcc>
 8003bf8:	231f      	movs	r3, #31
 8003bfa:	18fb      	adds	r3, r7, r3
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]
 8003c00:	e065      	b.n	8003cce <UART_SetConfig+0x17a>
 8003c02:	231f      	movs	r3, #31
 8003c04:	18fb      	adds	r3, r7, r3
 8003c06:	2202      	movs	r2, #2
 8003c08:	701a      	strb	r2, [r3, #0]
 8003c0a:	e060      	b.n	8003cce <UART_SetConfig+0x17a>
 8003c0c:	231f      	movs	r3, #31
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	2204      	movs	r2, #4
 8003c12:	701a      	strb	r2, [r3, #0]
 8003c14:	e05b      	b.n	8003cce <UART_SetConfig+0x17a>
 8003c16:	231f      	movs	r3, #31
 8003c18:	18fb      	adds	r3, r7, r3
 8003c1a:	2208      	movs	r2, #8
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	e056      	b.n	8003cce <UART_SetConfig+0x17a>
 8003c20:	231f      	movs	r3, #31
 8003c22:	18fb      	adds	r3, r7, r3
 8003c24:	2210      	movs	r2, #16
 8003c26:	701a      	strb	r2, [r3, #0]
 8003c28:	e051      	b.n	8003cce <UART_SetConfig+0x17a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a89      	ldr	r2, [pc, #548]	@ (8003e54 <UART_SetConfig+0x300>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d134      	bne.n	8003c9e <UART_SetConfig+0x14a>
 8003c34:	4b86      	ldr	r3, [pc, #536]	@ (8003e50 <UART_SetConfig+0x2fc>)
 8003c36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c38:	23c0      	movs	r3, #192	@ 0xc0
 8003c3a:	029b      	lsls	r3, r3, #10
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	22c0      	movs	r2, #192	@ 0xc0
 8003c40:	0292      	lsls	r2, r2, #10
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d017      	beq.n	8003c76 <UART_SetConfig+0x122>
 8003c46:	22c0      	movs	r2, #192	@ 0xc0
 8003c48:	0292      	lsls	r2, r2, #10
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d822      	bhi.n	8003c94 <UART_SetConfig+0x140>
 8003c4e:	2280      	movs	r2, #128	@ 0x80
 8003c50:	0292      	lsls	r2, r2, #10
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d019      	beq.n	8003c8a <UART_SetConfig+0x136>
 8003c56:	2280      	movs	r2, #128	@ 0x80
 8003c58:	0292      	lsls	r2, r2, #10
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d81a      	bhi.n	8003c94 <UART_SetConfig+0x140>
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d004      	beq.n	8003c6c <UART_SetConfig+0x118>
 8003c62:	2280      	movs	r2, #128	@ 0x80
 8003c64:	0252      	lsls	r2, r2, #9
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00a      	beq.n	8003c80 <UART_SetConfig+0x12c>
 8003c6a:	e013      	b.n	8003c94 <UART_SetConfig+0x140>
 8003c6c:	231f      	movs	r3, #31
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
 8003c74:	e02b      	b.n	8003cce <UART_SetConfig+0x17a>
 8003c76:	231f      	movs	r3, #31
 8003c78:	18fb      	adds	r3, r7, r3
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	701a      	strb	r2, [r3, #0]
 8003c7e:	e026      	b.n	8003cce <UART_SetConfig+0x17a>
 8003c80:	231f      	movs	r3, #31
 8003c82:	18fb      	adds	r3, r7, r3
 8003c84:	2204      	movs	r2, #4
 8003c86:	701a      	strb	r2, [r3, #0]
 8003c88:	e021      	b.n	8003cce <UART_SetConfig+0x17a>
 8003c8a:	231f      	movs	r3, #31
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	2208      	movs	r2, #8
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	e01c      	b.n	8003cce <UART_SetConfig+0x17a>
 8003c94:	231f      	movs	r3, #31
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	2210      	movs	r2, #16
 8003c9a:	701a      	strb	r2, [r3, #0]
 8003c9c:	e017      	b.n	8003cce <UART_SetConfig+0x17a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a6d      	ldr	r2, [pc, #436]	@ (8003e58 <UART_SetConfig+0x304>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d104      	bne.n	8003cb2 <UART_SetConfig+0x15e>
 8003ca8:	231f      	movs	r3, #31
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]
 8003cb0:	e00d      	b.n	8003cce <UART_SetConfig+0x17a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a69      	ldr	r2, [pc, #420]	@ (8003e5c <UART_SetConfig+0x308>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d104      	bne.n	8003cc6 <UART_SetConfig+0x172>
 8003cbc:	231f      	movs	r3, #31
 8003cbe:	18fb      	adds	r3, r7, r3
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	701a      	strb	r2, [r3, #0]
 8003cc4:	e003      	b.n	8003cce <UART_SetConfig+0x17a>
 8003cc6:	231f      	movs	r3, #31
 8003cc8:	18fb      	adds	r3, r7, r3
 8003cca:	2210      	movs	r2, #16
 8003ccc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69da      	ldr	r2, [r3, #28]
 8003cd2:	2380      	movs	r3, #128	@ 0x80
 8003cd4:	021b      	lsls	r3, r3, #8
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d15c      	bne.n	8003d94 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8003cda:	231f      	movs	r3, #31
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d015      	beq.n	8003d10 <UART_SetConfig+0x1bc>
 8003ce4:	dc18      	bgt.n	8003d18 <UART_SetConfig+0x1c4>
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d00d      	beq.n	8003d06 <UART_SetConfig+0x1b2>
 8003cea:	dc15      	bgt.n	8003d18 <UART_SetConfig+0x1c4>
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <UART_SetConfig+0x1a2>
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d005      	beq.n	8003d00 <UART_SetConfig+0x1ac>
 8003cf4:	e010      	b.n	8003d18 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cf6:	f7fe fd37 	bl	8002768 <HAL_RCC_GetPCLK1Freq>
 8003cfa:	0003      	movs	r3, r0
 8003cfc:	61bb      	str	r3, [r7, #24]
        break;
 8003cfe:	e012      	b.n	8003d26 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d00:	4b57      	ldr	r3, [pc, #348]	@ (8003e60 <UART_SetConfig+0x30c>)
 8003d02:	61bb      	str	r3, [r7, #24]
        break;
 8003d04:	e00f      	b.n	8003d26 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d06:	f7fe fcb3 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 8003d0a:	0003      	movs	r3, r0
 8003d0c:	61bb      	str	r3, [r7, #24]
        break;
 8003d0e:	e00a      	b.n	8003d26 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d10:	2380      	movs	r3, #128	@ 0x80
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	61bb      	str	r3, [r7, #24]
        break;
 8003d16:	e006      	b.n	8003d26 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d1c:	231e      	movs	r3, #30
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	2201      	movs	r2, #1
 8003d22:	701a      	strb	r2, [r3, #0]
        break;
 8003d24:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d100      	bne.n	8003d2e <UART_SetConfig+0x1da>
 8003d2c:	e07a      	b.n	8003e24 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	005a      	lsls	r2, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	085b      	lsrs	r3, r3, #1
 8003d38:	18d2      	adds	r2, r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	0019      	movs	r1, r3
 8003d40:	0010      	movs	r0, r2
 8003d42:	f7fc f9e1 	bl	8000108 <__udivsi3>
 8003d46:	0003      	movs	r3, r0
 8003d48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	2b0f      	cmp	r3, #15
 8003d4e:	d91c      	bls.n	8003d8a <UART_SetConfig+0x236>
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	2380      	movs	r3, #128	@ 0x80
 8003d54:	025b      	lsls	r3, r3, #9
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d217      	bcs.n	8003d8a <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	200e      	movs	r0, #14
 8003d60:	183b      	adds	r3, r7, r0
 8003d62:	210f      	movs	r1, #15
 8003d64:	438a      	bics	r2, r1
 8003d66:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	085b      	lsrs	r3, r3, #1
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2207      	movs	r2, #7
 8003d70:	4013      	ands	r3, r2
 8003d72:	b299      	uxth	r1, r3
 8003d74:	183b      	adds	r3, r7, r0
 8003d76:	183a      	adds	r2, r7, r0
 8003d78:	8812      	ldrh	r2, [r2, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	183a      	adds	r2, r7, r0
 8003d84:	8812      	ldrh	r2, [r2, #0]
 8003d86:	60da      	str	r2, [r3, #12]
 8003d88:	e04c      	b.n	8003e24 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003d8a:	231e      	movs	r3, #30
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	2201      	movs	r2, #1
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	e047      	b.n	8003e24 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d94:	231f      	movs	r3, #31
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d015      	beq.n	8003dca <UART_SetConfig+0x276>
 8003d9e:	dc18      	bgt.n	8003dd2 <UART_SetConfig+0x27e>
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d00d      	beq.n	8003dc0 <UART_SetConfig+0x26c>
 8003da4:	dc15      	bgt.n	8003dd2 <UART_SetConfig+0x27e>
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <UART_SetConfig+0x25c>
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d005      	beq.n	8003dba <UART_SetConfig+0x266>
 8003dae:	e010      	b.n	8003dd2 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db0:	f7fe fcda 	bl	8002768 <HAL_RCC_GetPCLK1Freq>
 8003db4:	0003      	movs	r3, r0
 8003db6:	61bb      	str	r3, [r7, #24]
        break;
 8003db8:	e012      	b.n	8003de0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dba:	4b29      	ldr	r3, [pc, #164]	@ (8003e60 <UART_SetConfig+0x30c>)
 8003dbc:	61bb      	str	r3, [r7, #24]
        break;
 8003dbe:	e00f      	b.n	8003de0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dc0:	f7fe fc56 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	61bb      	str	r3, [r7, #24]
        break;
 8003dc8:	e00a      	b.n	8003de0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dca:	2380      	movs	r3, #128	@ 0x80
 8003dcc:	021b      	lsls	r3, r3, #8
 8003dce:	61bb      	str	r3, [r7, #24]
        break;
 8003dd0:	e006      	b.n	8003de0 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dd6:	231e      	movs	r3, #30
 8003dd8:	18fb      	adds	r3, r7, r3
 8003dda:	2201      	movs	r2, #1
 8003ddc:	701a      	strb	r2, [r3, #0]
        break;
 8003dde:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d01e      	beq.n	8003e24 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	085a      	lsrs	r2, r3, #1
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	18d2      	adds	r2, r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	0019      	movs	r1, r3
 8003df6:	0010      	movs	r0, r2
 8003df8:	f7fc f986 	bl	8000108 <__udivsi3>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b0f      	cmp	r3, #15
 8003e04:	d90a      	bls.n	8003e1c <UART_SetConfig+0x2c8>
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	2380      	movs	r3, #128	@ 0x80
 8003e0a:	025b      	lsls	r3, r3, #9
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d205      	bcs.n	8003e1c <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	60da      	str	r2, [r3, #12]
 8003e1a:	e003      	b.n	8003e24 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003e1c:	231e      	movs	r3, #30
 8003e1e:	18fb      	adds	r3, r7, r3
 8003e20:	2201      	movs	r2, #1
 8003e22:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e30:	231e      	movs	r3, #30
 8003e32:	18fb      	adds	r3, r7, r3
 8003e34:	781b      	ldrb	r3, [r3, #0]
}
 8003e36:	0018      	movs	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b008      	add	sp, #32
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	46c0      	nop			@ (mov r8, r8)
 8003e40:	efff69f3 	.word	0xefff69f3
 8003e44:	ffffcfff 	.word	0xffffcfff
 8003e48:	fffff4ff 	.word	0xfffff4ff
 8003e4c:	40013800 	.word	0x40013800
 8003e50:	40021000 	.word	0x40021000
 8003e54:	40004400 	.word	0x40004400
 8003e58:	40004800 	.word	0x40004800
 8003e5c:	40004c00 	.word	0x40004c00
 8003e60:	007a1200 	.word	0x007a1200

08003e64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e70:	2208      	movs	r2, #8
 8003e72:	4013      	ands	r3, r2
 8003e74:	d00b      	beq.n	8003e8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	4a4a      	ldr	r2, [pc, #296]	@ (8003fa8 <UART_AdvFeatureConfig+0x144>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	0019      	movs	r1, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e92:	2201      	movs	r2, #1
 8003e94:	4013      	ands	r3, r2
 8003e96:	d00b      	beq.n	8003eb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4a43      	ldr	r2, [pc, #268]	@ (8003fac <UART_AdvFeatureConfig+0x148>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	0019      	movs	r1, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d00b      	beq.n	8003ed2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	4a3b      	ldr	r2, [pc, #236]	@ (8003fb0 <UART_AdvFeatureConfig+0x14c>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	0019      	movs	r1, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed6:	2204      	movs	r2, #4
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d00b      	beq.n	8003ef4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	4a34      	ldr	r2, [pc, #208]	@ (8003fb4 <UART_AdvFeatureConfig+0x150>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	0019      	movs	r1, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	2210      	movs	r2, #16
 8003efa:	4013      	ands	r3, r2
 8003efc:	d00b      	beq.n	8003f16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	4a2c      	ldr	r2, [pc, #176]	@ (8003fb8 <UART_AdvFeatureConfig+0x154>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	0019      	movs	r1, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d00b      	beq.n	8003f38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	4a25      	ldr	r2, [pc, #148]	@ (8003fbc <UART_AdvFeatureConfig+0x158>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	0019      	movs	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3c:	2240      	movs	r2, #64	@ 0x40
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d01d      	beq.n	8003f7e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	4a1d      	ldr	r2, [pc, #116]	@ (8003fc0 <UART_AdvFeatureConfig+0x15c>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	0019      	movs	r1, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f5e:	2380      	movs	r3, #128	@ 0x80
 8003f60:	035b      	lsls	r3, r3, #13
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d10b      	bne.n	8003f7e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	4a15      	ldr	r2, [pc, #84]	@ (8003fc4 <UART_AdvFeatureConfig+0x160>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	0019      	movs	r1, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f82:	2280      	movs	r2, #128	@ 0x80
 8003f84:	4013      	ands	r3, r2
 8003f86:	d00b      	beq.n	8003fa0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	4a0e      	ldr	r2, [pc, #56]	@ (8003fc8 <UART_AdvFeatureConfig+0x164>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	0019      	movs	r1, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	605a      	str	r2, [r3, #4]
  }
}
 8003fa0:	46c0      	nop			@ (mov r8, r8)
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b002      	add	sp, #8
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	ffff7fff 	.word	0xffff7fff
 8003fac:	fffdffff 	.word	0xfffdffff
 8003fb0:	fffeffff 	.word	0xfffeffff
 8003fb4:	fffbffff 	.word	0xfffbffff
 8003fb8:	ffffefff 	.word	0xffffefff
 8003fbc:	ffffdfff 	.word	0xffffdfff
 8003fc0:	ffefffff 	.word	0xffefffff
 8003fc4:	ff9fffff 	.word	0xff9fffff
 8003fc8:	fff7ffff 	.word	0xfff7ffff

08003fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b092      	sub	sp, #72	@ 0x48
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2284      	movs	r2, #132	@ 0x84
 8003fd8:	2100      	movs	r1, #0
 8003fda:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fdc:	f7fd f8ca 	bl	8001174 <HAL_GetTick>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2208      	movs	r2, #8
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d12c      	bne.n	800404c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ff4:	2280      	movs	r2, #128	@ 0x80
 8003ff6:	0391      	lsls	r1, r2, #14
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	4a46      	ldr	r2, [pc, #280]	@ (8004114 <UART_CheckIdleState+0x148>)
 8003ffc:	9200      	str	r2, [sp, #0]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f000 f88c 	bl	800411c <UART_WaitOnFlagUntilTimeout>
 8004004:	1e03      	subs	r3, r0, #0
 8004006:	d021      	beq.n	800404c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004008:	f3ef 8310 	mrs	r3, PRIMASK
 800400c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004010:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004012:	2301      	movs	r3, #1
 8004014:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004018:	f383 8810 	msr	PRIMASK, r3
}
 800401c:	46c0      	nop			@ (mov r8, r8)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2180      	movs	r1, #128	@ 0x80
 800402a:	438a      	bics	r2, r1
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004034:	f383 8810 	msr	PRIMASK, r3
}
 8004038:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2278      	movs	r2, #120	@ 0x78
 8004044:	2100      	movs	r1, #0
 8004046:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e05f      	b.n	800410c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2204      	movs	r2, #4
 8004054:	4013      	ands	r3, r2
 8004056:	2b04      	cmp	r3, #4
 8004058:	d146      	bne.n	80040e8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800405a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800405c:	2280      	movs	r2, #128	@ 0x80
 800405e:	03d1      	lsls	r1, r2, #15
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	4a2c      	ldr	r2, [pc, #176]	@ (8004114 <UART_CheckIdleState+0x148>)
 8004064:	9200      	str	r2, [sp, #0]
 8004066:	2200      	movs	r2, #0
 8004068:	f000 f858 	bl	800411c <UART_WaitOnFlagUntilTimeout>
 800406c:	1e03      	subs	r3, r0, #0
 800406e:	d03b      	beq.n	80040e8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004070:	f3ef 8310 	mrs	r3, PRIMASK
 8004074:	60fb      	str	r3, [r7, #12]
  return(result);
 8004076:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004078:	637b      	str	r3, [r7, #52]	@ 0x34
 800407a:	2301      	movs	r3, #1
 800407c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f383 8810 	msr	PRIMASK, r3
}
 8004084:	46c0      	nop			@ (mov r8, r8)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4921      	ldr	r1, [pc, #132]	@ (8004118 <UART_CheckIdleState+0x14c>)
 8004092:	400a      	ands	r2, r1
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004098:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f383 8810 	msr	PRIMASK, r3
}
 80040a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040a2:	f3ef 8310 	mrs	r3, PRIMASK
 80040a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80040a8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80040ac:	2301      	movs	r3, #1
 80040ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f383 8810 	msr	PRIMASK, r3
}
 80040b6:	46c0      	nop			@ (mov r8, r8)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2101      	movs	r1, #1
 80040c4:	438a      	bics	r2, r1
 80040c6:	609a      	str	r2, [r3, #8]
 80040c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	f383 8810 	msr	PRIMASK, r3
}
 80040d2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2280      	movs	r2, #128	@ 0x80
 80040d8:	2120      	movs	r1, #32
 80040da:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2278      	movs	r2, #120	@ 0x78
 80040e0:	2100      	movs	r1, #0
 80040e2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e011      	b.n	800410c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2280      	movs	r2, #128	@ 0x80
 80040f2:	2120      	movs	r1, #32
 80040f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2278      	movs	r2, #120	@ 0x78
 8004106:	2100      	movs	r1, #0
 8004108:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	0018      	movs	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	b010      	add	sp, #64	@ 0x40
 8004112:	bd80      	pop	{r7, pc}
 8004114:	01ffffff 	.word	0x01ffffff
 8004118:	fffffedf 	.word	0xfffffedf

0800411c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	603b      	str	r3, [r7, #0]
 8004128:	1dfb      	adds	r3, r7, #7
 800412a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800412c:	e051      	b.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	3301      	adds	r3, #1
 8004132:	d04e      	beq.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004134:	f7fd f81e 	bl	8001174 <HAL_GetTick>
 8004138:	0002      	movs	r2, r0
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	429a      	cmp	r2, r3
 8004142:	d302      	bcc.n	800414a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e051      	b.n	80041f2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2204      	movs	r2, #4
 8004156:	4013      	ands	r3, r2
 8004158:	d03b      	beq.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b80      	cmp	r3, #128	@ 0x80
 800415e:	d038      	beq.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b40      	cmp	r3, #64	@ 0x40
 8004164:	d035      	beq.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	2208      	movs	r2, #8
 800416e:	4013      	ands	r3, r2
 8004170:	2b08      	cmp	r3, #8
 8004172:	d111      	bne.n	8004198 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2208      	movs	r2, #8
 800417a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	0018      	movs	r0, r3
 8004180:	f000 f83c 	bl	80041fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2284      	movs	r2, #132	@ 0x84
 8004188:	2108      	movs	r1, #8
 800418a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2278      	movs	r2, #120	@ 0x78
 8004190:	2100      	movs	r1, #0
 8004192:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e02c      	b.n	80041f2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	69da      	ldr	r2, [r3, #28]
 800419e:	2380      	movs	r3, #128	@ 0x80
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	401a      	ands	r2, r3
 80041a4:	2380      	movs	r3, #128	@ 0x80
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d112      	bne.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2280      	movs	r2, #128	@ 0x80
 80041b2:	0112      	lsls	r2, r2, #4
 80041b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	0018      	movs	r0, r3
 80041ba:	f000 f81f 	bl	80041fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2284      	movs	r2, #132	@ 0x84
 80041c2:	2120      	movs	r1, #32
 80041c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2278      	movs	r2, #120	@ 0x78
 80041ca:	2100      	movs	r1, #0
 80041cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e00f      	b.n	80041f2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	4013      	ands	r3, r2
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	425a      	negs	r2, r3
 80041e2:	4153      	adcs	r3, r2
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	001a      	movs	r2, r3
 80041e8:	1dfb      	adds	r3, r7, #7
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d09e      	beq.n	800412e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	0018      	movs	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b004      	add	sp, #16
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b08e      	sub	sp, #56	@ 0x38
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004204:	f3ef 8310 	mrs	r3, PRIMASK
 8004208:	617b      	str	r3, [r7, #20]
  return(result);
 800420a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800420c:	637b      	str	r3, [r7, #52]	@ 0x34
 800420e:	2301      	movs	r3, #1
 8004210:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	f383 8810 	msr	PRIMASK, r3
}
 8004218:	46c0      	nop			@ (mov r8, r8)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4926      	ldr	r1, [pc, #152]	@ (80042c0 <UART_EndRxTransfer+0xc4>)
 8004226:	400a      	ands	r2, r1
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800422c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	f383 8810 	msr	PRIMASK, r3
}
 8004234:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004236:	f3ef 8310 	mrs	r3, PRIMASK
 800423a:	623b      	str	r3, [r7, #32]
  return(result);
 800423c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004240:	2301      	movs	r3, #1
 8004242:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	f383 8810 	msr	PRIMASK, r3
}
 800424a:	46c0      	nop			@ (mov r8, r8)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2101      	movs	r1, #1
 8004258:	438a      	bics	r2, r1
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004262:	f383 8810 	msr	PRIMASK, r3
}
 8004266:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800426c:	2b01      	cmp	r3, #1
 800426e:	d118      	bne.n	80042a2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004270:	f3ef 8310 	mrs	r3, PRIMASK
 8004274:	60bb      	str	r3, [r7, #8]
  return(result);
 8004276:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004278:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800427a:	2301      	movs	r3, #1
 800427c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f383 8810 	msr	PRIMASK, r3
}
 8004284:	46c0      	nop			@ (mov r8, r8)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2110      	movs	r1, #16
 8004292:	438a      	bics	r2, r1
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004298:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f383 8810 	msr	PRIMASK, r3
}
 80042a0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2280      	movs	r2, #128	@ 0x80
 80042a6:	2120      	movs	r1, #32
 80042a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80042b6:	46c0      	nop			@ (mov r8, r8)
 80042b8:	46bd      	mov	sp, r7
 80042ba:	b00e      	add	sp, #56	@ 0x38
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	46c0      	nop			@ (mov r8, r8)
 80042c0:	fffffedf 	.word	0xfffffedf

080042c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	225a      	movs	r2, #90	@ 0x5a
 80042d6:	2100      	movs	r1, #0
 80042d8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2252      	movs	r2, #82	@ 0x52
 80042de:	2100      	movs	r1, #0
 80042e0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	0018      	movs	r0, r3
 80042e6:	f7ff fc21 	bl	8003b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042ea:	46c0      	nop			@ (mov r8, r8)
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b004      	add	sp, #16
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b086      	sub	sp, #24
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042fa:	f3ef 8310 	mrs	r3, PRIMASK
 80042fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004300:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	2301      	movs	r3, #1
 8004306:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f383 8810 	msr	PRIMASK, r3
}
 800430e:	46c0      	nop			@ (mov r8, r8)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2140      	movs	r1, #64	@ 0x40
 800431c:	438a      	bics	r2, r1
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f383 8810 	msr	PRIMASK, r3
}
 800432a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	0018      	movs	r0, r3
 800433c:	f7ff fbee 	bl	8003b1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004340:	46c0      	nop			@ (mov r8, r8)
 8004342:	46bd      	mov	sp, r7
 8004344:	b006      	add	sp, #24
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004350:	46c0      	nop			@ (mov r8, r8)
 8004352:	46bd      	mov	sp, r7
 8004354:	b002      	add	sp, #8
 8004356:	bd80      	pop	{r7, pc}

08004358 <memset>:
 8004358:	0003      	movs	r3, r0
 800435a:	1882      	adds	r2, r0, r2
 800435c:	4293      	cmp	r3, r2
 800435e:	d100      	bne.n	8004362 <memset+0xa>
 8004360:	4770      	bx	lr
 8004362:	7019      	strb	r1, [r3, #0]
 8004364:	3301      	adds	r3, #1
 8004366:	e7f9      	b.n	800435c <memset+0x4>

08004368 <__libc_init_array>:
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	2600      	movs	r6, #0
 800436c:	4c0c      	ldr	r4, [pc, #48]	@ (80043a0 <__libc_init_array+0x38>)
 800436e:	4d0d      	ldr	r5, [pc, #52]	@ (80043a4 <__libc_init_array+0x3c>)
 8004370:	1b64      	subs	r4, r4, r5
 8004372:	10a4      	asrs	r4, r4, #2
 8004374:	42a6      	cmp	r6, r4
 8004376:	d109      	bne.n	800438c <__libc_init_array+0x24>
 8004378:	2600      	movs	r6, #0
 800437a:	f000 f823 	bl	80043c4 <_init>
 800437e:	4c0a      	ldr	r4, [pc, #40]	@ (80043a8 <__libc_init_array+0x40>)
 8004380:	4d0a      	ldr	r5, [pc, #40]	@ (80043ac <__libc_init_array+0x44>)
 8004382:	1b64      	subs	r4, r4, r5
 8004384:	10a4      	asrs	r4, r4, #2
 8004386:	42a6      	cmp	r6, r4
 8004388:	d105      	bne.n	8004396 <__libc_init_array+0x2e>
 800438a:	bd70      	pop	{r4, r5, r6, pc}
 800438c:	00b3      	lsls	r3, r6, #2
 800438e:	58eb      	ldr	r3, [r5, r3]
 8004390:	4798      	blx	r3
 8004392:	3601      	adds	r6, #1
 8004394:	e7ee      	b.n	8004374 <__libc_init_array+0xc>
 8004396:	00b3      	lsls	r3, r6, #2
 8004398:	58eb      	ldr	r3, [r5, r3]
 800439a:	4798      	blx	r3
 800439c:	3601      	adds	r6, #1
 800439e:	e7f2      	b.n	8004386 <__libc_init_array+0x1e>
 80043a0:	0800441c 	.word	0x0800441c
 80043a4:	0800441c 	.word	0x0800441c
 80043a8:	08004420 	.word	0x08004420
 80043ac:	0800441c 	.word	0x0800441c

080043b0 <memcpy>:
 80043b0:	2300      	movs	r3, #0
 80043b2:	b510      	push	{r4, lr}
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d100      	bne.n	80043ba <memcpy+0xa>
 80043b8:	bd10      	pop	{r4, pc}
 80043ba:	5ccc      	ldrb	r4, [r1, r3]
 80043bc:	54c4      	strb	r4, [r0, r3]
 80043be:	3301      	adds	r3, #1
 80043c0:	e7f8      	b.n	80043b4 <memcpy+0x4>
	...

080043c4 <_init>:
 80043c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c6:	46c0      	nop			@ (mov r8, r8)
 80043c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ca:	bc08      	pop	{r3}
 80043cc:	469e      	mov	lr, r3
 80043ce:	4770      	bx	lr

080043d0 <_fini>:
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d2:	46c0      	nop			@ (mov r8, r8)
 80043d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d6:	bc08      	pop	{r3}
 80043d8:	469e      	mov	lr, r3
 80043da:	4770      	bx	lr
