
Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003474  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003534  08003534  00004534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800356c  0800356c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  0800356c  0800356c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800356c  0800356c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800356c  0800356c  0000456c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003570  08003570  00004570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003574  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000000c  08003580  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08003580  00005210  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e101  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000216a  00000000  00000000  00013135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  000152a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ee  00000000  00000000  00015f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013e8e  00000000  00000000  0001692e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010166  00000000  00000000  0002a7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079462  00000000  00000000  0003a922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3d84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d08  00000000  00000000  000b3dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000b6ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800351c 	.word	0x0800351c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800351c 	.word	0x0800351c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b08a      	sub	sp, #40	@ 0x28
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fb8b 	bl	8000940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f829 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f95b 	bl	80004e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000232:	f000 f93b 	bl	80004ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000236:	f000 f8d9 	bl	80003ec <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800023a:	f000 f879 	bl	8000330 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800023e:	f000 f905 	bl	800044c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000242:	4b0b      	ldr	r3, [pc, #44]	@ (8000270 <main+0x50>)
 8000244:	0018      	movs	r0, r3
 8000246:	f001 fe21 	bl	8001e8c <HAL_TIM_Base_Start_IT>

  uint8_t rx_data;
  uint8_t cmd[] = {0x11, 0x01, 0x16, 0xD8};
 800024a:	2324      	movs	r3, #36	@ 0x24
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	4a09      	ldr	r2, [pc, #36]	@ (8000274 <main+0x54>)
 8000250:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    if (g_timer_ms_1000 == ENABLE)
 8000252:	4b09      	ldr	r3, [pc, #36]	@ (8000278 <main+0x58>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b01      	cmp	r3, #1
 8000258:	d1fb      	bne.n	8000252 <main+0x32>
    {
      g_timer_ms_1000 = DISABLE;
 800025a:	4b07      	ldr	r3, [pc, #28]	@ (8000278 <main+0x58>)
 800025c:	2200      	movs	r2, #0
 800025e:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000260:	2380      	movs	r3, #128	@ 0x80
 8000262:	019b      	lsls	r3, r3, #6
 8000264:	4a05      	ldr	r2, [pc, #20]	@ (800027c <main+0x5c>)
 8000266:	0019      	movs	r1, r3
 8000268:	0010      	movs	r0, r2
 800026a:	f000 ffc4 	bl	80011f6 <HAL_GPIO_TogglePin>
    if (g_timer_ms_1000 == ENABLE)
 800026e:	e7f0      	b.n	8000252 <main+0x32>
 8000270:	20000028 	.word	0x20000028
 8000274:	d8160111 	.word	0xd8160111
 8000278:	20000208 	.word	0x20000208
 800027c:	48000800 	.word	0x48000800

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b099      	sub	sp, #100	@ 0x64
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	242c      	movs	r4, #44	@ 0x2c
 8000288:	193b      	adds	r3, r7, r4
 800028a:	0018      	movs	r0, r3
 800028c:	2334      	movs	r3, #52	@ 0x34
 800028e:	001a      	movs	r2, r3
 8000290:	2100      	movs	r1, #0
 8000292:	f003 f917 	bl	80034c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000296:	231c      	movs	r3, #28
 8000298:	18fb      	adds	r3, r7, r3
 800029a:	0018      	movs	r0, r3
 800029c:	2310      	movs	r3, #16
 800029e:	001a      	movs	r2, r3
 80002a0:	2100      	movs	r1, #0
 80002a2:	f003 f90f 	bl	80034c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	0018      	movs	r0, r3
 80002aa:	2318      	movs	r3, #24
 80002ac:	001a      	movs	r2, r3
 80002ae:	2100      	movs	r1, #0
 80002b0:	f003 f908 	bl	80034c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b4:	0021      	movs	r1, r4
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2202      	movs	r2, #2
 80002ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2201      	movs	r2, #1
 80002c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2210      	movs	r2, #16
 80002c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2200      	movs	r2, #0
 80002cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 ffab 	bl	800122c <HAL_RCC_OscConfig>
 80002d6:	1e03      	subs	r3, r0, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002da:	f000 f95d 	bl	8000598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	211c      	movs	r1, #28
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2207      	movs	r2, #7
 80002e4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2200      	movs	r2, #0
 80002ea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2100      	movs	r1, #0
 80002fc:	0018      	movs	r0, r3
 80002fe:	f001 fb1b 	bl	8001938 <HAL_RCC_ClockConfig>
 8000302:	1e03      	subs	r3, r0, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000306:	f000 f947 	bl	8000598 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2202      	movs	r2, #2
 800030e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	0018      	movs	r0, r3
 800031a:	f001 fc79 	bl	8001c10 <HAL_RCCEx_PeriphCLKConfig>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000322:	f000 f939 	bl	8000598 <Error_Handler>
  }
}
 8000326:	46c0      	nop			@ (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	b019      	add	sp, #100	@ 0x64
 800032c:	bd90      	pop	{r4, r7, pc}
	...

08000330 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000336:	2308      	movs	r3, #8
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	0018      	movs	r0, r3
 800033c:	2310      	movs	r3, #16
 800033e:	001a      	movs	r2, r3
 8000340:	2100      	movs	r1, #0
 8000342:	f003 f8bf 	bl	80034c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000346:	003b      	movs	r3, r7
 8000348:	0018      	movs	r0, r3
 800034a:	2308      	movs	r3, #8
 800034c:	001a      	movs	r2, r3
 800034e:	2100      	movs	r1, #0
 8000350:	f003 f8b8 	bl	80034c4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000354:	4b22      	ldr	r3, [pc, #136]	@ (80003e0 <MX_TIM2_Init+0xb0>)
 8000356:	2280      	movs	r2, #128	@ 0x80
 8000358:	05d2      	lsls	r2, r2, #23
 800035a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800035c:	4b20      	ldr	r3, [pc, #128]	@ (80003e0 <MX_TIM2_Init+0xb0>)
 800035e:	4a21      	ldr	r2, [pc, #132]	@ (80003e4 <MX_TIM2_Init+0xb4>)
 8000360:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000362:	4b1f      	ldr	r3, [pc, #124]	@ (80003e0 <MX_TIM2_Init+0xb0>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000368:	4b1d      	ldr	r3, [pc, #116]	@ (80003e0 <MX_TIM2_Init+0xb0>)
 800036a:	4a1f      	ldr	r2, [pc, #124]	@ (80003e8 <MX_TIM2_Init+0xb8>)
 800036c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800036e:	4b1c      	ldr	r3, [pc, #112]	@ (80003e0 <MX_TIM2_Init+0xb0>)
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000374:	4b1a      	ldr	r3, [pc, #104]	@ (80003e0 <MX_TIM2_Init+0xb0>)
 8000376:	2200      	movs	r2, #0
 8000378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800037a:	4b19      	ldr	r3, [pc, #100]	@ (80003e0 <MX_TIM2_Init+0xb0>)
 800037c:	0018      	movs	r0, r3
 800037e:	f001 fd35 	bl	8001dec <HAL_TIM_Base_Init>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d001      	beq.n	800038a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000386:	f000 f907 	bl	8000598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800038a:	2108      	movs	r1, #8
 800038c:	187b      	adds	r3, r7, r1
 800038e:	2280      	movs	r2, #128	@ 0x80
 8000390:	0152      	lsls	r2, r2, #5
 8000392:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000394:	187a      	adds	r2, r7, r1
 8000396:	4b12      	ldr	r3, [pc, #72]	@ (80003e0 <MX_TIM2_Init+0xb0>)
 8000398:	0011      	movs	r1, r2
 800039a:	0018      	movs	r0, r3
 800039c:	f001 feb6 	bl	800210c <HAL_TIM_ConfigClockSource>
 80003a0:	1e03      	subs	r3, r0, #0
 80003a2:	d001      	beq.n	80003a8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80003a4:	f000 f8f8 	bl	8000598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003a8:	003b      	movs	r3, r7
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ae:	003b      	movs	r3, r7
 80003b0:	2200      	movs	r2, #0
 80003b2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003b4:	003a      	movs	r2, r7
 80003b6:	4b0a      	ldr	r3, [pc, #40]	@ (80003e0 <MX_TIM2_Init+0xb0>)
 80003b8:	0011      	movs	r1, r2
 80003ba:	0018      	movs	r0, r3
 80003bc:	f002 f8c2 	bl	8002544 <HAL_TIMEx_MasterConfigSynchronization>
 80003c0:	1e03      	subs	r3, r0, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80003c4:	f000 f8e8 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2100      	movs	r1, #0
 80003cc:	200f      	movs	r0, #15
 80003ce:	f000 fbc7 	bl	8000b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80003d2:	200f      	movs	r0, #15
 80003d4:	f000 fbd9 	bl	8000b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM2_Init 2 */

}
 80003d8:	46c0      	nop			@ (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	b006      	add	sp, #24
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	20000028 	.word	0x20000028
 80003e4:	00001f3f 	.word	0x00001f3f
 80003e8:	000003e7 	.word	0x000003e7

080003ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003f0:	4b14      	ldr	r3, [pc, #80]	@ (8000444 <MX_USART2_UART_Init+0x58>)
 80003f2:	4a15      	ldr	r2, [pc, #84]	@ (8000448 <MX_USART2_UART_Init+0x5c>)
 80003f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80003f6:	4b13      	ldr	r3, [pc, #76]	@ (8000444 <MX_USART2_UART_Init+0x58>)
 80003f8:	2296      	movs	r2, #150	@ 0x96
 80003fa:	0192      	lsls	r2, r2, #6
 80003fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003fe:	4b11      	ldr	r3, [pc, #68]	@ (8000444 <MX_USART2_UART_Init+0x58>)
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000404:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <MX_USART2_UART_Init+0x58>)
 8000406:	2200      	movs	r2, #0
 8000408:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800040a:	4b0e      	ldr	r3, [pc, #56]	@ (8000444 <MX_USART2_UART_Init+0x58>)
 800040c:	2200      	movs	r2, #0
 800040e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000410:	4b0c      	ldr	r3, [pc, #48]	@ (8000444 <MX_USART2_UART_Init+0x58>)
 8000412:	220c      	movs	r2, #12
 8000414:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000416:	4b0b      	ldr	r3, [pc, #44]	@ (8000444 <MX_USART2_UART_Init+0x58>)
 8000418:	2200      	movs	r2, #0
 800041a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800041c:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <MX_USART2_UART_Init+0x58>)
 800041e:	2200      	movs	r2, #0
 8000420:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000422:	4b08      	ldr	r3, [pc, #32]	@ (8000444 <MX_USART2_UART_Init+0x58>)
 8000424:	2200      	movs	r2, #0
 8000426:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000428:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <MX_USART2_UART_Init+0x58>)
 800042a:	2200      	movs	r2, #0
 800042c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800042e:	4b05      	ldr	r3, [pc, #20]	@ (8000444 <MX_USART2_UART_Init+0x58>)
 8000430:	0018      	movs	r0, r3
 8000432:	f002 f8f5 	bl	8002620 <HAL_UART_Init>
 8000436:	1e03      	subs	r3, r0, #0
 8000438:	d001      	beq.n	800043e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800043a:	f000 f8ad 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800043e:	46c0      	nop			@ (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000070 	.word	0x20000070
 8000448:	40004400 	.word	0x40004400

0800044c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000450:	4b14      	ldr	r3, [pc, #80]	@ (80004a4 <MX_USART3_UART_Init+0x58>)
 8000452:	4a15      	ldr	r2, [pc, #84]	@ (80004a8 <MX_USART3_UART_Init+0x5c>)
 8000454:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000456:	4b13      	ldr	r3, [pc, #76]	@ (80004a4 <MX_USART3_UART_Init+0x58>)
 8000458:	2296      	movs	r2, #150	@ 0x96
 800045a:	0192      	lsls	r2, r2, #6
 800045c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800045e:	4b11      	ldr	r3, [pc, #68]	@ (80004a4 <MX_USART3_UART_Init+0x58>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000464:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <MX_USART3_UART_Init+0x58>)
 8000466:	2200      	movs	r2, #0
 8000468:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800046a:	4b0e      	ldr	r3, [pc, #56]	@ (80004a4 <MX_USART3_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000470:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <MX_USART3_UART_Init+0x58>)
 8000472:	220c      	movs	r2, #12
 8000474:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000476:	4b0b      	ldr	r3, [pc, #44]	@ (80004a4 <MX_USART3_UART_Init+0x58>)
 8000478:	2200      	movs	r2, #0
 800047a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800047c:	4b09      	ldr	r3, [pc, #36]	@ (80004a4 <MX_USART3_UART_Init+0x58>)
 800047e:	2200      	movs	r2, #0
 8000480:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000482:	4b08      	ldr	r3, [pc, #32]	@ (80004a4 <MX_USART3_UART_Init+0x58>)
 8000484:	2200      	movs	r2, #0
 8000486:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <MX_USART3_UART_Init+0x58>)
 800048a:	2200      	movs	r2, #0
 800048c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800048e:	4b05      	ldr	r3, [pc, #20]	@ (80004a4 <MX_USART3_UART_Init+0x58>)
 8000490:	0018      	movs	r0, r3
 8000492:	f002 f8c5 	bl	8002620 <HAL_UART_Init>
 8000496:	1e03      	subs	r3, r0, #0
 8000498:	d001      	beq.n	800049e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800049a:	f000 f87d 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800049e:	46c0      	nop			@ (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	200000f8 	.word	0x200000f8
 80004a8:	40004800 	.word	0x40004800

080004ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004b2:	4b0c      	ldr	r3, [pc, #48]	@ (80004e4 <MX_DMA_Init+0x38>)
 80004b4:	695a      	ldr	r2, [r3, #20]
 80004b6:	4b0b      	ldr	r3, [pc, #44]	@ (80004e4 <MX_DMA_Init+0x38>)
 80004b8:	2101      	movs	r1, #1
 80004ba:	430a      	orrs	r2, r1
 80004bc:	615a      	str	r2, [r3, #20]
 80004be:	4b09      	ldr	r3, [pc, #36]	@ (80004e4 <MX_DMA_Init+0x38>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	2201      	movs	r2, #1
 80004c4:	4013      	ands	r3, r2
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2100      	movs	r1, #0
 80004ce:	200b      	movs	r0, #11
 80004d0:	f000 fb46 	bl	8000b60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80004d4:	200b      	movs	r0, #11
 80004d6:	f000 fb58 	bl	8000b8a <HAL_NVIC_EnableIRQ>

}
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b002      	add	sp, #8
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)
 80004e4:	40021000 	.word	0x40021000

080004e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b089      	sub	sp, #36	@ 0x24
 80004ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	240c      	movs	r4, #12
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	0018      	movs	r0, r3
 80004f4:	2314      	movs	r3, #20
 80004f6:	001a      	movs	r2, r3
 80004f8:	2100      	movs	r1, #0
 80004fa:	f002 ffe3 	bl	80034c4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	4b24      	ldr	r3, [pc, #144]	@ (8000590 <MX_GPIO_Init+0xa8>)
 8000500:	695a      	ldr	r2, [r3, #20]
 8000502:	4b23      	ldr	r3, [pc, #140]	@ (8000590 <MX_GPIO_Init+0xa8>)
 8000504:	2180      	movs	r1, #128	@ 0x80
 8000506:	0309      	lsls	r1, r1, #12
 8000508:	430a      	orrs	r2, r1
 800050a:	615a      	str	r2, [r3, #20]
 800050c:	4b20      	ldr	r3, [pc, #128]	@ (8000590 <MX_GPIO_Init+0xa8>)
 800050e:	695a      	ldr	r2, [r3, #20]
 8000510:	2380      	movs	r3, #128	@ 0x80
 8000512:	031b      	lsls	r3, r3, #12
 8000514:	4013      	ands	r3, r2
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051a:	4b1d      	ldr	r3, [pc, #116]	@ (8000590 <MX_GPIO_Init+0xa8>)
 800051c:	695a      	ldr	r2, [r3, #20]
 800051e:	4b1c      	ldr	r3, [pc, #112]	@ (8000590 <MX_GPIO_Init+0xa8>)
 8000520:	2180      	movs	r1, #128	@ 0x80
 8000522:	0289      	lsls	r1, r1, #10
 8000524:	430a      	orrs	r2, r1
 8000526:	615a      	str	r2, [r3, #20]
 8000528:	4b19      	ldr	r3, [pc, #100]	@ (8000590 <MX_GPIO_Init+0xa8>)
 800052a:	695a      	ldr	r2, [r3, #20]
 800052c:	2380      	movs	r3, #128	@ 0x80
 800052e:	029b      	lsls	r3, r3, #10
 8000530:	4013      	ands	r3, r2
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000536:	4b16      	ldr	r3, [pc, #88]	@ (8000590 <MX_GPIO_Init+0xa8>)
 8000538:	695a      	ldr	r2, [r3, #20]
 800053a:	4b15      	ldr	r3, [pc, #84]	@ (8000590 <MX_GPIO_Init+0xa8>)
 800053c:	2180      	movs	r1, #128	@ 0x80
 800053e:	02c9      	lsls	r1, r1, #11
 8000540:	430a      	orrs	r2, r1
 8000542:	615a      	str	r2, [r3, #20]
 8000544:	4b12      	ldr	r3, [pc, #72]	@ (8000590 <MX_GPIO_Init+0xa8>)
 8000546:	695a      	ldr	r2, [r3, #20]
 8000548:	2380      	movs	r3, #128	@ 0x80
 800054a:	02db      	lsls	r3, r3, #11
 800054c:	4013      	ands	r3, r2
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000552:	2380      	movs	r3, #128	@ 0x80
 8000554:	019b      	lsls	r3, r3, #6
 8000556:	480f      	ldr	r0, [pc, #60]	@ (8000594 <MX_GPIO_Init+0xac>)
 8000558:	2200      	movs	r2, #0
 800055a:	0019      	movs	r1, r3
 800055c:	f000 fe2e 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000560:	193b      	adds	r3, r7, r4
 8000562:	2280      	movs	r2, #128	@ 0x80
 8000564:	0192      	lsls	r2, r2, #6
 8000566:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	193b      	adds	r3, r7, r4
 800056a:	2201      	movs	r2, #1
 800056c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	193b      	adds	r3, r7, r4
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	193b      	adds	r3, r7, r4
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800057a:	193b      	adds	r3, r7, r4
 800057c:	4a05      	ldr	r2, [pc, #20]	@ (8000594 <MX_GPIO_Init+0xac>)
 800057e:	0019      	movs	r1, r3
 8000580:	0010      	movs	r0, r2
 8000582:	f000 fca3 	bl	8000ecc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b009      	add	sp, #36	@ 0x24
 800058c:	bd90      	pop	{r4, r7, pc}
 800058e:	46c0      	nop			@ (mov r8, r8)
 8000590:	40021000 	.word	0x40021000
 8000594:	48000800 	.word	0x48000800

08000598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
}
 800059e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a0:	46c0      	nop			@ (mov r8, r8)
 80005a2:	e7fd      	b.n	80005a0 <Error_Handler+0x8>

080005a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005aa:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <HAL_MspInit+0x44>)
 80005ac:	699a      	ldr	r2, [r3, #24]
 80005ae:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <HAL_MspInit+0x44>)
 80005b0:	2101      	movs	r1, #1
 80005b2:	430a      	orrs	r2, r1
 80005b4:	619a      	str	r2, [r3, #24]
 80005b6:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <HAL_MspInit+0x44>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	2201      	movs	r2, #1
 80005bc:	4013      	ands	r3, r2
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	4b09      	ldr	r3, [pc, #36]	@ (80005e8 <HAL_MspInit+0x44>)
 80005c4:	69da      	ldr	r2, [r3, #28]
 80005c6:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <HAL_MspInit+0x44>)
 80005c8:	2180      	movs	r1, #128	@ 0x80
 80005ca:	0549      	lsls	r1, r1, #21
 80005cc:	430a      	orrs	r2, r1
 80005ce:	61da      	str	r2, [r3, #28]
 80005d0:	4b05      	ldr	r3, [pc, #20]	@ (80005e8 <HAL_MspInit+0x44>)
 80005d2:	69da      	ldr	r2, [r3, #28]
 80005d4:	2380      	movs	r3, #128	@ 0x80
 80005d6:	055b      	lsls	r3, r3, #21
 80005d8:	4013      	ands	r3, r2
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	2380      	movs	r3, #128	@ 0x80
 80005fa:	05db      	lsls	r3, r3, #23
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d113      	bne.n	8000628 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000600:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <HAL_TIM_Base_MspInit+0x44>)
 8000602:	69da      	ldr	r2, [r3, #28]
 8000604:	4b0a      	ldr	r3, [pc, #40]	@ (8000630 <HAL_TIM_Base_MspInit+0x44>)
 8000606:	2101      	movs	r1, #1
 8000608:	430a      	orrs	r2, r1
 800060a:	61da      	str	r2, [r3, #28]
 800060c:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <HAL_TIM_Base_MspInit+0x44>)
 800060e:	69db      	ldr	r3, [r3, #28]
 8000610:	2201      	movs	r2, #1
 8000612:	4013      	ands	r3, r2
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000618:	2200      	movs	r2, #0
 800061a:	2100      	movs	r1, #0
 800061c:	200f      	movs	r0, #15
 800061e:	f000 fa9f 	bl	8000b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000622:	200f      	movs	r0, #15
 8000624:	f000 fab1 	bl	8000b8a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000628:	46c0      	nop			@ (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	b004      	add	sp, #16
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40021000 	.word	0x40021000

08000634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b08d      	sub	sp, #52	@ 0x34
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	241c      	movs	r4, #28
 800063e:	193b      	adds	r3, r7, r4
 8000640:	0018      	movs	r0, r3
 8000642:	2314      	movs	r3, #20
 8000644:	001a      	movs	r2, r3
 8000646:	2100      	movs	r1, #0
 8000648:	f002 ff3c 	bl	80034c4 <memset>
  if(huart->Instance==USART2)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a67      	ldr	r2, [pc, #412]	@ (80007f0 <HAL_UART_MspInit+0x1bc>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d000      	beq.n	8000658 <HAL_UART_MspInit+0x24>
 8000656:	e087      	b.n	8000768 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000658:	4b66      	ldr	r3, [pc, #408]	@ (80007f4 <HAL_UART_MspInit+0x1c0>)
 800065a:	69da      	ldr	r2, [r3, #28]
 800065c:	4b65      	ldr	r3, [pc, #404]	@ (80007f4 <HAL_UART_MspInit+0x1c0>)
 800065e:	2180      	movs	r1, #128	@ 0x80
 8000660:	0289      	lsls	r1, r1, #10
 8000662:	430a      	orrs	r2, r1
 8000664:	61da      	str	r2, [r3, #28]
 8000666:	4b63      	ldr	r3, [pc, #396]	@ (80007f4 <HAL_UART_MspInit+0x1c0>)
 8000668:	69da      	ldr	r2, [r3, #28]
 800066a:	2380      	movs	r3, #128	@ 0x80
 800066c:	029b      	lsls	r3, r3, #10
 800066e:	4013      	ands	r3, r2
 8000670:	61bb      	str	r3, [r7, #24]
 8000672:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4b5f      	ldr	r3, [pc, #380]	@ (80007f4 <HAL_UART_MspInit+0x1c0>)
 8000676:	695a      	ldr	r2, [r3, #20]
 8000678:	4b5e      	ldr	r3, [pc, #376]	@ (80007f4 <HAL_UART_MspInit+0x1c0>)
 800067a:	2180      	movs	r1, #128	@ 0x80
 800067c:	0289      	lsls	r1, r1, #10
 800067e:	430a      	orrs	r2, r1
 8000680:	615a      	str	r2, [r3, #20]
 8000682:	4b5c      	ldr	r3, [pc, #368]	@ (80007f4 <HAL_UART_MspInit+0x1c0>)
 8000684:	695a      	ldr	r2, [r3, #20]
 8000686:	2380      	movs	r3, #128	@ 0x80
 8000688:	029b      	lsls	r3, r3, #10
 800068a:	4013      	ands	r3, r2
 800068c:	617b      	str	r3, [r7, #20]
 800068e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000690:	0021      	movs	r1, r4
 8000692:	187b      	adds	r3, r7, r1
 8000694:	220c      	movs	r2, #12
 8000696:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2202      	movs	r2, #2
 800069c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2203      	movs	r2, #3
 80006a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2201      	movs	r2, #1
 80006ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	187a      	adds	r2, r7, r1
 80006b2:	2390      	movs	r3, #144	@ 0x90
 80006b4:	05db      	lsls	r3, r3, #23
 80006b6:	0011      	movs	r1, r2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fc07 	bl	8000ecc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80006be:	4b4e      	ldr	r3, [pc, #312]	@ (80007f8 <HAL_UART_MspInit+0x1c4>)
 80006c0:	4a4e      	ldr	r2, [pc, #312]	@ (80007fc <HAL_UART_MspInit+0x1c8>)
 80006c2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006c4:	4b4c      	ldr	r3, [pc, #304]	@ (80007f8 <HAL_UART_MspInit+0x1c4>)
 80006c6:	2210      	movs	r2, #16
 80006c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006ca:	4b4b      	ldr	r3, [pc, #300]	@ (80007f8 <HAL_UART_MspInit+0x1c4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80006d0:	4b49      	ldr	r3, [pc, #292]	@ (80007f8 <HAL_UART_MspInit+0x1c4>)
 80006d2:	2280      	movs	r2, #128	@ 0x80
 80006d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006d6:	4b48      	ldr	r3, [pc, #288]	@ (80007f8 <HAL_UART_MspInit+0x1c4>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006dc:	4b46      	ldr	r3, [pc, #280]	@ (80007f8 <HAL_UART_MspInit+0x1c4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80006e2:	4b45      	ldr	r3, [pc, #276]	@ (80007f8 <HAL_UART_MspInit+0x1c4>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80006e8:	4b43      	ldr	r3, [pc, #268]	@ (80007f8 <HAL_UART_MspInit+0x1c4>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80006ee:	4b42      	ldr	r3, [pc, #264]	@ (80007f8 <HAL_UART_MspInit+0x1c4>)
 80006f0:	0018      	movs	r0, r3
 80006f2:	f000 fa67 	bl	8000bc4 <HAL_DMA_Init>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80006fa:	f7ff ff4d 	bl	8000598 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a3d      	ldr	r2, [pc, #244]	@ (80007f8 <HAL_UART_MspInit+0x1c4>)
 8000702:	671a      	str	r2, [r3, #112]	@ 0x70
 8000704:	4b3c      	ldr	r3, [pc, #240]	@ (80007f8 <HAL_UART_MspInit+0x1c4>)
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800070a:	4b3d      	ldr	r3, [pc, #244]	@ (8000800 <HAL_UART_MspInit+0x1cc>)
 800070c:	4a3d      	ldr	r2, [pc, #244]	@ (8000804 <HAL_UART_MspInit+0x1d0>)
 800070e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000710:	4b3b      	ldr	r3, [pc, #236]	@ (8000800 <HAL_UART_MspInit+0x1cc>)
 8000712:	2200      	movs	r2, #0
 8000714:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000716:	4b3a      	ldr	r3, [pc, #232]	@ (8000800 <HAL_UART_MspInit+0x1cc>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800071c:	4b38      	ldr	r3, [pc, #224]	@ (8000800 <HAL_UART_MspInit+0x1cc>)
 800071e:	2280      	movs	r2, #128	@ 0x80
 8000720:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000722:	4b37      	ldr	r3, [pc, #220]	@ (8000800 <HAL_UART_MspInit+0x1cc>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000728:	4b35      	ldr	r3, [pc, #212]	@ (8000800 <HAL_UART_MspInit+0x1cc>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800072e:	4b34      	ldr	r3, [pc, #208]	@ (8000800 <HAL_UART_MspInit+0x1cc>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000734:	4b32      	ldr	r3, [pc, #200]	@ (8000800 <HAL_UART_MspInit+0x1cc>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800073a:	4b31      	ldr	r3, [pc, #196]	@ (8000800 <HAL_UART_MspInit+0x1cc>)
 800073c:	0018      	movs	r0, r3
 800073e:	f000 fa41 	bl	8000bc4 <HAL_DMA_Init>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8000746:	f7ff ff27 	bl	8000598 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a2c      	ldr	r2, [pc, #176]	@ (8000800 <HAL_UART_MspInit+0x1cc>)
 800074e:	675a      	str	r2, [r3, #116]	@ 0x74
 8000750:	4b2b      	ldr	r3, [pc, #172]	@ (8000800 <HAL_UART_MspInit+0x1cc>)
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	201c      	movs	r0, #28
 800075c:	f000 fa00 	bl	8000b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000760:	201c      	movs	r0, #28
 8000762:	f000 fa12 	bl	8000b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000766:	e03f      	b.n	80007e8 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a26      	ldr	r2, [pc, #152]	@ (8000808 <HAL_UART_MspInit+0x1d4>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d13a      	bne.n	80007e8 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000772:	4b20      	ldr	r3, [pc, #128]	@ (80007f4 <HAL_UART_MspInit+0x1c0>)
 8000774:	69da      	ldr	r2, [r3, #28]
 8000776:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <HAL_UART_MspInit+0x1c0>)
 8000778:	2180      	movs	r1, #128	@ 0x80
 800077a:	02c9      	lsls	r1, r1, #11
 800077c:	430a      	orrs	r2, r1
 800077e:	61da      	str	r2, [r3, #28]
 8000780:	4b1c      	ldr	r3, [pc, #112]	@ (80007f4 <HAL_UART_MspInit+0x1c0>)
 8000782:	69da      	ldr	r2, [r3, #28]
 8000784:	2380      	movs	r3, #128	@ 0x80
 8000786:	02db      	lsls	r3, r3, #11
 8000788:	4013      	ands	r3, r2
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b19      	ldr	r3, [pc, #100]	@ (80007f4 <HAL_UART_MspInit+0x1c0>)
 8000790:	695a      	ldr	r2, [r3, #20]
 8000792:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <HAL_UART_MspInit+0x1c0>)
 8000794:	2180      	movs	r1, #128	@ 0x80
 8000796:	02c9      	lsls	r1, r1, #11
 8000798:	430a      	orrs	r2, r1
 800079a:	615a      	str	r2, [r3, #20]
 800079c:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <HAL_UART_MspInit+0x1c0>)
 800079e:	695a      	ldr	r2, [r3, #20]
 80007a0:	2380      	movs	r3, #128	@ 0x80
 80007a2:	02db      	lsls	r3, r3, #11
 80007a4:	4013      	ands	r3, r2
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007aa:	211c      	movs	r1, #28
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	22c0      	movs	r2, #192	@ 0xc0
 80007b0:	0112      	lsls	r2, r2, #4
 80007b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2202      	movs	r2, #2
 80007b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2203      	movs	r2, #3
 80007c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2204      	movs	r2, #4
 80007ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	4a0f      	ldr	r2, [pc, #60]	@ (800080c <HAL_UART_MspInit+0x1d8>)
 80007d0:	0019      	movs	r1, r3
 80007d2:	0010      	movs	r0, r2
 80007d4:	f000 fb7a 	bl	8000ecc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2100      	movs	r1, #0
 80007dc:	201d      	movs	r0, #29
 80007de:	f000 f9bf 	bl	8000b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80007e2:	201d      	movs	r0, #29
 80007e4:	f000 f9d1 	bl	8000b8a <HAL_NVIC_EnableIRQ>
}
 80007e8:	46c0      	nop			@ (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b00d      	add	sp, #52	@ 0x34
 80007ee:	bd90      	pop	{r4, r7, pc}
 80007f0:	40004400 	.word	0x40004400
 80007f4:	40021000 	.word	0x40021000
 80007f8:	20000180 	.word	0x20000180
 80007fc:	40020044 	.word	0x40020044
 8000800:	200001c4 	.word	0x200001c4
 8000804:	40020058 	.word	0x40020058
 8000808:	40004800 	.word	0x40004800
 800080c:	48000400 	.word	0x48000400

08000810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000814:	46c0      	nop			@ (mov r8, r8)
 8000816:	e7fd      	b.n	8000814 <NMI_Handler+0x4>

08000818 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081c:	46c0      	nop			@ (mov r8, r8)
 800081e:	e7fd      	b.n	800081c <HardFault_Handler+0x4>

08000820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000838:	f000 f8ca 	bl	80009d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800083c:	46c0      	nop			@ (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000848:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 800084a:	0018      	movs	r0, r3
 800084c:	f000 fa7f 	bl	8000d4e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000850:	4b04      	ldr	r3, [pc, #16]	@ (8000864 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8000852:	0018      	movs	r0, r3
 8000854:	f000 fa7b 	bl	8000d4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000858:	46c0      	nop			@ (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	20000180 	.word	0x20000180
 8000864:	200001c4 	.word	0x200001c4

08000868 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800086c:	4b03      	ldr	r3, [pc, #12]	@ (800087c <TIM2_IRQHandler+0x14>)
 800086e:	0018      	movs	r0, r3
 8000870:	f001 fb5e 	bl	8001f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000874:	46c0      	nop			@ (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	20000028 	.word	0x20000028

08000880 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000884:	4b03      	ldr	r3, [pc, #12]	@ (8000894 <USART2_IRQHandler+0x14>)
 8000886:	0018      	movs	r0, r3
 8000888:	f001 ff1e 	bl	80026c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800088c:	46c0      	nop			@ (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	20000070 	.word	0x20000070

08000898 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800089c:	4b03      	ldr	r3, [pc, #12]	@ (80008ac <USART3_4_IRQHandler+0x14>)
 800089e:	0018      	movs	r0, r3
 80008a0:	f001 ff12 	bl	80026c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80008a4:	46c0      	nop			@ (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	200000f8 	.word	0x200000f8

080008b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008b4:	46c0      	nop			@ (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <HAL_TIM_PeriodElapsedCallback>:
#include "main.h"

uint8_t g_timer_ms_1000 = DISABLE;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	2380      	movs	r3, #128	@ 0x80
 80008ca:	05db      	lsls	r3, r3, #23
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d106      	bne.n	80008de <HAL_TIM_PeriodElapsedCallback+0x22>
    {
        if(g_timer_ms_1000 == DISABLE)
 80008d0:	4b05      	ldr	r3, [pc, #20]	@ (80008e8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d102      	bne.n	80008de <HAL_TIM_PeriodElapsedCallback+0x22>
        {

            g_timer_ms_1000 = ENABLE;
 80008d8:	4b03      	ldr	r3, [pc, #12]	@ (80008e8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80008de:	46c0      	nop			@ (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	20000208 	.word	0x20000208

080008ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008ec:	480d      	ldr	r0, [pc, #52]	@ (8000924 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ee:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008f0:	f7ff ffde 	bl	80008b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f4:	480c      	ldr	r0, [pc, #48]	@ (8000928 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f6:	490d      	ldr	r1, [pc, #52]	@ (800092c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000930 <LoopForever+0xe>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008fc:	e002      	b.n	8000904 <LoopCopyDataInit>

080008fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000902:	3304      	adds	r3, #4

08000904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000908:	d3f9      	bcc.n	80008fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090a:	4a0a      	ldr	r2, [pc, #40]	@ (8000934 <LoopForever+0x12>)
  ldr r4, =_ebss
 800090c:	4c0a      	ldr	r4, [pc, #40]	@ (8000938 <LoopForever+0x16>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000910:	e001      	b.n	8000916 <LoopFillZerobss>

08000912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000914:	3204      	adds	r2, #4

08000916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000918:	d3fb      	bcc.n	8000912 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800091a:	f002 fddb 	bl	80034d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091e:	f7ff fc7f 	bl	8000220 <main>

08000922 <LoopForever>:

LoopForever:
    b LoopForever
 8000922:	e7fe      	b.n	8000922 <LoopForever>
  ldr   r0, =_estack
 8000924:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000930:	08003574 	.word	0x08003574
  ldr r2, =_sbss
 8000934:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000938:	20000210 	.word	0x20000210

0800093c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC1_COMP_IRQHandler>
	...

08000940 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000944:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <HAL_Init+0x24>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <HAL_Init+0x24>)
 800094a:	2110      	movs	r1, #16
 800094c:	430a      	orrs	r2, r1
 800094e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 f809 	bl	8000968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000956:	f7ff fe25 	bl	80005a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095a:	2300      	movs	r3, #0
}
 800095c:	0018      	movs	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	40022000 	.word	0x40022000

08000968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000970:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <HAL_InitTick+0x5c>)
 8000972:	681c      	ldr	r4, [r3, #0]
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <HAL_InitTick+0x60>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	0019      	movs	r1, r3
 800097a:	23fa      	movs	r3, #250	@ 0xfa
 800097c:	0098      	lsls	r0, r3, #2
 800097e:	f7ff fbc3 	bl	8000108 <__udivsi3>
 8000982:	0003      	movs	r3, r0
 8000984:	0019      	movs	r1, r3
 8000986:	0020      	movs	r0, r4
 8000988:	f7ff fbbe 	bl	8000108 <__udivsi3>
 800098c:	0003      	movs	r3, r0
 800098e:	0018      	movs	r0, r3
 8000990:	f000 f90b 	bl	8000baa <HAL_SYSTICK_Config>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	e00f      	b.n	80009bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b03      	cmp	r3, #3
 80009a0:	d80b      	bhi.n	80009ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	2301      	movs	r3, #1
 80009a6:	425b      	negs	r3, r3
 80009a8:	2200      	movs	r2, #0
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 f8d8 	bl	8000b60 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <HAL_InitTick+0x64>)
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	e000      	b.n	80009bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
}
 80009bc:	0018      	movs	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	b003      	add	sp, #12
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000008 	.word	0x20000008
 80009cc:	20000004 	.word	0x20000004

080009d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d4:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <HAL_IncTick+0x1c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	001a      	movs	r2, r3
 80009da:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <HAL_IncTick+0x20>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	18d2      	adds	r2, r2, r3
 80009e0:	4b03      	ldr	r3, [pc, #12]	@ (80009f0 <HAL_IncTick+0x20>)
 80009e2:	601a      	str	r2, [r3, #0]
}
 80009e4:	46c0      	nop			@ (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	20000008 	.word	0x20000008
 80009f0:	2000020c 	.word	0x2000020c

080009f4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  return uwTick;
 80009f8:	4b02      	ldr	r3, [pc, #8]	@ (8000a04 <HAL_GetTick+0x10>)
 80009fa:	681b      	ldr	r3, [r3, #0]
}
 80009fc:	0018      	movs	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	2000020c 	.word	0x2000020c

08000a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	0002      	movs	r2, r0
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a14:	1dfb      	adds	r3, r7, #7
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a1a:	d809      	bhi.n	8000a30 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	001a      	movs	r2, r3
 8000a22:	231f      	movs	r3, #31
 8000a24:	401a      	ands	r2, r3
 8000a26:	4b04      	ldr	r3, [pc, #16]	@ (8000a38 <__NVIC_EnableIRQ+0x30>)
 8000a28:	2101      	movs	r1, #1
 8000a2a:	4091      	lsls	r1, r2
 8000a2c:	000a      	movs	r2, r1
 8000a2e:	601a      	str	r2, [r3, #0]
  }
}
 8000a30:	46c0      	nop			@ (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b002      	add	sp, #8
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	e000e100 	.word	0xe000e100

08000a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	0002      	movs	r2, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a50:	d828      	bhi.n	8000aa4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a52:	4a2f      	ldr	r2, [pc, #188]	@ (8000b10 <__NVIC_SetPriority+0xd4>)
 8000a54:	1dfb      	adds	r3, r7, #7
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	b25b      	sxtb	r3, r3
 8000a5a:	089b      	lsrs	r3, r3, #2
 8000a5c:	33c0      	adds	r3, #192	@ 0xc0
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	589b      	ldr	r3, [r3, r2]
 8000a62:	1dfa      	adds	r2, r7, #7
 8000a64:	7812      	ldrb	r2, [r2, #0]
 8000a66:	0011      	movs	r1, r2
 8000a68:	2203      	movs	r2, #3
 8000a6a:	400a      	ands	r2, r1
 8000a6c:	00d2      	lsls	r2, r2, #3
 8000a6e:	21ff      	movs	r1, #255	@ 0xff
 8000a70:	4091      	lsls	r1, r2
 8000a72:	000a      	movs	r2, r1
 8000a74:	43d2      	mvns	r2, r2
 8000a76:	401a      	ands	r2, r3
 8000a78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	22ff      	movs	r2, #255	@ 0xff
 8000a80:	401a      	ands	r2, r3
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	0018      	movs	r0, r3
 8000a88:	2303      	movs	r3, #3
 8000a8a:	4003      	ands	r3, r0
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a90:	481f      	ldr	r0, [pc, #124]	@ (8000b10 <__NVIC_SetPriority+0xd4>)
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	b25b      	sxtb	r3, r3
 8000a98:	089b      	lsrs	r3, r3, #2
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	33c0      	adds	r3, #192	@ 0xc0
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000aa2:	e031      	b.n	8000b08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b14 <__NVIC_SetPriority+0xd8>)
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	0019      	movs	r1, r3
 8000aac:	230f      	movs	r3, #15
 8000aae:	400b      	ands	r3, r1
 8000ab0:	3b08      	subs	r3, #8
 8000ab2:	089b      	lsrs	r3, r3, #2
 8000ab4:	3306      	adds	r3, #6
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	18d3      	adds	r3, r2, r3
 8000aba:	3304      	adds	r3, #4
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	1dfa      	adds	r2, r7, #7
 8000ac0:	7812      	ldrb	r2, [r2, #0]
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	400a      	ands	r2, r1
 8000ac8:	00d2      	lsls	r2, r2, #3
 8000aca:	21ff      	movs	r1, #255	@ 0xff
 8000acc:	4091      	lsls	r1, r2
 8000ace:	000a      	movs	r2, r1
 8000ad0:	43d2      	mvns	r2, r2
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	019b      	lsls	r3, r3, #6
 8000ada:	22ff      	movs	r2, #255	@ 0xff
 8000adc:	401a      	ands	r2, r3
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	4003      	ands	r3, r0
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aec:	4809      	ldr	r0, [pc, #36]	@ (8000b14 <__NVIC_SetPriority+0xd8>)
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	001c      	movs	r4, r3
 8000af4:	230f      	movs	r3, #15
 8000af6:	4023      	ands	r3, r4
 8000af8:	3b08      	subs	r3, #8
 8000afa:	089b      	lsrs	r3, r3, #2
 8000afc:	430a      	orrs	r2, r1
 8000afe:	3306      	adds	r3, #6
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	18c3      	adds	r3, r0, r3
 8000b04:	3304      	adds	r3, #4
 8000b06:	601a      	str	r2, [r3, #0]
}
 8000b08:	46c0      	nop			@ (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b003      	add	sp, #12
 8000b0e:	bd90      	pop	{r4, r7, pc}
 8000b10:	e000e100 	.word	0xe000e100
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	1e5a      	subs	r2, r3, #1
 8000b24:	2380      	movs	r3, #128	@ 0x80
 8000b26:	045b      	lsls	r3, r3, #17
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d301      	bcc.n	8000b30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e010      	b.n	8000b52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b30:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <SysTick_Config+0x44>)
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	3a01      	subs	r2, #1
 8000b36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b38:	2301      	movs	r3, #1
 8000b3a:	425b      	negs	r3, r3
 8000b3c:	2103      	movs	r1, #3
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f7ff ff7c 	bl	8000a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b44:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <SysTick_Config+0x44>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4a:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <SysTick_Config+0x44>)
 8000b4c:	2207      	movs	r2, #7
 8000b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	0018      	movs	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b002      	add	sp, #8
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	e000e010 	.word	0xe000e010

08000b60 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	1c02      	adds	r2, r0, #0
 8000b70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	0011      	movs	r1, r2
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f7ff ff5d 	bl	8000a3c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b004      	add	sp, #16
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	0002      	movs	r2, r0
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	b25b      	sxtb	r3, r3
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f7ff ff33 	bl	8000a08 <__NVIC_EnableIRQ>
}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b002      	add	sp, #8
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f7ff ffaf 	bl	8000b18 <SysTick_Config>
 8000bba:	0003      	movs	r3, r0
}
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b002      	add	sp, #8
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e036      	b.n	8000c48 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2221      	movs	r2, #33	@ 0x21
 8000bde:	2102      	movs	r1, #2
 8000be0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	4a18      	ldr	r2, [pc, #96]	@ (8000c50 <HAL_DMA_Init+0x8c>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000bfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	695b      	ldr	r3, [r3, #20]
 8000c0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	69db      	ldr	r3, [r3, #28]
 8000c18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	68fa      	ldr	r2, [r7, #12]
 8000c26:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 f932 	bl	8000e94 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2221      	movs	r2, #33	@ 0x21
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2220      	movs	r2, #32
 8000c42:	2100      	movs	r1, #0
 8000c44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	0018      	movs	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b004      	add	sp, #16
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	ffffc00f 	.word	0xffffc00f

08000c54 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2221      	movs	r2, #33	@ 0x21
 8000c60:	5c9b      	ldrb	r3, [r3, r2]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d008      	beq.n	8000c7a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2204      	movs	r2, #4
 8000c6c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2220      	movs	r2, #32
 8000c72:	2100      	movs	r1, #0
 8000c74:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e020      	b.n	8000cbc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	210e      	movs	r1, #14
 8000c86:	438a      	bics	r2, r1
 8000c88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2101      	movs	r1, #1
 8000c96:	438a      	bics	r2, r1
 8000c98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	000a      	movs	r2, r1
 8000ca8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2221      	movs	r2, #33	@ 0x21
 8000cae:	2101      	movs	r1, #1
 8000cb0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2220      	movs	r2, #32
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000cba:	2300      	movs	r3, #0
}
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b002      	add	sp, #8
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ccc:	210f      	movs	r1, #15
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2221      	movs	r2, #33	@ 0x21
 8000cd8:	5c9b      	ldrb	r3, [r3, r2]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d006      	beq.n	8000cee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]
 8000cec:	e028      	b.n	8000d40 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	210e      	movs	r1, #14
 8000cfa:	438a      	bics	r2, r1
 8000cfc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2101      	movs	r1, #1
 8000d0a:	438a      	bics	r2, r1
 8000d0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d16:	2101      	movs	r1, #1
 8000d18:	4091      	lsls	r1, r2
 8000d1a:	000a      	movs	r2, r1
 8000d1c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2221      	movs	r2, #33	@ 0x21
 8000d22:	2101      	movs	r1, #1
 8000d24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2220      	movs	r2, #32
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d004      	beq.n	8000d40 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	0010      	movs	r0, r2
 8000d3e:	4798      	blx	r3
    }
  }
  return status;
 8000d40:	230f      	movs	r3, #15
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	781b      	ldrb	r3, [r3, #0]
}
 8000d46:	0018      	movs	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b004      	add	sp, #16
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b084      	sub	sp, #16
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	409a      	lsls	r2, r3
 8000d6e:	0013      	movs	r3, r2
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	4013      	ands	r3, r2
 8000d74:	d024      	beq.n	8000dc0 <HAL_DMA_IRQHandler+0x72>
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	2204      	movs	r2, #4
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	d020      	beq.n	8000dc0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2220      	movs	r2, #32
 8000d86:	4013      	ands	r3, r2
 8000d88:	d107      	bne.n	8000d9a <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2104      	movs	r1, #4
 8000d96:	438a      	bics	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000da2:	2104      	movs	r1, #4
 8000da4:	4091      	lsls	r1, r2
 8000da6:	000a      	movs	r2, r1
 8000da8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d100      	bne.n	8000db4 <HAL_DMA_IRQHandler+0x66>
 8000db2:	e06a      	b.n	8000e8a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	0010      	movs	r0, r2
 8000dbc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000dbe:	e064      	b.n	8000e8a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	0013      	movs	r3, r2
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	d02b      	beq.n	8000e28 <HAL_DMA_IRQHandler+0xda>
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	d027      	beq.n	8000e28 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2220      	movs	r2, #32
 8000de0:	4013      	ands	r3, r2
 8000de2:	d10b      	bne.n	8000dfc <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	210a      	movs	r1, #10
 8000df0:	438a      	bics	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2221      	movs	r2, #33	@ 0x21
 8000df8:	2101      	movs	r1, #1
 8000dfa:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e04:	2102      	movs	r1, #2
 8000e06:	4091      	lsls	r1, r2
 8000e08:	000a      	movs	r2, r1
 8000e0a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2220      	movs	r2, #32
 8000e10:	2100      	movs	r1, #0
 8000e12:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d036      	beq.n	8000e8a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	0010      	movs	r0, r2
 8000e24:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000e26:	e030      	b.n	8000e8a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2c:	2208      	movs	r2, #8
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	4013      	ands	r3, r2
 8000e36:	d028      	beq.n	8000e8a <HAL_DMA_IRQHandler+0x13c>
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	2208      	movs	r2, #8
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	d024      	beq.n	8000e8a <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	210e      	movs	r1, #14
 8000e4c:	438a      	bics	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e58:	2101      	movs	r1, #1
 8000e5a:	4091      	lsls	r1, r2
 8000e5c:	000a      	movs	r2, r1
 8000e5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2201      	movs	r2, #1
 8000e64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2221      	movs	r2, #33	@ 0x21
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2220      	movs	r2, #32
 8000e72:	2100      	movs	r1, #0
 8000e74:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d005      	beq.n	8000e8a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	0010      	movs	r0, r2
 8000e86:	4798      	blx	r3
    }
  }
}
 8000e88:	e7ff      	b.n	8000e8a <HAL_DMA_IRQHandler+0x13c>
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b004      	add	sp, #16
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a08      	ldr	r2, [pc, #32]	@ (8000ec4 <DMA_CalcBaseAndBitshift+0x30>)
 8000ea2:	4694      	mov	ip, r2
 8000ea4:	4463      	add	r3, ip
 8000ea6:	2114      	movs	r1, #20
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f7ff f92d 	bl	8000108 <__udivsi3>
 8000eae:	0003      	movs	r3, r0
 8000eb0:	009a      	lsls	r2, r3, #2
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a03      	ldr	r2, [pc, #12]	@ (8000ec8 <DMA_CalcBaseAndBitshift+0x34>)
 8000eba:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8000ebc:	46c0      	nop			@ (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b002      	add	sp, #8
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	bffdfff8 	.word	0xbffdfff8
 8000ec8:	40020000 	.word	0x40020000

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eda:	e155      	b.n	8001188 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	4091      	lsls	r1, r2
 8000ee6:	000a      	movs	r2, r1
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d100      	bne.n	8000ef4 <HAL_GPIO_Init+0x28>
 8000ef2:	e146      	b.n	8001182 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2203      	movs	r2, #3
 8000efa:	4013      	ands	r3, r2
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d005      	beq.n	8000f0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2203      	movs	r2, #3
 8000f06:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d130      	bne.n	8000f6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2203      	movs	r2, #3
 8000f18:	409a      	lsls	r2, r3
 8000f1a:	0013      	movs	r3, r2
 8000f1c:	43da      	mvns	r2, r3
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	409a      	lsls	r2, r3
 8000f2e:	0013      	movs	r3, r2
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f42:	2201      	movs	r2, #1
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
 8000f48:	0013      	movs	r3, r2
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	091b      	lsrs	r3, r3, #4
 8000f58:	2201      	movs	r2, #1
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	0013      	movs	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2203      	movs	r2, #3
 8000f74:	4013      	ands	r3, r2
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d017      	beq.n	8000faa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	2203      	movs	r2, #3
 8000f86:	409a      	lsls	r2, r3
 8000f88:	0013      	movs	r3, r2
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	409a      	lsls	r2, r3
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2203      	movs	r2, #3
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d123      	bne.n	8000ffe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	08da      	lsrs	r2, r3, #3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3208      	adds	r2, #8
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	58d3      	ldr	r3, [r2, r3]
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	2207      	movs	r2, #7
 8000fc8:	4013      	ands	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	220f      	movs	r2, #15
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	0013      	movs	r3, r2
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	691a      	ldr	r2, [r3, #16]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	2107      	movs	r1, #7
 8000fe2:	400b      	ands	r3, r1
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	08da      	lsrs	r2, r3, #3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3208      	adds	r2, #8
 8000ff8:	0092      	lsls	r2, r2, #2
 8000ffa:	6939      	ldr	r1, [r7, #16]
 8000ffc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2203      	movs	r2, #3
 800100a:	409a      	lsls	r2, r3
 800100c:	0013      	movs	r3, r2
 800100e:	43da      	mvns	r2, r3
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2203      	movs	r2, #3
 800101c:	401a      	ands	r2, r3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	409a      	lsls	r2, r3
 8001024:	0013      	movs	r3, r2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	23c0      	movs	r3, #192	@ 0xc0
 8001038:	029b      	lsls	r3, r3, #10
 800103a:	4013      	ands	r3, r2
 800103c:	d100      	bne.n	8001040 <HAL_GPIO_Init+0x174>
 800103e:	e0a0      	b.n	8001182 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001040:	4b57      	ldr	r3, [pc, #348]	@ (80011a0 <HAL_GPIO_Init+0x2d4>)
 8001042:	699a      	ldr	r2, [r3, #24]
 8001044:	4b56      	ldr	r3, [pc, #344]	@ (80011a0 <HAL_GPIO_Init+0x2d4>)
 8001046:	2101      	movs	r1, #1
 8001048:	430a      	orrs	r2, r1
 800104a:	619a      	str	r2, [r3, #24]
 800104c:	4b54      	ldr	r3, [pc, #336]	@ (80011a0 <HAL_GPIO_Init+0x2d4>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	2201      	movs	r2, #1
 8001052:	4013      	ands	r3, r2
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001058:	4a52      	ldr	r2, [pc, #328]	@ (80011a4 <HAL_GPIO_Init+0x2d8>)
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	3302      	adds	r3, #2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	589b      	ldr	r3, [r3, r2]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	2203      	movs	r2, #3
 800106a:	4013      	ands	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	220f      	movs	r2, #15
 8001070:	409a      	lsls	r2, r3
 8001072:	0013      	movs	r3, r2
 8001074:	43da      	mvns	r2, r3
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	2390      	movs	r3, #144	@ 0x90
 8001080:	05db      	lsls	r3, r3, #23
 8001082:	429a      	cmp	r2, r3
 8001084:	d019      	beq.n	80010ba <HAL_GPIO_Init+0x1ee>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a47      	ldr	r2, [pc, #284]	@ (80011a8 <HAL_GPIO_Init+0x2dc>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d013      	beq.n	80010b6 <HAL_GPIO_Init+0x1ea>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a46      	ldr	r2, [pc, #280]	@ (80011ac <HAL_GPIO_Init+0x2e0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d00d      	beq.n	80010b2 <HAL_GPIO_Init+0x1e6>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a45      	ldr	r2, [pc, #276]	@ (80011b0 <HAL_GPIO_Init+0x2e4>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d007      	beq.n	80010ae <HAL_GPIO_Init+0x1e2>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a44      	ldr	r2, [pc, #272]	@ (80011b4 <HAL_GPIO_Init+0x2e8>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d101      	bne.n	80010aa <HAL_GPIO_Init+0x1de>
 80010a6:	2304      	movs	r3, #4
 80010a8:	e008      	b.n	80010bc <HAL_GPIO_Init+0x1f0>
 80010aa:	2305      	movs	r3, #5
 80010ac:	e006      	b.n	80010bc <HAL_GPIO_Init+0x1f0>
 80010ae:	2303      	movs	r3, #3
 80010b0:	e004      	b.n	80010bc <HAL_GPIO_Init+0x1f0>
 80010b2:	2302      	movs	r3, #2
 80010b4:	e002      	b.n	80010bc <HAL_GPIO_Init+0x1f0>
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <HAL_GPIO_Init+0x1f0>
 80010ba:	2300      	movs	r3, #0
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	2103      	movs	r1, #3
 80010c0:	400a      	ands	r2, r1
 80010c2:	0092      	lsls	r2, r2, #2
 80010c4:	4093      	lsls	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010cc:	4935      	ldr	r1, [pc, #212]	@ (80011a4 <HAL_GPIO_Init+0x2d8>)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	3302      	adds	r3, #2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010da:	4b37      	ldr	r3, [pc, #220]	@ (80011b8 <HAL_GPIO_Init+0x2ec>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	43da      	mvns	r2, r3
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	2380      	movs	r3, #128	@ 0x80
 80010f0:	035b      	lsls	r3, r3, #13
 80010f2:	4013      	ands	r3, r2
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010fe:	4b2e      	ldr	r3, [pc, #184]	@ (80011b8 <HAL_GPIO_Init+0x2ec>)
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001104:	4b2c      	ldr	r3, [pc, #176]	@ (80011b8 <HAL_GPIO_Init+0x2ec>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	43da      	mvns	r2, r3
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	2380      	movs	r3, #128	@ 0x80
 800111a:	039b      	lsls	r3, r3, #14
 800111c:	4013      	ands	r3, r2
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001128:	4b23      	ldr	r3, [pc, #140]	@ (80011b8 <HAL_GPIO_Init+0x2ec>)
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800112e:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <HAL_GPIO_Init+0x2ec>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	43da      	mvns	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	2380      	movs	r3, #128	@ 0x80
 8001144:	029b      	lsls	r3, r3, #10
 8001146:	4013      	ands	r3, r2
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001152:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <HAL_GPIO_Init+0x2ec>)
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001158:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <HAL_GPIO_Init+0x2ec>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	43da      	mvns	r2, r3
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	2380      	movs	r3, #128	@ 0x80
 800116e:	025b      	lsls	r3, r3, #9
 8001170:	4013      	ands	r3, r2
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800117c:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <HAL_GPIO_Init+0x2ec>)
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	3301      	adds	r3, #1
 8001186:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	40da      	lsrs	r2, r3
 8001190:	1e13      	subs	r3, r2, #0
 8001192:	d000      	beq.n	8001196 <HAL_GPIO_Init+0x2ca>
 8001194:	e6a2      	b.n	8000edc <HAL_GPIO_Init+0x10>
  } 
}
 8001196:	46c0      	nop			@ (mov r8, r8)
 8001198:	46c0      	nop			@ (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	b006      	add	sp, #24
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40010000 	.word	0x40010000
 80011a8:	48000400 	.word	0x48000400
 80011ac:	48000800 	.word	0x48000800
 80011b0:	48000c00 	.word	0x48000c00
 80011b4:	48001000 	.word	0x48001000
 80011b8:	40010400 	.word	0x40010400

080011bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	0008      	movs	r0, r1
 80011c6:	0011      	movs	r1, r2
 80011c8:	1cbb      	adds	r3, r7, #2
 80011ca:	1c02      	adds	r2, r0, #0
 80011cc:	801a      	strh	r2, [r3, #0]
 80011ce:	1c7b      	adds	r3, r7, #1
 80011d0:	1c0a      	adds	r2, r1, #0
 80011d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011d4:	1c7b      	adds	r3, r7, #1
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d004      	beq.n	80011e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011dc:	1cbb      	adds	r3, r7, #2
 80011de:	881a      	ldrh	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011e4:	e003      	b.n	80011ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011e6:	1cbb      	adds	r3, r7, #2
 80011e8:	881a      	ldrh	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	b002      	add	sp, #8
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	000a      	movs	r2, r1
 8001200:	1cbb      	adds	r3, r7, #2
 8001202:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800120a:	1cbb      	adds	r3, r7, #2
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	4013      	ands	r3, r2
 8001212:	041a      	lsls	r2, r3, #16
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43db      	mvns	r3, r3
 8001218:	1cb9      	adds	r1, r7, #2
 800121a:	8809      	ldrh	r1, [r1, #0]
 800121c:	400b      	ands	r3, r1
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	619a      	str	r2, [r3, #24]
}
 8001224:	46c0      	nop			@ (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	b004      	add	sp, #16
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d102      	bne.n	8001240 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	f000 fb76 	bl	800192c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2201      	movs	r2, #1
 8001246:	4013      	ands	r3, r2
 8001248:	d100      	bne.n	800124c <HAL_RCC_OscConfig+0x20>
 800124a:	e08e      	b.n	800136a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800124c:	4bc5      	ldr	r3, [pc, #788]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	220c      	movs	r2, #12
 8001252:	4013      	ands	r3, r2
 8001254:	2b04      	cmp	r3, #4
 8001256:	d00e      	beq.n	8001276 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001258:	4bc2      	ldr	r3, [pc, #776]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	220c      	movs	r2, #12
 800125e:	4013      	ands	r3, r2
 8001260:	2b08      	cmp	r3, #8
 8001262:	d117      	bne.n	8001294 <HAL_RCC_OscConfig+0x68>
 8001264:	4bbf      	ldr	r3, [pc, #764]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	23c0      	movs	r3, #192	@ 0xc0
 800126a:	025b      	lsls	r3, r3, #9
 800126c:	401a      	ands	r2, r3
 800126e:	2380      	movs	r3, #128	@ 0x80
 8001270:	025b      	lsls	r3, r3, #9
 8001272:	429a      	cmp	r2, r3
 8001274:	d10e      	bne.n	8001294 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001276:	4bbb      	ldr	r3, [pc, #748]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	2380      	movs	r3, #128	@ 0x80
 800127c:	029b      	lsls	r3, r3, #10
 800127e:	4013      	ands	r3, r2
 8001280:	d100      	bne.n	8001284 <HAL_RCC_OscConfig+0x58>
 8001282:	e071      	b.n	8001368 <HAL_RCC_OscConfig+0x13c>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d000      	beq.n	800128e <HAL_RCC_OscConfig+0x62>
 800128c:	e06c      	b.n	8001368 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	f000 fb4c 	bl	800192c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d107      	bne.n	80012ac <HAL_RCC_OscConfig+0x80>
 800129c:	4bb1      	ldr	r3, [pc, #708]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4bb0      	ldr	r3, [pc, #704]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80012a2:	2180      	movs	r1, #128	@ 0x80
 80012a4:	0249      	lsls	r1, r1, #9
 80012a6:	430a      	orrs	r2, r1
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	e02f      	b.n	800130c <HAL_RCC_OscConfig+0xe0>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10c      	bne.n	80012ce <HAL_RCC_OscConfig+0xa2>
 80012b4:	4bab      	ldr	r3, [pc, #684]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4baa      	ldr	r3, [pc, #680]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80012ba:	49ab      	ldr	r1, [pc, #684]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80012bc:	400a      	ands	r2, r1
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	4ba8      	ldr	r3, [pc, #672]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4ba7      	ldr	r3, [pc, #668]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80012c6:	49a9      	ldr	r1, [pc, #676]	@ (800156c <HAL_RCC_OscConfig+0x340>)
 80012c8:	400a      	ands	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	e01e      	b.n	800130c <HAL_RCC_OscConfig+0xe0>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b05      	cmp	r3, #5
 80012d4:	d10e      	bne.n	80012f4 <HAL_RCC_OscConfig+0xc8>
 80012d6:	4ba3      	ldr	r3, [pc, #652]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4ba2      	ldr	r3, [pc, #648]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80012dc:	2180      	movs	r1, #128	@ 0x80
 80012de:	02c9      	lsls	r1, r1, #11
 80012e0:	430a      	orrs	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	4b9f      	ldr	r3, [pc, #636]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b9e      	ldr	r3, [pc, #632]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80012ea:	2180      	movs	r1, #128	@ 0x80
 80012ec:	0249      	lsls	r1, r1, #9
 80012ee:	430a      	orrs	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	e00b      	b.n	800130c <HAL_RCC_OscConfig+0xe0>
 80012f4:	4b9b      	ldr	r3, [pc, #620]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b9a      	ldr	r3, [pc, #616]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80012fa:	499b      	ldr	r1, [pc, #620]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80012fc:	400a      	ands	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	4b98      	ldr	r3, [pc, #608]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b97      	ldr	r3, [pc, #604]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001306:	4999      	ldr	r1, [pc, #612]	@ (800156c <HAL_RCC_OscConfig+0x340>)
 8001308:	400a      	ands	r2, r1
 800130a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d014      	beq.n	800133e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fb6e 	bl	80009f4 <HAL_GetTick>
 8001318:	0003      	movs	r3, r0
 800131a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131e:	f7ff fb69 	bl	80009f4 <HAL_GetTick>
 8001322:	0002      	movs	r2, r0
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b64      	cmp	r3, #100	@ 0x64
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e2fd      	b.n	800192c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001330:	4b8c      	ldr	r3, [pc, #560]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	2380      	movs	r3, #128	@ 0x80
 8001336:	029b      	lsls	r3, r3, #10
 8001338:	4013      	ands	r3, r2
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0xf2>
 800133c:	e015      	b.n	800136a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133e:	f7ff fb59 	bl	80009f4 <HAL_GetTick>
 8001342:	0003      	movs	r3, r0
 8001344:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fb54 	bl	80009f4 <HAL_GetTick>
 800134c:	0002      	movs	r2, r0
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	@ 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e2e8      	b.n	800192c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	4b82      	ldr	r3, [pc, #520]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	2380      	movs	r3, #128	@ 0x80
 8001360:	029b      	lsls	r3, r3, #10
 8001362:	4013      	ands	r3, r2
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x11c>
 8001366:	e000      	b.n	800136a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001368:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2202      	movs	r2, #2
 8001370:	4013      	ands	r3, r2
 8001372:	d100      	bne.n	8001376 <HAL_RCC_OscConfig+0x14a>
 8001374:	e06c      	b.n	8001450 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001376:	4b7b      	ldr	r3, [pc, #492]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	220c      	movs	r2, #12
 800137c:	4013      	ands	r3, r2
 800137e:	d00e      	beq.n	800139e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001380:	4b78      	ldr	r3, [pc, #480]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	220c      	movs	r2, #12
 8001386:	4013      	ands	r3, r2
 8001388:	2b08      	cmp	r3, #8
 800138a:	d11f      	bne.n	80013cc <HAL_RCC_OscConfig+0x1a0>
 800138c:	4b75      	ldr	r3, [pc, #468]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	23c0      	movs	r3, #192	@ 0xc0
 8001392:	025b      	lsls	r3, r3, #9
 8001394:	401a      	ands	r2, r3
 8001396:	2380      	movs	r3, #128	@ 0x80
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	429a      	cmp	r2, r3
 800139c:	d116      	bne.n	80013cc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139e:	4b71      	ldr	r3, [pc, #452]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2202      	movs	r2, #2
 80013a4:	4013      	ands	r3, r2
 80013a6:	d005      	beq.n	80013b4 <HAL_RCC_OscConfig+0x188>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d001      	beq.n	80013b4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e2bb      	b.n	800192c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	22f8      	movs	r2, #248	@ 0xf8
 80013ba:	4393      	bics	r3, r2
 80013bc:	0019      	movs	r1, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	00da      	lsls	r2, r3, #3
 80013c4:	4b67      	ldr	r3, [pc, #412]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80013c6:	430a      	orrs	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ca:	e041      	b.n	8001450 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d024      	beq.n	800141e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d4:	4b63      	ldr	r3, [pc, #396]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b62      	ldr	r3, [pc, #392]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80013da:	2101      	movs	r1, #1
 80013dc:	430a      	orrs	r2, r1
 80013de:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e0:	f7ff fb08 	bl	80009f4 <HAL_GetTick>
 80013e4:	0003      	movs	r3, r0
 80013e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ea:	f7ff fb03 	bl	80009f4 <HAL_GetTick>
 80013ee:	0002      	movs	r2, r0
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e297      	b.n	800192c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fc:	4b59      	ldr	r3, [pc, #356]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2202      	movs	r2, #2
 8001402:	4013      	ands	r3, r2
 8001404:	d0f1      	beq.n	80013ea <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001406:	4b57      	ldr	r3, [pc, #348]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	22f8      	movs	r2, #248	@ 0xf8
 800140c:	4393      	bics	r3, r2
 800140e:	0019      	movs	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	00da      	lsls	r2, r3, #3
 8001416:	4b53      	ldr	r3, [pc, #332]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001418:	430a      	orrs	r2, r1
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	e018      	b.n	8001450 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800141e:	4b51      	ldr	r3, [pc, #324]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b50      	ldr	r3, [pc, #320]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001424:	2101      	movs	r1, #1
 8001426:	438a      	bics	r2, r1
 8001428:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142a:	f7ff fae3 	bl	80009f4 <HAL_GetTick>
 800142e:	0003      	movs	r3, r0
 8001430:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001434:	f7ff fade 	bl	80009f4 <HAL_GetTick>
 8001438:	0002      	movs	r2, r0
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e272      	b.n	800192c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	4b47      	ldr	r3, [pc, #284]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2202      	movs	r2, #2
 800144c:	4013      	ands	r3, r2
 800144e:	d1f1      	bne.n	8001434 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2208      	movs	r2, #8
 8001456:	4013      	ands	r3, r2
 8001458:	d036      	beq.n	80014c8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d019      	beq.n	8001496 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001462:	4b40      	ldr	r3, [pc, #256]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001464:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001466:	4b3f      	ldr	r3, [pc, #252]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001468:	2101      	movs	r1, #1
 800146a:	430a      	orrs	r2, r1
 800146c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146e:	f7ff fac1 	bl	80009f4 <HAL_GetTick>
 8001472:	0003      	movs	r3, r0
 8001474:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001478:	f7ff fabc 	bl	80009f4 <HAL_GetTick>
 800147c:	0002      	movs	r2, r0
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e250      	b.n	800192c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148a:	4b36      	ldr	r3, [pc, #216]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 800148c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800148e:	2202      	movs	r2, #2
 8001490:	4013      	ands	r3, r2
 8001492:	d0f1      	beq.n	8001478 <HAL_RCC_OscConfig+0x24c>
 8001494:	e018      	b.n	80014c8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001496:	4b33      	ldr	r3, [pc, #204]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001498:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800149a:	4b32      	ldr	r3, [pc, #200]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 800149c:	2101      	movs	r1, #1
 800149e:	438a      	bics	r2, r1
 80014a0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a2:	f7ff faa7 	bl	80009f4 <HAL_GetTick>
 80014a6:	0003      	movs	r3, r0
 80014a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ac:	f7ff faa2 	bl	80009f4 <HAL_GetTick>
 80014b0:	0002      	movs	r2, r0
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e236      	b.n	800192c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014be:	4b29      	ldr	r3, [pc, #164]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80014c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c2:	2202      	movs	r2, #2
 80014c4:	4013      	ands	r3, r2
 80014c6:	d1f1      	bne.n	80014ac <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2204      	movs	r2, #4
 80014ce:	4013      	ands	r3, r2
 80014d0:	d100      	bne.n	80014d4 <HAL_RCC_OscConfig+0x2a8>
 80014d2:	e0b5      	b.n	8001640 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014d4:	201f      	movs	r0, #31
 80014d6:	183b      	adds	r3, r7, r0
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014dc:	4b21      	ldr	r3, [pc, #132]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80014de:	69da      	ldr	r2, [r3, #28]
 80014e0:	2380      	movs	r3, #128	@ 0x80
 80014e2:	055b      	lsls	r3, r3, #21
 80014e4:	4013      	ands	r3, r2
 80014e6:	d110      	bne.n	800150a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80014ea:	69da      	ldr	r2, [r3, #28]
 80014ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80014ee:	2180      	movs	r1, #128	@ 0x80
 80014f0:	0549      	lsls	r1, r1, #21
 80014f2:	430a      	orrs	r2, r1
 80014f4:	61da      	str	r2, [r3, #28]
 80014f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80014f8:	69da      	ldr	r2, [r3, #28]
 80014fa:	2380      	movs	r3, #128	@ 0x80
 80014fc:	055b      	lsls	r3, r3, #21
 80014fe:	4013      	ands	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001504:	183b      	adds	r3, r7, r0
 8001506:	2201      	movs	r2, #1
 8001508:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150a:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <HAL_RCC_OscConfig+0x344>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	2380      	movs	r3, #128	@ 0x80
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4013      	ands	r3, r2
 8001514:	d11a      	bne.n	800154c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001516:	4b16      	ldr	r3, [pc, #88]	@ (8001570 <HAL_RCC_OscConfig+0x344>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <HAL_RCC_OscConfig+0x344>)
 800151c:	2180      	movs	r1, #128	@ 0x80
 800151e:	0049      	lsls	r1, r1, #1
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001524:	f7ff fa66 	bl	80009f4 <HAL_GetTick>
 8001528:	0003      	movs	r3, r0
 800152a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152e:	f7ff fa61 	bl	80009f4 <HAL_GetTick>
 8001532:	0002      	movs	r2, r0
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b64      	cmp	r3, #100	@ 0x64
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e1f5      	b.n	800192c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <HAL_RCC_OscConfig+0x344>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	@ 0x80
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4013      	ands	r3, r2
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d10f      	bne.n	8001574 <HAL_RCC_OscConfig+0x348>
 8001554:	4b03      	ldr	r3, [pc, #12]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001556:	6a1a      	ldr	r2, [r3, #32]
 8001558:	4b02      	ldr	r3, [pc, #8]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 800155a:	2101      	movs	r1, #1
 800155c:	430a      	orrs	r2, r1
 800155e:	621a      	str	r2, [r3, #32]
 8001560:	e036      	b.n	80015d0 <HAL_RCC_OscConfig+0x3a4>
 8001562:	46c0      	nop			@ (mov r8, r8)
 8001564:	40021000 	.word	0x40021000
 8001568:	fffeffff 	.word	0xfffeffff
 800156c:	fffbffff 	.word	0xfffbffff
 8001570:	40007000 	.word	0x40007000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10c      	bne.n	8001596 <HAL_RCC_OscConfig+0x36a>
 800157c:	4bca      	ldr	r3, [pc, #808]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800157e:	6a1a      	ldr	r2, [r3, #32]
 8001580:	4bc9      	ldr	r3, [pc, #804]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001582:	2101      	movs	r1, #1
 8001584:	438a      	bics	r2, r1
 8001586:	621a      	str	r2, [r3, #32]
 8001588:	4bc7      	ldr	r3, [pc, #796]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800158a:	6a1a      	ldr	r2, [r3, #32]
 800158c:	4bc6      	ldr	r3, [pc, #792]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800158e:	2104      	movs	r1, #4
 8001590:	438a      	bics	r2, r1
 8001592:	621a      	str	r2, [r3, #32]
 8001594:	e01c      	b.n	80015d0 <HAL_RCC_OscConfig+0x3a4>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b05      	cmp	r3, #5
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x38c>
 800159e:	4bc2      	ldr	r3, [pc, #776]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80015a0:	6a1a      	ldr	r2, [r3, #32]
 80015a2:	4bc1      	ldr	r3, [pc, #772]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80015a4:	2104      	movs	r1, #4
 80015a6:	430a      	orrs	r2, r1
 80015a8:	621a      	str	r2, [r3, #32]
 80015aa:	4bbf      	ldr	r3, [pc, #764]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80015ac:	6a1a      	ldr	r2, [r3, #32]
 80015ae:	4bbe      	ldr	r3, [pc, #760]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80015b0:	2101      	movs	r1, #1
 80015b2:	430a      	orrs	r2, r1
 80015b4:	621a      	str	r2, [r3, #32]
 80015b6:	e00b      	b.n	80015d0 <HAL_RCC_OscConfig+0x3a4>
 80015b8:	4bbb      	ldr	r3, [pc, #748]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80015ba:	6a1a      	ldr	r2, [r3, #32]
 80015bc:	4bba      	ldr	r3, [pc, #744]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80015be:	2101      	movs	r1, #1
 80015c0:	438a      	bics	r2, r1
 80015c2:	621a      	str	r2, [r3, #32]
 80015c4:	4bb8      	ldr	r3, [pc, #736]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80015c6:	6a1a      	ldr	r2, [r3, #32]
 80015c8:	4bb7      	ldr	r3, [pc, #732]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80015ca:	2104      	movs	r1, #4
 80015cc:	438a      	bics	r2, r1
 80015ce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d014      	beq.n	8001602 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d8:	f7ff fa0c 	bl	80009f4 <HAL_GetTick>
 80015dc:	0003      	movs	r3, r0
 80015de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e0:	e009      	b.n	80015f6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e2:	f7ff fa07 	bl	80009f4 <HAL_GetTick>
 80015e6:	0002      	movs	r2, r0
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	4aaf      	ldr	r2, [pc, #700]	@ (80018ac <HAL_RCC_OscConfig+0x680>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e19a      	b.n	800192c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f6:	4bac      	ldr	r3, [pc, #688]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	2202      	movs	r2, #2
 80015fc:	4013      	ands	r3, r2
 80015fe:	d0f0      	beq.n	80015e2 <HAL_RCC_OscConfig+0x3b6>
 8001600:	e013      	b.n	800162a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001602:	f7ff f9f7 	bl	80009f4 <HAL_GetTick>
 8001606:	0003      	movs	r3, r0
 8001608:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160a:	e009      	b.n	8001620 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800160c:	f7ff f9f2 	bl	80009f4 <HAL_GetTick>
 8001610:	0002      	movs	r2, r0
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	4aa5      	ldr	r2, [pc, #660]	@ (80018ac <HAL_RCC_OscConfig+0x680>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e185      	b.n	800192c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001620:	4ba1      	ldr	r3, [pc, #644]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	2202      	movs	r2, #2
 8001626:	4013      	ands	r3, r2
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800162a:	231f      	movs	r3, #31
 800162c:	18fb      	adds	r3, r7, r3
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d105      	bne.n	8001640 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001634:	4b9c      	ldr	r3, [pc, #624]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001636:	69da      	ldr	r2, [r3, #28]
 8001638:	4b9b      	ldr	r3, [pc, #620]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800163a:	499d      	ldr	r1, [pc, #628]	@ (80018b0 <HAL_RCC_OscConfig+0x684>)
 800163c:	400a      	ands	r2, r1
 800163e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2210      	movs	r2, #16
 8001646:	4013      	ands	r3, r2
 8001648:	d063      	beq.n	8001712 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d12a      	bne.n	80016a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001652:	4b95      	ldr	r3, [pc, #596]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001654:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001656:	4b94      	ldr	r3, [pc, #592]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001658:	2104      	movs	r1, #4
 800165a:	430a      	orrs	r2, r1
 800165c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800165e:	4b92      	ldr	r3, [pc, #584]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001662:	4b91      	ldr	r3, [pc, #580]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001664:	2101      	movs	r1, #1
 8001666:	430a      	orrs	r2, r1
 8001668:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166a:	f7ff f9c3 	bl	80009f4 <HAL_GetTick>
 800166e:	0003      	movs	r3, r0
 8001670:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001674:	f7ff f9be 	bl	80009f4 <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e152      	b.n	800192c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001686:	4b88      	ldr	r3, [pc, #544]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800168a:	2202      	movs	r2, #2
 800168c:	4013      	ands	r3, r2
 800168e:	d0f1      	beq.n	8001674 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001690:	4b85      	ldr	r3, [pc, #532]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001694:	22f8      	movs	r2, #248	@ 0xf8
 8001696:	4393      	bics	r3, r2
 8001698:	0019      	movs	r1, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	00da      	lsls	r2, r3, #3
 80016a0:	4b81      	ldr	r3, [pc, #516]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80016a2:	430a      	orrs	r2, r1
 80016a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80016a6:	e034      	b.n	8001712 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	3305      	adds	r3, #5
 80016ae:	d111      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80016b0:	4b7d      	ldr	r3, [pc, #500]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80016b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016b4:	4b7c      	ldr	r3, [pc, #496]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80016b6:	2104      	movs	r1, #4
 80016b8:	438a      	bics	r2, r1
 80016ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016bc:	4b7a      	ldr	r3, [pc, #488]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80016be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016c0:	22f8      	movs	r2, #248	@ 0xf8
 80016c2:	4393      	bics	r3, r2
 80016c4:	0019      	movs	r1, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	00da      	lsls	r2, r3, #3
 80016cc:	4b76      	ldr	r3, [pc, #472]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80016ce:	430a      	orrs	r2, r1
 80016d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80016d2:	e01e      	b.n	8001712 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016d4:	4b74      	ldr	r3, [pc, #464]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80016d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016d8:	4b73      	ldr	r3, [pc, #460]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80016da:	2104      	movs	r1, #4
 80016dc:	430a      	orrs	r2, r1
 80016de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80016e0:	4b71      	ldr	r3, [pc, #452]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80016e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016e4:	4b70      	ldr	r3, [pc, #448]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80016e6:	2101      	movs	r1, #1
 80016e8:	438a      	bics	r2, r1
 80016ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ec:	f7ff f982 	bl	80009f4 <HAL_GetTick>
 80016f0:	0003      	movs	r3, r0
 80016f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016f6:	f7ff f97d 	bl	80009f4 <HAL_GetTick>
 80016fa:	0002      	movs	r2, r0
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e111      	b.n	800192c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001708:	4b67      	ldr	r3, [pc, #412]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800170a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800170c:	2202      	movs	r2, #2
 800170e:	4013      	ands	r3, r2
 8001710:	d1f1      	bne.n	80016f6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2220      	movs	r2, #32
 8001718:	4013      	ands	r3, r2
 800171a:	d05c      	beq.n	80017d6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800171c:	4b62      	ldr	r3, [pc, #392]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	220c      	movs	r2, #12
 8001722:	4013      	ands	r3, r2
 8001724:	2b0c      	cmp	r3, #12
 8001726:	d00e      	beq.n	8001746 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001728:	4b5f      	ldr	r3, [pc, #380]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	220c      	movs	r2, #12
 800172e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001730:	2b08      	cmp	r3, #8
 8001732:	d114      	bne.n	800175e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001734:	4b5c      	ldr	r3, [pc, #368]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	23c0      	movs	r3, #192	@ 0xc0
 800173a:	025b      	lsls	r3, r3, #9
 800173c:	401a      	ands	r2, r3
 800173e:	23c0      	movs	r3, #192	@ 0xc0
 8001740:	025b      	lsls	r3, r3, #9
 8001742:	429a      	cmp	r2, r3
 8001744:	d10b      	bne.n	800175e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001746:	4b58      	ldr	r3, [pc, #352]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800174a:	2380      	movs	r3, #128	@ 0x80
 800174c:	029b      	lsls	r3, r3, #10
 800174e:	4013      	ands	r3, r2
 8001750:	d040      	beq.n	80017d4 <HAL_RCC_OscConfig+0x5a8>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d03c      	beq.n	80017d4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e0e6      	b.n	800192c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d01b      	beq.n	800179e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001766:	4b50      	ldr	r3, [pc, #320]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001768:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800176a:	4b4f      	ldr	r3, [pc, #316]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800176c:	2180      	movs	r1, #128	@ 0x80
 800176e:	0249      	lsls	r1, r1, #9
 8001770:	430a      	orrs	r2, r1
 8001772:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff f93e 	bl	80009f4 <HAL_GetTick>
 8001778:	0003      	movs	r3, r0
 800177a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800177e:	f7ff f939 	bl	80009f4 <HAL_GetTick>
 8001782:	0002      	movs	r2, r0
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e0cd      	b.n	800192c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001790:	4b45      	ldr	r3, [pc, #276]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001792:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001794:	2380      	movs	r3, #128	@ 0x80
 8001796:	029b      	lsls	r3, r3, #10
 8001798:	4013      	ands	r3, r2
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x552>
 800179c:	e01b      	b.n	80017d6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800179e:	4b42      	ldr	r3, [pc, #264]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80017a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017a2:	4b41      	ldr	r3, [pc, #260]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80017a4:	4943      	ldr	r1, [pc, #268]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 80017a6:	400a      	ands	r2, r1
 80017a8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7ff f923 	bl	80009f4 <HAL_GetTick>
 80017ae:	0003      	movs	r3, r0
 80017b0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017b4:	f7ff f91e 	bl	80009f4 <HAL_GetTick>
 80017b8:	0002      	movs	r2, r0
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e0b2      	b.n	800192c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80017c6:	4b38      	ldr	r3, [pc, #224]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80017c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017ca:	2380      	movs	r3, #128	@ 0x80
 80017cc:	029b      	lsls	r3, r3, #10
 80017ce:	4013      	ands	r3, r2
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x588>
 80017d2:	e000      	b.n	80017d6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80017d4:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d100      	bne.n	80017e0 <HAL_RCC_OscConfig+0x5b4>
 80017de:	e0a4      	b.n	800192a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e0:	4b31      	ldr	r3, [pc, #196]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	220c      	movs	r2, #12
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d100      	bne.n	80017ee <HAL_RCC_OscConfig+0x5c2>
 80017ec:	e078      	b.n	80018e0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d14c      	bne.n	8001890 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f6:	4b2c      	ldr	r3, [pc, #176]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	4b2b      	ldr	r3, [pc, #172]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80017fc:	492e      	ldr	r1, [pc, #184]	@ (80018b8 <HAL_RCC_OscConfig+0x68c>)
 80017fe:	400a      	ands	r2, r1
 8001800:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7ff f8f7 	bl	80009f4 <HAL_GetTick>
 8001806:	0003      	movs	r3, r0
 8001808:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180c:	f7ff f8f2 	bl	80009f4 <HAL_GetTick>
 8001810:	0002      	movs	r2, r0
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e086      	b.n	800192c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181e:	4b22      	ldr	r3, [pc, #136]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	2380      	movs	r3, #128	@ 0x80
 8001824:	049b      	lsls	r3, r3, #18
 8001826:	4013      	ands	r3, r2
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800182a:	4b1f      	ldr	r3, [pc, #124]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800182c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182e:	220f      	movs	r2, #15
 8001830:	4393      	bics	r3, r2
 8001832:	0019      	movs	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001838:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800183a:	430a      	orrs	r2, r1
 800183c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800183e:	4b1a      	ldr	r3, [pc, #104]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4a1e      	ldr	r2, [pc, #120]	@ (80018bc <HAL_RCC_OscConfig+0x690>)
 8001844:	4013      	ands	r3, r2
 8001846:	0019      	movs	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001850:	431a      	orrs	r2, r3
 8001852:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001854:	430a      	orrs	r2, r1
 8001856:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001858:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800185e:	2180      	movs	r1, #128	@ 0x80
 8001860:	0449      	lsls	r1, r1, #17
 8001862:	430a      	orrs	r2, r1
 8001864:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001866:	f7ff f8c5 	bl	80009f4 <HAL_GetTick>
 800186a:	0003      	movs	r3, r0
 800186c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff f8c0 	bl	80009f4 <HAL_GetTick>
 8001874:	0002      	movs	r2, r0
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e054      	b.n	800192c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001882:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	2380      	movs	r3, #128	@ 0x80
 8001888:	049b      	lsls	r3, r3, #18
 800188a:	4013      	ands	r3, r2
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x644>
 800188e:	e04c      	b.n	800192a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001890:	4b05      	ldr	r3, [pc, #20]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001896:	4908      	ldr	r1, [pc, #32]	@ (80018b8 <HAL_RCC_OscConfig+0x68c>)
 8001898:	400a      	ands	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189c:	f7ff f8aa 	bl	80009f4 <HAL_GetTick>
 80018a0:	0003      	movs	r3, r0
 80018a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a4:	e015      	b.n	80018d2 <HAL_RCC_OscConfig+0x6a6>
 80018a6:	46c0      	nop			@ (mov r8, r8)
 80018a8:	40021000 	.word	0x40021000
 80018ac:	00001388 	.word	0x00001388
 80018b0:	efffffff 	.word	0xefffffff
 80018b4:	fffeffff 	.word	0xfffeffff
 80018b8:	feffffff 	.word	0xfeffffff
 80018bc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c0:	f7ff f898 	bl	80009f4 <HAL_GetTick>
 80018c4:	0002      	movs	r2, r0
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e02c      	b.n	800192c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d2:	4b18      	ldr	r3, [pc, #96]	@ (8001934 <HAL_RCC_OscConfig+0x708>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	2380      	movs	r3, #128	@ 0x80
 80018d8:	049b      	lsls	r3, r3, #18
 80018da:	4013      	ands	r3, r2
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x694>
 80018de:	e024      	b.n	800192a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e01f      	b.n	800192c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80018ec:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <HAL_RCC_OscConfig+0x708>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <HAL_RCC_OscConfig+0x708>)
 80018f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	23c0      	movs	r3, #192	@ 0xc0
 80018fc:	025b      	lsls	r3, r3, #9
 80018fe:	401a      	ands	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001904:	429a      	cmp	r2, r3
 8001906:	d10e      	bne.n	8001926 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	220f      	movs	r2, #15
 800190c:	401a      	ands	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d107      	bne.n	8001926 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	23f0      	movs	r3, #240	@ 0xf0
 800191a:	039b      	lsls	r3, r3, #14
 800191c:	401a      	ands	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d001      	beq.n	800192a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	0018      	movs	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	b008      	add	sp, #32
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40021000 	.word	0x40021000

08001938 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0bf      	b.n	8001acc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800194c:	4b61      	ldr	r3, [pc, #388]	@ (8001ad4 <HAL_RCC_ClockConfig+0x19c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2201      	movs	r2, #1
 8001952:	4013      	ands	r3, r2
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d911      	bls.n	800197e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195a:	4b5e      	ldr	r3, [pc, #376]	@ (8001ad4 <HAL_RCC_ClockConfig+0x19c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2201      	movs	r2, #1
 8001960:	4393      	bics	r3, r2
 8001962:	0019      	movs	r1, r3
 8001964:	4b5b      	ldr	r3, [pc, #364]	@ (8001ad4 <HAL_RCC_ClockConfig+0x19c>)
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800196c:	4b59      	ldr	r3, [pc, #356]	@ (8001ad4 <HAL_RCC_ClockConfig+0x19c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2201      	movs	r2, #1
 8001972:	4013      	ands	r3, r2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d001      	beq.n	800197e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e0a6      	b.n	8001acc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2202      	movs	r2, #2
 8001984:	4013      	ands	r3, r2
 8001986:	d015      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2204      	movs	r2, #4
 800198e:	4013      	ands	r3, r2
 8001990:	d006      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001992:	4b51      	ldr	r3, [pc, #324]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	4b50      	ldr	r3, [pc, #320]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8001998:	21e0      	movs	r1, #224	@ 0xe0
 800199a:	00c9      	lsls	r1, r1, #3
 800199c:	430a      	orrs	r2, r1
 800199e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a0:	4b4d      	ldr	r3, [pc, #308]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	22f0      	movs	r2, #240	@ 0xf0
 80019a6:	4393      	bics	r3, r2
 80019a8:	0019      	movs	r1, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	4b4a      	ldr	r3, [pc, #296]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80019b0:	430a      	orrs	r2, r1
 80019b2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2201      	movs	r2, #1
 80019ba:	4013      	ands	r3, r2
 80019bc:	d04c      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c6:	4b44      	ldr	r3, [pc, #272]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	2380      	movs	r3, #128	@ 0x80
 80019cc:	029b      	lsls	r3, r3, #10
 80019ce:	4013      	ands	r3, r2
 80019d0:	d120      	bne.n	8001a14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e07a      	b.n	8001acc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019de:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	2380      	movs	r3, #128	@ 0x80
 80019e4:	049b      	lsls	r3, r3, #18
 80019e6:	4013      	ands	r3, r2
 80019e8:	d114      	bne.n	8001a14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e06e      	b.n	8001acc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d107      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019f6:	4b38      	ldr	r3, [pc, #224]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80019f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019fa:	2380      	movs	r3, #128	@ 0x80
 80019fc:	029b      	lsls	r3, r3, #10
 80019fe:	4013      	ands	r3, r2
 8001a00:	d108      	bne.n	8001a14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e062      	b.n	8001acc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a06:	4b34      	ldr	r3, [pc, #208]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e05b      	b.n	8001acc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a14:	4b30      	ldr	r3, [pc, #192]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2203      	movs	r2, #3
 8001a1a:	4393      	bics	r3, r2
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8001a24:	430a      	orrs	r2, r1
 8001a26:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a28:	f7fe ffe4 	bl	80009f4 <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a30:	e009      	b.n	8001a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a32:	f7fe ffdf 	bl	80009f4 <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	4a27      	ldr	r2, [pc, #156]	@ (8001adc <HAL_RCC_ClockConfig+0x1a4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e042      	b.n	8001acc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a46:	4b24      	ldr	r3, [pc, #144]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d1ec      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a58:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad4 <HAL_RCC_ClockConfig+0x19c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	4013      	ands	r3, r2
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d211      	bcs.n	8001a8a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a66:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad4 <HAL_RCC_ClockConfig+0x19c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4393      	bics	r3, r2
 8001a6e:	0019      	movs	r1, r3
 8001a70:	4b18      	ldr	r3, [pc, #96]	@ (8001ad4 <HAL_RCC_ClockConfig+0x19c>)
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a78:	4b16      	ldr	r3, [pc, #88]	@ (8001ad4 <HAL_RCC_ClockConfig+0x19c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	4013      	ands	r3, r2
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e020      	b.n	8001acc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2204      	movs	r2, #4
 8001a90:	4013      	ands	r3, r2
 8001a92:	d009      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a94:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	4a11      	ldr	r2, [pc, #68]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1a8>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001aa8:	f000 f820 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8001aac:	0001      	movs	r1, r0
 8001aae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1ac>)
 8001aba:	5cd3      	ldrb	r3, [r2, r3]
 8001abc:	000a      	movs	r2, r1
 8001abe:	40da      	lsrs	r2, r3
 8001ac0:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1b0>)
 8001ac2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ac4:	2003      	movs	r0, #3
 8001ac6:	f7fe ff4f 	bl	8000968 <HAL_InitTick>
  
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	0018      	movs	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b004      	add	sp, #16
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40022000 	.word	0x40022000
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	00001388 	.word	0x00001388
 8001ae0:	fffff8ff 	.word	0xfffff8ff
 8001ae4:	08003534 	.word	0x08003534
 8001ae8:	20000000 	.word	0x20000000

08001aec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001b06:	4b2d      	ldr	r3, [pc, #180]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	220c      	movs	r2, #12
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b0c      	cmp	r3, #12
 8001b14:	d046      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xb8>
 8001b16:	d848      	bhi.n	8001baa <HAL_RCC_GetSysClockFreq+0xbe>
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d002      	beq.n	8001b22 <HAL_RCC_GetSysClockFreq+0x36>
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d003      	beq.n	8001b28 <HAL_RCC_GetSysClockFreq+0x3c>
 8001b20:	e043      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b22:	4b27      	ldr	r3, [pc, #156]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001b24:	613b      	str	r3, [r7, #16]
      break;
 8001b26:	e043      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	0c9b      	lsrs	r3, r3, #18
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	4a24      	ldr	r2, [pc, #144]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001b32:	5cd3      	ldrb	r3, [r2, r3]
 8001b34:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b36:	4b21      	ldr	r3, [pc, #132]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8001b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	4a22      	ldr	r2, [pc, #136]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001b40:	5cd3      	ldrb	r3, [r2, r3]
 8001b42:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	23c0      	movs	r3, #192	@ 0xc0
 8001b48:	025b      	lsls	r3, r3, #9
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	2380      	movs	r3, #128	@ 0x80
 8001b4e:	025b      	lsls	r3, r3, #9
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d109      	bne.n	8001b68 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	481a      	ldr	r0, [pc, #104]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001b58:	f7fe fad6 	bl	8000108 <__udivsi3>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	001a      	movs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4353      	muls	r3, r2
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	e01a      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	23c0      	movs	r3, #192	@ 0xc0
 8001b6c:	025b      	lsls	r3, r3, #9
 8001b6e:	401a      	ands	r2, r3
 8001b70:	23c0      	movs	r3, #192	@ 0xc0
 8001b72:	025b      	lsls	r3, r3, #9
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d109      	bne.n	8001b8c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	4814      	ldr	r0, [pc, #80]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0xe0>)
 8001b7c:	f7fe fac4 	bl	8000108 <__udivsi3>
 8001b80:	0003      	movs	r3, r0
 8001b82:	001a      	movs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4353      	muls	r3, r2
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	480c      	ldr	r0, [pc, #48]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001b90:	f7fe faba 	bl	8000108 <__udivsi3>
 8001b94:	0003      	movs	r3, r0
 8001b96:	001a      	movs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4353      	muls	r3, r2
 8001b9c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	613b      	str	r3, [r7, #16]
      break;
 8001ba2:	e005      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0xe0>)
 8001ba6:	613b      	str	r3, [r7, #16]
      break;
 8001ba8:	e002      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001baa:	4b05      	ldr	r3, [pc, #20]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001bac:	613b      	str	r3, [r7, #16]
      break;
 8001bae:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001bb0:	693b      	ldr	r3, [r7, #16]
}
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b006      	add	sp, #24
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	46c0      	nop			@ (mov r8, r8)
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	007a1200 	.word	0x007a1200
 8001bc4:	0800354c 	.word	0x0800354c
 8001bc8:	0800355c 	.word	0x0800355c
 8001bcc:	02dc6c00 	.word	0x02dc6c00

08001bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd4:	4b02      	ldr	r3, [pc, #8]	@ (8001be0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	0018      	movs	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	46c0      	nop			@ (mov r8, r8)
 8001be0:	20000000 	.word	0x20000000

08001be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001be8:	f7ff fff2 	bl	8001bd0 <HAL_RCC_GetHCLKFreq>
 8001bec:	0001      	movs	r1, r0
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	4a04      	ldr	r2, [pc, #16]	@ (8001c0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bfa:	5cd3      	ldrb	r3, [r2, r3]
 8001bfc:	40d9      	lsrs	r1, r3
 8001bfe:	000b      	movs	r3, r1
}    
 8001c00:	0018      	movs	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			@ (mov r8, r8)
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	08003544 	.word	0x08003544

08001c10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	2380      	movs	r3, #128	@ 0x80
 8001c26:	025b      	lsls	r3, r3, #9
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d100      	bne.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001c2c:	e08e      	b.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001c2e:	2017      	movs	r0, #23
 8001c30:	183b      	adds	r3, r7, r0
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c36:	4b66      	ldr	r3, [pc, #408]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c38:	69da      	ldr	r2, [r3, #28]
 8001c3a:	2380      	movs	r3, #128	@ 0x80
 8001c3c:	055b      	lsls	r3, r3, #21
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d110      	bne.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	4b63      	ldr	r3, [pc, #396]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c44:	69da      	ldr	r2, [r3, #28]
 8001c46:	4b62      	ldr	r3, [pc, #392]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c48:	2180      	movs	r1, #128	@ 0x80
 8001c4a:	0549      	lsls	r1, r1, #21
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	61da      	str	r2, [r3, #28]
 8001c50:	4b5f      	ldr	r3, [pc, #380]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c52:	69da      	ldr	r2, [r3, #28]
 8001c54:	2380      	movs	r3, #128	@ 0x80
 8001c56:	055b      	lsls	r3, r3, #21
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5e:	183b      	adds	r3, r7, r0
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	4b5b      	ldr	r3, [pc, #364]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	2380      	movs	r3, #128	@ 0x80
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d11a      	bne.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c70:	4b58      	ldr	r3, [pc, #352]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b57      	ldr	r3, [pc, #348]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c76:	2180      	movs	r1, #128	@ 0x80
 8001c78:	0049      	lsls	r1, r1, #1
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7e:	f7fe feb9 	bl	80009f4 <HAL_GetTick>
 8001c82:	0003      	movs	r3, r0
 8001c84:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c86:	e008      	b.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c88:	f7fe feb4 	bl	80009f4 <HAL_GetTick>
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	@ 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e096      	b.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9a:	4b4e      	ldr	r3, [pc, #312]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	2380      	movs	r3, #128	@ 0x80
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ca6:	4b4a      	ldr	r3, [pc, #296]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ca8:	6a1a      	ldr	r2, [r3, #32]
 8001caa:	23c0      	movs	r3, #192	@ 0xc0
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4013      	ands	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d034      	beq.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	23c0      	movs	r3, #192	@ 0xc0
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d02c      	beq.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cc8:	4b41      	ldr	r3, [pc, #260]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	4a42      	ldr	r2, [pc, #264]	@ (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cd2:	4b3f      	ldr	r3, [pc, #252]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001cd4:	6a1a      	ldr	r2, [r3, #32]
 8001cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001cd8:	2180      	movs	r1, #128	@ 0x80
 8001cda:	0249      	lsls	r1, r1, #9
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ce0:	4b3b      	ldr	r3, [pc, #236]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ce2:	6a1a      	ldr	r2, [r3, #32]
 8001ce4:	4b3a      	ldr	r3, [pc, #232]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ce6:	493d      	ldr	r1, [pc, #244]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001ce8:	400a      	ands	r2, r1
 8001cea:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001cec:	4b38      	ldr	r3, [pc, #224]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d013      	beq.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfa:	f7fe fe7b 	bl	80009f4 <HAL_GetTick>
 8001cfe:	0003      	movs	r3, r0
 8001d00:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d02:	e009      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d04:	f7fe fe76 	bl	80009f4 <HAL_GetTick>
 8001d08:	0002      	movs	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	4a34      	ldr	r2, [pc, #208]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e057      	b.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d22:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	4a2c      	ldr	r2, [pc, #176]	@ (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	0019      	movs	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	4b27      	ldr	r3, [pc, #156]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d32:	430a      	orrs	r2, r1
 8001d34:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d36:	2317      	movs	r3, #23
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d105      	bne.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d40:	4b23      	ldr	r3, [pc, #140]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d42:	69da      	ldr	r2, [r3, #28]
 8001d44:	4b22      	ldr	r3, [pc, #136]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d46:	4927      	ldr	r1, [pc, #156]	@ (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d48:	400a      	ands	r2, r1
 8001d4a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2201      	movs	r2, #1
 8001d52:	4013      	ands	r3, r2
 8001d54:	d009      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d56:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	4393      	bics	r3, r2
 8001d5e:	0019      	movs	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d66:	430a      	orrs	r2, r1
 8001d68:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	4013      	ands	r3, r2
 8001d72:	d009      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d74:	4b16      	ldr	r3, [pc, #88]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d78:	4a1b      	ldr	r2, [pc, #108]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	0019      	movs	r1, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	4b13      	ldr	r3, [pc, #76]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d84:	430a      	orrs	r2, r1
 8001d86:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d009      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d92:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	2210      	movs	r2, #16
 8001d98:	4393      	bics	r3, r2
 8001d9a:	0019      	movs	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001da2:	430a      	orrs	r2, r1
 8001da4:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	2380      	movs	r3, #128	@ 0x80
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4013      	ands	r3, r2
 8001db0:	d009      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001db2:	4b07      	ldr	r3, [pc, #28]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	2240      	movs	r2, #64	@ 0x40
 8001db8:	4393      	bics	r3, r2
 8001dba:	0019      	movs	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	695a      	ldr	r2, [r3, #20]
 8001dc0:	4b03      	ldr	r3, [pc, #12]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	0018      	movs	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b006      	add	sp, #24
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40007000 	.word	0x40007000
 8001dd8:	fffffcff 	.word	0xfffffcff
 8001ddc:	fffeffff 	.word	0xfffeffff
 8001de0:	00001388 	.word	0x00001388
 8001de4:	efffffff 	.word	0xefffffff
 8001de8:	fffcffff 	.word	0xfffcffff

08001dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e042      	b.n	8001e84 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	223d      	movs	r2, #61	@ 0x3d
 8001e02:	5c9b      	ldrb	r3, [r3, r2]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d107      	bne.n	8001e1a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	223c      	movs	r2, #60	@ 0x3c
 8001e0e:	2100      	movs	r1, #0
 8001e10:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	0018      	movs	r0, r3
 8001e16:	f7fe fbe9 	bl	80005ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	223d      	movs	r2, #61	@ 0x3d
 8001e1e:	2102      	movs	r1, #2
 8001e20:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	0010      	movs	r0, r2
 8001e2e:	f000 fa61 	bl	80022f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2246      	movs	r2, #70	@ 0x46
 8001e36:	2101      	movs	r1, #1
 8001e38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	223e      	movs	r2, #62	@ 0x3e
 8001e3e:	2101      	movs	r1, #1
 8001e40:	5499      	strb	r1, [r3, r2]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	223f      	movs	r2, #63	@ 0x3f
 8001e46:	2101      	movs	r1, #1
 8001e48:	5499      	strb	r1, [r3, r2]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2240      	movs	r2, #64	@ 0x40
 8001e4e:	2101      	movs	r1, #1
 8001e50:	5499      	strb	r1, [r3, r2]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2241      	movs	r2, #65	@ 0x41
 8001e56:	2101      	movs	r1, #1
 8001e58:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2242      	movs	r2, #66	@ 0x42
 8001e5e:	2101      	movs	r1, #1
 8001e60:	5499      	strb	r1, [r3, r2]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2243      	movs	r2, #67	@ 0x43
 8001e66:	2101      	movs	r1, #1
 8001e68:	5499      	strb	r1, [r3, r2]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2244      	movs	r2, #68	@ 0x44
 8001e6e:	2101      	movs	r1, #1
 8001e70:	5499      	strb	r1, [r3, r2]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2245      	movs	r2, #69	@ 0x45
 8001e76:	2101      	movs	r1, #1
 8001e78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	223d      	movs	r2, #61	@ 0x3d
 8001e7e:	2101      	movs	r1, #1
 8001e80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	0018      	movs	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b002      	add	sp, #8
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	223d      	movs	r2, #61	@ 0x3d
 8001e98:	5c9b      	ldrb	r3, [r3, r2]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d001      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e03b      	b.n	8001f1c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	223d      	movs	r2, #61	@ 0x3d
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a18      	ldr	r2, [pc, #96]	@ (8001f24 <HAL_TIM_Base_Start_IT+0x98>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00f      	beq.n	8001ee6 <HAL_TIM_Base_Start_IT+0x5a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	2380      	movs	r3, #128	@ 0x80
 8001ecc:	05db      	lsls	r3, r3, #23
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d009      	beq.n	8001ee6 <HAL_TIM_Base_Start_IT+0x5a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a14      	ldr	r2, [pc, #80]	@ (8001f28 <HAL_TIM_Base_Start_IT+0x9c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d004      	beq.n	8001ee6 <HAL_TIM_Base_Start_IT+0x5a>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a12      	ldr	r2, [pc, #72]	@ (8001f2c <HAL_TIM_Base_Start_IT+0xa0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d111      	bne.n	8001f0a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2207      	movs	r2, #7
 8001eee:	4013      	ands	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2b06      	cmp	r3, #6
 8001ef6:	d010      	beq.n	8001f1a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2101      	movs	r1, #1
 8001f04:	430a      	orrs	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f08:	e007      	b.n	8001f1a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2101      	movs	r1, #1
 8001f16:	430a      	orrs	r2, r1
 8001f18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b004      	add	sp, #16
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40012c00 	.word	0x40012c00
 8001f28:	40000400 	.word	0x40000400
 8001f2c:	40014000 	.word	0x40014000

08001f30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d021      	beq.n	8001f94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2202      	movs	r2, #2
 8001f54:	4013      	ands	r3, r2
 8001f56:	d01d      	beq.n	8001f94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	4252      	negs	r2, r2
 8001f60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	2203      	movs	r2, #3
 8001f70:	4013      	ands	r3, r2
 8001f72:	d004      	beq.n	8001f7e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	0018      	movs	r0, r3
 8001f78:	f000 f9a4 	bl	80022c4 <HAL_TIM_IC_CaptureCallback>
 8001f7c:	e007      	b.n	8001f8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	0018      	movs	r0, r3
 8001f82:	f000 f997 	bl	80022b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f000 f9a3 	bl	80022d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2204      	movs	r2, #4
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d022      	beq.n	8001fe2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d01e      	beq.n	8001fe2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2205      	movs	r2, #5
 8001faa:	4252      	negs	r2, r2
 8001fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699a      	ldr	r2, [r3, #24]
 8001fba:	23c0      	movs	r3, #192	@ 0xc0
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d004      	beq.n	8001fcc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f000 f97d 	bl	80022c4 <HAL_TIM_IC_CaptureCallback>
 8001fca:	e007      	b.n	8001fdc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f000 f970 	bl	80022b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f000 f97c 	bl	80022d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2208      	movs	r2, #8
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d021      	beq.n	800202e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2208      	movs	r2, #8
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d01d      	beq.n	800202e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2209      	movs	r2, #9
 8001ff8:	4252      	negs	r2, r2
 8001ffa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2204      	movs	r2, #4
 8002000:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	2203      	movs	r2, #3
 800200a:	4013      	ands	r3, r2
 800200c:	d004      	beq.n	8002018 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	0018      	movs	r0, r3
 8002012:	f000 f957 	bl	80022c4 <HAL_TIM_IC_CaptureCallback>
 8002016:	e007      	b.n	8002028 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	0018      	movs	r0, r3
 800201c:	f000 f94a 	bl	80022b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	0018      	movs	r0, r3
 8002024:	f000 f956 	bl	80022d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2210      	movs	r2, #16
 8002032:	4013      	ands	r3, r2
 8002034:	d022      	beq.n	800207c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2210      	movs	r2, #16
 800203a:	4013      	ands	r3, r2
 800203c:	d01e      	beq.n	800207c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2211      	movs	r2, #17
 8002044:	4252      	negs	r2, r2
 8002046:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2208      	movs	r2, #8
 800204c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	69da      	ldr	r2, [r3, #28]
 8002054:	23c0      	movs	r3, #192	@ 0xc0
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4013      	ands	r3, r2
 800205a:	d004      	beq.n	8002066 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	0018      	movs	r0, r3
 8002060:	f000 f930 	bl	80022c4 <HAL_TIM_IC_CaptureCallback>
 8002064:	e007      	b.n	8002076 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	0018      	movs	r0, r3
 800206a:	f000 f923 	bl	80022b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	0018      	movs	r0, r3
 8002072:	f000 f92f 	bl	80022d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2201      	movs	r2, #1
 8002080:	4013      	ands	r3, r2
 8002082:	d00c      	beq.n	800209e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2201      	movs	r2, #1
 8002088:	4013      	ands	r3, r2
 800208a:	d008      	beq.n	800209e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2202      	movs	r2, #2
 8002092:	4252      	negs	r2, r2
 8002094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	0018      	movs	r0, r3
 800209a:	f7fe fc0f 	bl	80008bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2280      	movs	r2, #128	@ 0x80
 80020a2:	4013      	ands	r3, r2
 80020a4:	d00c      	beq.n	80020c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2280      	movs	r2, #128	@ 0x80
 80020aa:	4013      	ands	r3, r2
 80020ac:	d008      	beq.n	80020c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2281      	movs	r2, #129	@ 0x81
 80020b4:	4252      	negs	r2, r2
 80020b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	0018      	movs	r0, r3
 80020bc:	f000 faa8 	bl	8002610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2240      	movs	r2, #64	@ 0x40
 80020c4:	4013      	ands	r3, r2
 80020c6:	d00c      	beq.n	80020e2 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2240      	movs	r2, #64	@ 0x40
 80020cc:	4013      	ands	r3, r2
 80020ce:	d008      	beq.n	80020e2 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2241      	movs	r2, #65	@ 0x41
 80020d6:	4252      	negs	r2, r2
 80020d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	0018      	movs	r0, r3
 80020de:	f000 f901 	bl	80022e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2220      	movs	r2, #32
 80020e6:	4013      	ands	r3, r2
 80020e8:	d00c      	beq.n	8002104 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2220      	movs	r2, #32
 80020ee:	4013      	ands	r3, r2
 80020f0:	d008      	beq.n	8002104 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2221      	movs	r2, #33	@ 0x21
 80020f8:	4252      	negs	r2, r2
 80020fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	0018      	movs	r0, r3
 8002100:	f000 fa7e 	bl	8002600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002104:	46c0      	nop			@ (mov r8, r8)
 8002106:	46bd      	mov	sp, r7
 8002108:	b004      	add	sp, #16
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002116:	230f      	movs	r3, #15
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	223c      	movs	r2, #60	@ 0x3c
 8002122:	5c9b      	ldrb	r3, [r3, r2]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_TIM_ConfigClockSource+0x20>
 8002128:	2302      	movs	r3, #2
 800212a:	e0bc      	b.n	80022a6 <HAL_TIM_ConfigClockSource+0x19a>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	223c      	movs	r2, #60	@ 0x3c
 8002130:	2101      	movs	r1, #1
 8002132:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	223d      	movs	r2, #61	@ 0x3d
 8002138:	2102      	movs	r1, #2
 800213a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2277      	movs	r2, #119	@ 0x77
 8002148:	4393      	bics	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	4a58      	ldr	r2, [pc, #352]	@ (80022b0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002150:	4013      	ands	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2280      	movs	r2, #128	@ 0x80
 8002162:	0192      	lsls	r2, r2, #6
 8002164:	4293      	cmp	r3, r2
 8002166:	d040      	beq.n	80021ea <HAL_TIM_ConfigClockSource+0xde>
 8002168:	2280      	movs	r2, #128	@ 0x80
 800216a:	0192      	lsls	r2, r2, #6
 800216c:	4293      	cmp	r3, r2
 800216e:	d900      	bls.n	8002172 <HAL_TIM_ConfigClockSource+0x66>
 8002170:	e088      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x178>
 8002172:	2280      	movs	r2, #128	@ 0x80
 8002174:	0152      	lsls	r2, r2, #5
 8002176:	4293      	cmp	r3, r2
 8002178:	d100      	bne.n	800217c <HAL_TIM_ConfigClockSource+0x70>
 800217a:	e088      	b.n	800228e <HAL_TIM_ConfigClockSource+0x182>
 800217c:	2280      	movs	r2, #128	@ 0x80
 800217e:	0152      	lsls	r2, r2, #5
 8002180:	4293      	cmp	r3, r2
 8002182:	d900      	bls.n	8002186 <HAL_TIM_ConfigClockSource+0x7a>
 8002184:	e07e      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x178>
 8002186:	2b70      	cmp	r3, #112	@ 0x70
 8002188:	d018      	beq.n	80021bc <HAL_TIM_ConfigClockSource+0xb0>
 800218a:	d900      	bls.n	800218e <HAL_TIM_ConfigClockSource+0x82>
 800218c:	e07a      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x178>
 800218e:	2b60      	cmp	r3, #96	@ 0x60
 8002190:	d04f      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0x126>
 8002192:	d900      	bls.n	8002196 <HAL_TIM_ConfigClockSource+0x8a>
 8002194:	e076      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x178>
 8002196:	2b50      	cmp	r3, #80	@ 0x50
 8002198:	d03b      	beq.n	8002212 <HAL_TIM_ConfigClockSource+0x106>
 800219a:	d900      	bls.n	800219e <HAL_TIM_ConfigClockSource+0x92>
 800219c:	e072      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x178>
 800219e:	2b40      	cmp	r3, #64	@ 0x40
 80021a0:	d057      	beq.n	8002252 <HAL_TIM_ConfigClockSource+0x146>
 80021a2:	d900      	bls.n	80021a6 <HAL_TIM_ConfigClockSource+0x9a>
 80021a4:	e06e      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x178>
 80021a6:	2b30      	cmp	r3, #48	@ 0x30
 80021a8:	d063      	beq.n	8002272 <HAL_TIM_ConfigClockSource+0x166>
 80021aa:	d86b      	bhi.n	8002284 <HAL_TIM_ConfigClockSource+0x178>
 80021ac:	2b20      	cmp	r3, #32
 80021ae:	d060      	beq.n	8002272 <HAL_TIM_ConfigClockSource+0x166>
 80021b0:	d868      	bhi.n	8002284 <HAL_TIM_ConfigClockSource+0x178>
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d05d      	beq.n	8002272 <HAL_TIM_ConfigClockSource+0x166>
 80021b6:	2b10      	cmp	r3, #16
 80021b8:	d05b      	beq.n	8002272 <HAL_TIM_ConfigClockSource+0x166>
 80021ba:	e063      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021cc:	f000 f99a 	bl	8002504 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2277      	movs	r2, #119	@ 0x77
 80021dc:	4313      	orrs	r3, r2
 80021de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	609a      	str	r2, [r3, #8]
      break;
 80021e8:	e052      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021fa:	f000 f983 	bl	8002504 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2180      	movs	r1, #128	@ 0x80
 800220a:	01c9      	lsls	r1, r1, #7
 800220c:	430a      	orrs	r2, r1
 800220e:	609a      	str	r2, [r3, #8]
      break;
 8002210:	e03e      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800221e:	001a      	movs	r2, r3
 8002220:	f000 f8f6 	bl	8002410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2150      	movs	r1, #80	@ 0x50
 800222a:	0018      	movs	r0, r3
 800222c:	f000 f950 	bl	80024d0 <TIM_ITRx_SetConfig>
      break;
 8002230:	e02e      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800223e:	001a      	movs	r2, r3
 8002240:	f000 f914 	bl	800246c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2160      	movs	r1, #96	@ 0x60
 800224a:	0018      	movs	r0, r3
 800224c:	f000 f940 	bl	80024d0 <TIM_ITRx_SetConfig>
      break;
 8002250:	e01e      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800225e:	001a      	movs	r2, r3
 8002260:	f000 f8d6 	bl	8002410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2140      	movs	r1, #64	@ 0x40
 800226a:	0018      	movs	r0, r3
 800226c:	f000 f930 	bl	80024d0 <TIM_ITRx_SetConfig>
      break;
 8002270:	e00e      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	0019      	movs	r1, r3
 800227c:	0010      	movs	r0, r2
 800227e:	f000 f927 	bl	80024d0 <TIM_ITRx_SetConfig>
      break;
 8002282:	e005      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002284:	230f      	movs	r3, #15
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	2201      	movs	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
      break;
 800228c:	e000      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800228e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	223d      	movs	r2, #61	@ 0x3d
 8002294:	2101      	movs	r1, #1
 8002296:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	223c      	movs	r2, #60	@ 0x3c
 800229c:	2100      	movs	r1, #0
 800229e:	5499      	strb	r1, [r3, r2]

  return status;
 80022a0:	230f      	movs	r3, #15
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	781b      	ldrb	r3, [r3, #0]
}
 80022a6:	0018      	movs	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	b004      	add	sp, #16
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	46c0      	nop			@ (mov r8, r8)
 80022b0:	ffff00ff 	.word	0xffff00ff

080022b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022bc:	46c0      	nop			@ (mov r8, r8)
 80022be:	46bd      	mov	sp, r7
 80022c0:	b002      	add	sp, #8
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022cc:	46c0      	nop			@ (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b002      	add	sp, #8
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022dc:	46c0      	nop			@ (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	b002      	add	sp, #8
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022ec:	46c0      	nop			@ (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b002      	add	sp, #8
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a3b      	ldr	r2, [pc, #236]	@ (80023f4 <TIM_Base_SetConfig+0x100>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d008      	beq.n	800231e <TIM_Base_SetConfig+0x2a>
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	2380      	movs	r3, #128	@ 0x80
 8002310:	05db      	lsls	r3, r3, #23
 8002312:	429a      	cmp	r2, r3
 8002314:	d003      	beq.n	800231e <TIM_Base_SetConfig+0x2a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a37      	ldr	r2, [pc, #220]	@ (80023f8 <TIM_Base_SetConfig+0x104>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d108      	bne.n	8002330 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2270      	movs	r2, #112	@ 0x70
 8002322:	4393      	bics	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4313      	orrs	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a30      	ldr	r2, [pc, #192]	@ (80023f4 <TIM_Base_SetConfig+0x100>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d018      	beq.n	800236a <TIM_Base_SetConfig+0x76>
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	2380      	movs	r3, #128	@ 0x80
 800233c:	05db      	lsls	r3, r3, #23
 800233e:	429a      	cmp	r2, r3
 8002340:	d013      	beq.n	800236a <TIM_Base_SetConfig+0x76>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a2c      	ldr	r2, [pc, #176]	@ (80023f8 <TIM_Base_SetConfig+0x104>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00f      	beq.n	800236a <TIM_Base_SetConfig+0x76>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a2b      	ldr	r2, [pc, #172]	@ (80023fc <TIM_Base_SetConfig+0x108>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00b      	beq.n	800236a <TIM_Base_SetConfig+0x76>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a2a      	ldr	r2, [pc, #168]	@ (8002400 <TIM_Base_SetConfig+0x10c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d007      	beq.n	800236a <TIM_Base_SetConfig+0x76>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a29      	ldr	r2, [pc, #164]	@ (8002404 <TIM_Base_SetConfig+0x110>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d003      	beq.n	800236a <TIM_Base_SetConfig+0x76>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a28      	ldr	r2, [pc, #160]	@ (8002408 <TIM_Base_SetConfig+0x114>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d108      	bne.n	800237c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4a27      	ldr	r2, [pc, #156]	@ (800240c <TIM_Base_SetConfig+0x118>)
 800236e:	4013      	ands	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4313      	orrs	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2280      	movs	r2, #128	@ 0x80
 8002380:	4393      	bics	r3, r2
 8002382:	001a      	movs	r2, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	4313      	orrs	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a13      	ldr	r2, [pc, #76]	@ (80023f4 <TIM_Base_SetConfig+0x100>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00b      	beq.n	80023c2 <TIM_Base_SetConfig+0xce>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a14      	ldr	r2, [pc, #80]	@ (8002400 <TIM_Base_SetConfig+0x10c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d007      	beq.n	80023c2 <TIM_Base_SetConfig+0xce>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a13      	ldr	r2, [pc, #76]	@ (8002404 <TIM_Base_SetConfig+0x110>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d003      	beq.n	80023c2 <TIM_Base_SetConfig+0xce>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a12      	ldr	r2, [pc, #72]	@ (8002408 <TIM_Base_SetConfig+0x114>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d103      	bne.n	80023ca <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	2201      	movs	r2, #1
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d106      	bne.n	80023ea <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	2201      	movs	r2, #1
 80023e2:	4393      	bics	r3, r2
 80023e4:	001a      	movs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	611a      	str	r2, [r3, #16]
  }
}
 80023ea:	46c0      	nop			@ (mov r8, r8)
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b004      	add	sp, #16
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	46c0      	nop			@ (mov r8, r8)
 80023f4:	40012c00 	.word	0x40012c00
 80023f8:	40000400 	.word	0x40000400
 80023fc:	40002000 	.word	0x40002000
 8002400:	40014000 	.word	0x40014000
 8002404:	40014400 	.word	0x40014400
 8002408:	40014800 	.word	0x40014800
 800240c:	fffffcff 	.word	0xfffffcff

08002410 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	2201      	movs	r2, #1
 8002428:	4393      	bics	r3, r2
 800242a:	001a      	movs	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	22f0      	movs	r2, #240	@ 0xf0
 800243a:	4393      	bics	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	220a      	movs	r2, #10
 800244c:	4393      	bics	r3, r2
 800244e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	4313      	orrs	r3, r2
 8002456:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	621a      	str	r2, [r3, #32]
}
 8002464:	46c0      	nop			@ (mov r8, r8)
 8002466:	46bd      	mov	sp, r7
 8002468:	b006      	add	sp, #24
 800246a:	bd80      	pop	{r7, pc}

0800246c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	2210      	movs	r2, #16
 8002484:	4393      	bics	r3, r2
 8002486:	001a      	movs	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4a0d      	ldr	r2, [pc, #52]	@ (80024cc <TIM_TI2_ConfigInputStage+0x60>)
 8002496:	4013      	ands	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	031b      	lsls	r3, r3, #12
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	22a0      	movs	r2, #160	@ 0xa0
 80024a8:	4393      	bics	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	621a      	str	r2, [r3, #32]
}
 80024c2:	46c0      	nop			@ (mov r8, r8)
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b006      	add	sp, #24
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	46c0      	nop			@ (mov r8, r8)
 80024cc:	ffff0fff 	.word	0xffff0fff

080024d0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2270      	movs	r2, #112	@ 0x70
 80024e4:	4393      	bics	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	2207      	movs	r2, #7
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	609a      	str	r2, [r3, #8]
}
 80024fa:	46c0      	nop			@ (mov r8, r8)
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b004      	add	sp, #16
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	4a09      	ldr	r2, [pc, #36]	@ (8002540 <TIM_ETR_SetConfig+0x3c>)
 800251c:	4013      	ands	r3, r2
 800251e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	021a      	lsls	r2, r3, #8
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	431a      	orrs	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4313      	orrs	r3, r2
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	4313      	orrs	r3, r2
 8002530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	609a      	str	r2, [r3, #8]
}
 8002538:	46c0      	nop			@ (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	b006      	add	sp, #24
 800253e:	bd80      	pop	{r7, pc}
 8002540:	ffff00ff 	.word	0xffff00ff

08002544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	223c      	movs	r2, #60	@ 0x3c
 8002552:	5c9b      	ldrb	r3, [r3, r2]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002558:	2302      	movs	r3, #2
 800255a:	e047      	b.n	80025ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	223c      	movs	r2, #60	@ 0x3c
 8002560:	2101      	movs	r1, #1
 8002562:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	223d      	movs	r2, #61	@ 0x3d
 8002568:	2102      	movs	r1, #2
 800256a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2270      	movs	r2, #112	@ 0x70
 8002580:	4393      	bics	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a16      	ldr	r2, [pc, #88]	@ (80025f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d00f      	beq.n	80025c0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	2380      	movs	r3, #128	@ 0x80
 80025a6:	05db      	lsls	r3, r3, #23
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d009      	beq.n	80025c0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a11      	ldr	r2, [pc, #68]	@ (80025f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d004      	beq.n	80025c0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a10      	ldr	r2, [pc, #64]	@ (80025fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d10c      	bne.n	80025da <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2280      	movs	r2, #128	@ 0x80
 80025c4:	4393      	bics	r3, r2
 80025c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	223d      	movs	r2, #61	@ 0x3d
 80025de:	2101      	movs	r1, #1
 80025e0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	223c      	movs	r2, #60	@ 0x3c
 80025e6:	2100      	movs	r1, #0
 80025e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b004      	add	sp, #16
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40012c00 	.word	0x40012c00
 80025f8:	40000400 	.word	0x40000400
 80025fc:	40014000 	.word	0x40014000

08002600 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002608:	46c0      	nop			@ (mov r8, r8)
 800260a:	46bd      	mov	sp, r7
 800260c:	b002      	add	sp, #8
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002618:	46c0      	nop			@ (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	b002      	add	sp, #8
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e044      	b.n	80026bc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002636:	2b00      	cmp	r3, #0
 8002638:	d107      	bne.n	800264a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2278      	movs	r2, #120	@ 0x78
 800263e:	2100      	movs	r1, #0
 8002640:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	0018      	movs	r0, r3
 8002646:	f7fd fff5 	bl	8000634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2224      	movs	r2, #36	@ 0x24
 800264e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2101      	movs	r1, #1
 800265c:	438a      	bics	r2, r1
 800265e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	0018      	movs	r0, r3
 800266c:	f000 fcb0 	bl	8002fd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	0018      	movs	r0, r3
 8002674:	f000 fb24 	bl	8002cc0 <UART_SetConfig>
 8002678:	0003      	movs	r3, r0
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e01c      	b.n	80026bc <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	490d      	ldr	r1, [pc, #52]	@ (80026c4 <HAL_UART_Init+0xa4>)
 800268e:	400a      	ands	r2, r1
 8002690:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	212a      	movs	r1, #42	@ 0x2a
 800269e:	438a      	bics	r2, r1
 80026a0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2101      	movs	r1, #1
 80026ae:	430a      	orrs	r2, r1
 80026b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	0018      	movs	r0, r3
 80026b6:	f000 fd3f 	bl	8003138 <UART_CheckIdleState>
 80026ba:	0003      	movs	r3, r0
}
 80026bc:	0018      	movs	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	b002      	add	sp, #8
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	ffffb7ff 	.word	0xffffb7ff

080026c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b0ab      	sub	sp, #172	@ 0xac
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	22a4      	movs	r2, #164	@ 0xa4
 80026d8:	18b9      	adds	r1, r7, r2
 80026da:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	20a0      	movs	r0, #160	@ 0xa0
 80026e4:	1839      	adds	r1, r7, r0
 80026e6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	219c      	movs	r1, #156	@ 0x9c
 80026f0:	1879      	adds	r1, r7, r1
 80026f2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80026f4:	0011      	movs	r1, r2
 80026f6:	18bb      	adds	r3, r7, r2
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a99      	ldr	r2, [pc, #612]	@ (8002960 <HAL_UART_IRQHandler+0x298>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	2298      	movs	r2, #152	@ 0x98
 8002700:	18bc      	adds	r4, r7, r2
 8002702:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002704:	18bb      	adds	r3, r7, r2
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d114      	bne.n	8002736 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800270c:	187b      	adds	r3, r7, r1
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2220      	movs	r2, #32
 8002712:	4013      	ands	r3, r2
 8002714:	d00f      	beq.n	8002736 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002716:	183b      	adds	r3, r7, r0
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2220      	movs	r2, #32
 800271c:	4013      	ands	r3, r2
 800271e:	d00a      	beq.n	8002736 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002724:	2b00      	cmp	r3, #0
 8002726:	d100      	bne.n	800272a <HAL_UART_IRQHandler+0x62>
 8002728:	e29e      	b.n	8002c68 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	0010      	movs	r0, r2
 8002732:	4798      	blx	r3
      }
      return;
 8002734:	e298      	b.n	8002c68 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002736:	2398      	movs	r3, #152	@ 0x98
 8002738:	18fb      	adds	r3, r7, r3
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d100      	bne.n	8002742 <HAL_UART_IRQHandler+0x7a>
 8002740:	e114      	b.n	800296c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002742:	239c      	movs	r3, #156	@ 0x9c
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2201      	movs	r2, #1
 800274a:	4013      	ands	r3, r2
 800274c:	d106      	bne.n	800275c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800274e:	23a0      	movs	r3, #160	@ 0xa0
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a83      	ldr	r2, [pc, #524]	@ (8002964 <HAL_UART_IRQHandler+0x29c>)
 8002756:	4013      	ands	r3, r2
 8002758:	d100      	bne.n	800275c <HAL_UART_IRQHandler+0x94>
 800275a:	e107      	b.n	800296c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800275c:	23a4      	movs	r3, #164	@ 0xa4
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2201      	movs	r2, #1
 8002764:	4013      	ands	r3, r2
 8002766:	d012      	beq.n	800278e <HAL_UART_IRQHandler+0xc6>
 8002768:	23a0      	movs	r3, #160	@ 0xa0
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	2380      	movs	r3, #128	@ 0x80
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4013      	ands	r3, r2
 8002774:	d00b      	beq.n	800278e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2201      	movs	r2, #1
 800277c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2284      	movs	r2, #132	@ 0x84
 8002782:	589b      	ldr	r3, [r3, r2]
 8002784:	2201      	movs	r2, #1
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2184      	movs	r1, #132	@ 0x84
 800278c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800278e:	23a4      	movs	r3, #164	@ 0xa4
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2202      	movs	r2, #2
 8002796:	4013      	ands	r3, r2
 8002798:	d011      	beq.n	80027be <HAL_UART_IRQHandler+0xf6>
 800279a:	239c      	movs	r3, #156	@ 0x9c
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2201      	movs	r2, #1
 80027a2:	4013      	ands	r3, r2
 80027a4:	d00b      	beq.n	80027be <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2202      	movs	r2, #2
 80027ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2284      	movs	r2, #132	@ 0x84
 80027b2:	589b      	ldr	r3, [r3, r2]
 80027b4:	2204      	movs	r2, #4
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2184      	movs	r1, #132	@ 0x84
 80027bc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027be:	23a4      	movs	r3, #164	@ 0xa4
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2204      	movs	r2, #4
 80027c6:	4013      	ands	r3, r2
 80027c8:	d011      	beq.n	80027ee <HAL_UART_IRQHandler+0x126>
 80027ca:	239c      	movs	r3, #156	@ 0x9c
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2201      	movs	r2, #1
 80027d2:	4013      	ands	r3, r2
 80027d4:	d00b      	beq.n	80027ee <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2204      	movs	r2, #4
 80027dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2284      	movs	r2, #132	@ 0x84
 80027e2:	589b      	ldr	r3, [r3, r2]
 80027e4:	2202      	movs	r2, #2
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2184      	movs	r1, #132	@ 0x84
 80027ec:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80027ee:	23a4      	movs	r3, #164	@ 0xa4
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2208      	movs	r2, #8
 80027f6:	4013      	ands	r3, r2
 80027f8:	d017      	beq.n	800282a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80027fa:	23a0      	movs	r3, #160	@ 0xa0
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2220      	movs	r2, #32
 8002802:	4013      	ands	r3, r2
 8002804:	d105      	bne.n	8002812 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002806:	239c      	movs	r3, #156	@ 0x9c
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2201      	movs	r2, #1
 800280e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002810:	d00b      	beq.n	800282a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2208      	movs	r2, #8
 8002818:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2284      	movs	r2, #132	@ 0x84
 800281e:	589b      	ldr	r3, [r3, r2]
 8002820:	2208      	movs	r2, #8
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2184      	movs	r1, #132	@ 0x84
 8002828:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800282a:	23a4      	movs	r3, #164	@ 0xa4
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	2380      	movs	r3, #128	@ 0x80
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	4013      	ands	r3, r2
 8002836:	d013      	beq.n	8002860 <HAL_UART_IRQHandler+0x198>
 8002838:	23a0      	movs	r3, #160	@ 0xa0
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	2380      	movs	r3, #128	@ 0x80
 8002840:	04db      	lsls	r3, r3, #19
 8002842:	4013      	ands	r3, r2
 8002844:	d00c      	beq.n	8002860 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2280      	movs	r2, #128	@ 0x80
 800284c:	0112      	lsls	r2, r2, #4
 800284e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2284      	movs	r2, #132	@ 0x84
 8002854:	589b      	ldr	r3, [r3, r2]
 8002856:	2220      	movs	r2, #32
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2184      	movs	r1, #132	@ 0x84
 800285e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2284      	movs	r2, #132	@ 0x84
 8002864:	589b      	ldr	r3, [r3, r2]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d100      	bne.n	800286c <HAL_UART_IRQHandler+0x1a4>
 800286a:	e1ff      	b.n	8002c6c <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800286c:	23a4      	movs	r3, #164	@ 0xa4
 800286e:	18fb      	adds	r3, r7, r3
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2220      	movs	r2, #32
 8002874:	4013      	ands	r3, r2
 8002876:	d00e      	beq.n	8002896 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002878:	23a0      	movs	r3, #160	@ 0xa0
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2220      	movs	r2, #32
 8002880:	4013      	ands	r3, r2
 8002882:	d008      	beq.n	8002896 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002888:	2b00      	cmp	r3, #0
 800288a:	d004      	beq.n	8002896 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	0010      	movs	r0, r2
 8002894:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2284      	movs	r2, #132	@ 0x84
 800289a:	589b      	ldr	r3, [r3, r2]
 800289c:	2194      	movs	r1, #148	@ 0x94
 800289e:	187a      	adds	r2, r7, r1
 80028a0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2240      	movs	r2, #64	@ 0x40
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b40      	cmp	r3, #64	@ 0x40
 80028ae:	d004      	beq.n	80028ba <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80028b0:	187b      	adds	r3, r7, r1
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2228      	movs	r2, #40	@ 0x28
 80028b6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028b8:	d047      	beq.n	800294a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	0018      	movs	r0, r3
 80028be:	f000 fd53 	bl	8003368 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2240      	movs	r2, #64	@ 0x40
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b40      	cmp	r3, #64	@ 0x40
 80028ce:	d137      	bne.n	8002940 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028d0:	f3ef 8310 	mrs	r3, PRIMASK
 80028d4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80028d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028d8:	2090      	movs	r0, #144	@ 0x90
 80028da:	183a      	adds	r2, r7, r0
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	2301      	movs	r3, #1
 80028e0:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028e4:	f383 8810 	msr	PRIMASK, r3
}
 80028e8:	46c0      	nop			@ (mov r8, r8)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2140      	movs	r1, #64	@ 0x40
 80028f6:	438a      	bics	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]
 80028fa:	183b      	adds	r3, r7, r0
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002900:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002902:	f383 8810 	msr	PRIMASK, r3
}
 8002906:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800290c:	2b00      	cmp	r3, #0
 800290e:	d012      	beq.n	8002936 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002914:	4a14      	ldr	r2, [pc, #80]	@ (8002968 <HAL_UART_IRQHandler+0x2a0>)
 8002916:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800291c:	0018      	movs	r0, r3
 800291e:	f7fe f9d1 	bl	8000cc4 <HAL_DMA_Abort_IT>
 8002922:	1e03      	subs	r3, r0, #0
 8002924:	d01a      	beq.n	800295c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800292a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002930:	0018      	movs	r0, r3
 8002932:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002934:	e012      	b.n	800295c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	0018      	movs	r0, r3
 800293a:	f000 f9ad 	bl	8002c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800293e:	e00d      	b.n	800295c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	0018      	movs	r0, r3
 8002944:	f000 f9a8 	bl	8002c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002948:	e008      	b.n	800295c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	0018      	movs	r0, r3
 800294e:	f000 f9a3 	bl	8002c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2284      	movs	r2, #132	@ 0x84
 8002956:	2100      	movs	r1, #0
 8002958:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800295a:	e187      	b.n	8002c6c <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800295c:	46c0      	nop			@ (mov r8, r8)
    return;
 800295e:	e185      	b.n	8002c6c <HAL_UART_IRQHandler+0x5a4>
 8002960:	0000080f 	.word	0x0000080f
 8002964:	04000120 	.word	0x04000120
 8002968:	08003431 	.word	0x08003431

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002970:	2b01      	cmp	r3, #1
 8002972:	d000      	beq.n	8002976 <HAL_UART_IRQHandler+0x2ae>
 8002974:	e139      	b.n	8002bea <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002976:	23a4      	movs	r3, #164	@ 0xa4
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2210      	movs	r2, #16
 800297e:	4013      	ands	r3, r2
 8002980:	d100      	bne.n	8002984 <HAL_UART_IRQHandler+0x2bc>
 8002982:	e132      	b.n	8002bea <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002984:	23a0      	movs	r3, #160	@ 0xa0
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2210      	movs	r2, #16
 800298c:	4013      	ands	r3, r2
 800298e:	d100      	bne.n	8002992 <HAL_UART_IRQHandler+0x2ca>
 8002990:	e12b      	b.n	8002bea <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2210      	movs	r2, #16
 8002998:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2240      	movs	r2, #64	@ 0x40
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b40      	cmp	r3, #64	@ 0x40
 80029a6:	d000      	beq.n	80029aa <HAL_UART_IRQHandler+0x2e2>
 80029a8:	e09f      	b.n	8002aea <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	217e      	movs	r1, #126	@ 0x7e
 80029b4:	187b      	adds	r3, r7, r1
 80029b6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80029b8:	187b      	adds	r3, r7, r1
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d100      	bne.n	80029c2 <HAL_UART_IRQHandler+0x2fa>
 80029c0:	e156      	b.n	8002c70 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2258      	movs	r2, #88	@ 0x58
 80029c6:	5a9b      	ldrh	r3, [r3, r2]
 80029c8:	187a      	adds	r2, r7, r1
 80029ca:	8812      	ldrh	r2, [r2, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d300      	bcc.n	80029d2 <HAL_UART_IRQHandler+0x30a>
 80029d0:	e14e      	b.n	8002c70 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	187a      	adds	r2, r7, r1
 80029d6:	215a      	movs	r1, #90	@ 0x5a
 80029d8:	8812      	ldrh	r2, [r2, #0]
 80029da:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d06f      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029e6:	f3ef 8310 	mrs	r3, PRIMASK
 80029ea:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80029ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029f0:	2301      	movs	r3, #1
 80029f2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029f6:	f383 8810 	msr	PRIMASK, r3
}
 80029fa:	46c0      	nop			@ (mov r8, r8)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	499e      	ldr	r1, [pc, #632]	@ (8002c80 <HAL_UART_IRQHandler+0x5b8>)
 8002a08:	400a      	ands	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a12:	f383 8810 	msr	PRIMASK, r3
}
 8002a16:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a18:	f3ef 8310 	mrs	r3, PRIMASK
 8002a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a20:	677b      	str	r3, [r7, #116]	@ 0x74
 8002a22:	2301      	movs	r3, #1
 8002a24:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a28:	f383 8810 	msr	PRIMASK, r3
}
 8002a2c:	46c0      	nop			@ (mov r8, r8)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2101      	movs	r1, #1
 8002a3a:	438a      	bics	r2, r1
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a40:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a44:	f383 8810 	msr	PRIMASK, r3
}
 8002a48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002a50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a52:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a54:	2301      	movs	r3, #1
 8002a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a5a:	f383 8810 	msr	PRIMASK, r3
}
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2140      	movs	r1, #64	@ 0x40
 8002a6c:	438a      	bics	r2, r1
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a72:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a76:	f383 8810 	msr	PRIMASK, r3
}
 8002a7a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2280      	movs	r2, #128	@ 0x80
 8002a80:	2120      	movs	r1, #32
 8002a82:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a8e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a94:	2301      	movs	r3, #1
 8002a96:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a9a:	f383 8810 	msr	PRIMASK, r3
}
 8002a9e:	46c0      	nop			@ (mov r8, r8)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2110      	movs	r1, #16
 8002aac:	438a      	bics	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ab2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ab6:	f383 8810 	msr	PRIMASK, r3
}
 8002aba:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f7fe f8c7 	bl	8000c54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2258      	movs	r2, #88	@ 0x58
 8002ad0:	5a9a      	ldrh	r2, [r3, r2]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	215a      	movs	r1, #90	@ 0x5a
 8002ad6:	5a5b      	ldrh	r3, [r3, r1]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	0011      	movs	r1, r2
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f000 f8e0 	bl	8002ca8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ae8:	e0c2      	b.n	8002c70 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2258      	movs	r2, #88	@ 0x58
 8002aee:	5a99      	ldrh	r1, [r3, r2]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	225a      	movs	r2, #90	@ 0x5a
 8002af4:	5a9b      	ldrh	r3, [r3, r2]
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	208e      	movs	r0, #142	@ 0x8e
 8002afa:	183b      	adds	r3, r7, r0
 8002afc:	1a8a      	subs	r2, r1, r2
 8002afe:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	225a      	movs	r2, #90	@ 0x5a
 8002b04:	5a9b      	ldrh	r3, [r3, r2]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d100      	bne.n	8002b0e <HAL_UART_IRQHandler+0x446>
 8002b0c:	e0b2      	b.n	8002c74 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8002b0e:	183b      	adds	r3, r7, r0
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d100      	bne.n	8002b18 <HAL_UART_IRQHandler+0x450>
 8002b16:	e0ad      	b.n	8002c74 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b18:	f3ef 8310 	mrs	r3, PRIMASK
 8002b1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b20:	2488      	movs	r4, #136	@ 0x88
 8002b22:	193a      	adds	r2, r7, r4
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	2301      	movs	r3, #1
 8002b28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f383 8810 	msr	PRIMASK, r3
}
 8002b30:	46c0      	nop			@ (mov r8, r8)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4951      	ldr	r1, [pc, #324]	@ (8002c84 <HAL_UART_IRQHandler+0x5bc>)
 8002b3e:	400a      	ands	r2, r1
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	193b      	adds	r3, r7, r4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f383 8810 	msr	PRIMASK, r3
}
 8002b4e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b50:	f3ef 8310 	mrs	r3, PRIMASK
 8002b54:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b56:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b58:	2484      	movs	r4, #132	@ 0x84
 8002b5a:	193a      	adds	r2, r7, r4
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	2301      	movs	r3, #1
 8002b60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f383 8810 	msr	PRIMASK, r3
}
 8002b68:	46c0      	nop			@ (mov r8, r8)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2101      	movs	r1, #1
 8002b76:	438a      	bics	r2, r1
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	193b      	adds	r3, r7, r4
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	f383 8810 	msr	PRIMASK, r3
}
 8002b86:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2280      	movs	r2, #128	@ 0x80
 8002b8c:	2120      	movs	r1, #32
 8002b8e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba4:	2480      	movs	r4, #128	@ 0x80
 8002ba6:	193a      	adds	r2, r7, r4
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	2301      	movs	r3, #1
 8002bac:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb0:	f383 8810 	msr	PRIMASK, r3
}
 8002bb4:	46c0      	nop			@ (mov r8, r8)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2110      	movs	r1, #16
 8002bc2:	438a      	bics	r2, r1
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	193b      	adds	r3, r7, r4
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bce:	f383 8810 	msr	PRIMASK, r3
}
 8002bd2:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bda:	183b      	adds	r3, r7, r0
 8002bdc:	881a      	ldrh	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	0011      	movs	r1, r2
 8002be2:	0018      	movs	r0, r3
 8002be4:	f000 f860 	bl	8002ca8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002be8:	e044      	b.n	8002c74 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002bea:	23a4      	movs	r3, #164	@ 0xa4
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	2380      	movs	r3, #128	@ 0x80
 8002bf2:	035b      	lsls	r3, r3, #13
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d010      	beq.n	8002c1a <HAL_UART_IRQHandler+0x552>
 8002bf8:	239c      	movs	r3, #156	@ 0x9c
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	2380      	movs	r3, #128	@ 0x80
 8002c00:	03db      	lsls	r3, r3, #15
 8002c02:	4013      	ands	r3, r2
 8002c04:	d009      	beq.n	8002c1a <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2280      	movs	r2, #128	@ 0x80
 8002c0c:	0352      	lsls	r2, r2, #13
 8002c0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	0018      	movs	r0, r3
 8002c14:	f000 fc4e 	bl	80034b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c18:	e02f      	b.n	8002c7a <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002c1a:	23a4      	movs	r3, #164	@ 0xa4
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2280      	movs	r2, #128	@ 0x80
 8002c22:	4013      	ands	r3, r2
 8002c24:	d00f      	beq.n	8002c46 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002c26:	23a0      	movs	r3, #160	@ 0xa0
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2280      	movs	r2, #128	@ 0x80
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d009      	beq.n	8002c46 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d01e      	beq.n	8002c78 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	0010      	movs	r0, r2
 8002c42:	4798      	blx	r3
    }
    return;
 8002c44:	e018      	b.n	8002c78 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c46:	23a4      	movs	r3, #164	@ 0xa4
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2240      	movs	r2, #64	@ 0x40
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d013      	beq.n	8002c7a <HAL_UART_IRQHandler+0x5b2>
 8002c52:	23a0      	movs	r3, #160	@ 0xa0
 8002c54:	18fb      	adds	r3, r7, r3
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2240      	movs	r2, #64	@ 0x40
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d00d      	beq.n	8002c7a <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f000 fbfc 	bl	800345e <UART_EndTransmit_IT>
    return;
 8002c66:	e008      	b.n	8002c7a <HAL_UART_IRQHandler+0x5b2>
      return;
 8002c68:	46c0      	nop			@ (mov r8, r8)
 8002c6a:	e006      	b.n	8002c7a <HAL_UART_IRQHandler+0x5b2>
    return;
 8002c6c:	46c0      	nop			@ (mov r8, r8)
 8002c6e:	e004      	b.n	8002c7a <HAL_UART_IRQHandler+0x5b2>
      return;
 8002c70:	46c0      	nop			@ (mov r8, r8)
 8002c72:	e002      	b.n	8002c7a <HAL_UART_IRQHandler+0x5b2>
      return;
 8002c74:	46c0      	nop			@ (mov r8, r8)
 8002c76:	e000      	b.n	8002c7a <HAL_UART_IRQHandler+0x5b2>
    return;
 8002c78:	46c0      	nop			@ (mov r8, r8)
  }

}
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b02b      	add	sp, #172	@ 0xac
 8002c7e:	bd90      	pop	{r4, r7, pc}
 8002c80:	fffffeff 	.word	0xfffffeff
 8002c84:	fffffedf 	.word	0xfffffedf

08002c88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c90:	46c0      	nop			@ (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b002      	add	sp, #8
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ca0:	46c0      	nop			@ (mov r8, r8)
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b002      	add	sp, #8
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	000a      	movs	r2, r1
 8002cb2:	1cbb      	adds	r3, r7, #2
 8002cb4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cb6:	46c0      	nop			@ (mov r8, r8)
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b002      	add	sp, #8
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cc8:	231e      	movs	r3, #30
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4aaf      	ldr	r2, [pc, #700]	@ (8002fac <UART_SetConfig+0x2ec>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	4aaa      	ldr	r2, [pc, #680]	@ (8002fb0 <UART_SetConfig+0x2f0>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	0019      	movs	r1, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	4aa1      	ldr	r2, [pc, #644]	@ (8002fb4 <UART_SetConfig+0x2f4>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	0019      	movs	r1, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a9d      	ldr	r2, [pc, #628]	@ (8002fb8 <UART_SetConfig+0x2f8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d127      	bne.n	8002d96 <UART_SetConfig+0xd6>
 8002d46:	4b9d      	ldr	r3, [pc, #628]	@ (8002fbc <UART_SetConfig+0x2fc>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	d00d      	beq.n	8002d6e <UART_SetConfig+0xae>
 8002d52:	d81b      	bhi.n	8002d8c <UART_SetConfig+0xcc>
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d014      	beq.n	8002d82 <UART_SetConfig+0xc2>
 8002d58:	d818      	bhi.n	8002d8c <UART_SetConfig+0xcc>
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <UART_SetConfig+0xa4>
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d00a      	beq.n	8002d78 <UART_SetConfig+0xb8>
 8002d62:	e013      	b.n	8002d8c <UART_SetConfig+0xcc>
 8002d64:	231f      	movs	r3, #31
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
 8002d6c:	e065      	b.n	8002e3a <UART_SetConfig+0x17a>
 8002d6e:	231f      	movs	r3, #31
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	2202      	movs	r2, #2
 8002d74:	701a      	strb	r2, [r3, #0]
 8002d76:	e060      	b.n	8002e3a <UART_SetConfig+0x17a>
 8002d78:	231f      	movs	r3, #31
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	701a      	strb	r2, [r3, #0]
 8002d80:	e05b      	b.n	8002e3a <UART_SetConfig+0x17a>
 8002d82:	231f      	movs	r3, #31
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	2208      	movs	r2, #8
 8002d88:	701a      	strb	r2, [r3, #0]
 8002d8a:	e056      	b.n	8002e3a <UART_SetConfig+0x17a>
 8002d8c:	231f      	movs	r3, #31
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	2210      	movs	r2, #16
 8002d92:	701a      	strb	r2, [r3, #0]
 8002d94:	e051      	b.n	8002e3a <UART_SetConfig+0x17a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a89      	ldr	r2, [pc, #548]	@ (8002fc0 <UART_SetConfig+0x300>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d134      	bne.n	8002e0a <UART_SetConfig+0x14a>
 8002da0:	4b86      	ldr	r3, [pc, #536]	@ (8002fbc <UART_SetConfig+0x2fc>)
 8002da2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002da4:	23c0      	movs	r3, #192	@ 0xc0
 8002da6:	029b      	lsls	r3, r3, #10
 8002da8:	4013      	ands	r3, r2
 8002daa:	22c0      	movs	r2, #192	@ 0xc0
 8002dac:	0292      	lsls	r2, r2, #10
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d017      	beq.n	8002de2 <UART_SetConfig+0x122>
 8002db2:	22c0      	movs	r2, #192	@ 0xc0
 8002db4:	0292      	lsls	r2, r2, #10
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d822      	bhi.n	8002e00 <UART_SetConfig+0x140>
 8002dba:	2280      	movs	r2, #128	@ 0x80
 8002dbc:	0292      	lsls	r2, r2, #10
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d019      	beq.n	8002df6 <UART_SetConfig+0x136>
 8002dc2:	2280      	movs	r2, #128	@ 0x80
 8002dc4:	0292      	lsls	r2, r2, #10
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d81a      	bhi.n	8002e00 <UART_SetConfig+0x140>
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d004      	beq.n	8002dd8 <UART_SetConfig+0x118>
 8002dce:	2280      	movs	r2, #128	@ 0x80
 8002dd0:	0252      	lsls	r2, r2, #9
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00a      	beq.n	8002dec <UART_SetConfig+0x12c>
 8002dd6:	e013      	b.n	8002e00 <UART_SetConfig+0x140>
 8002dd8:	231f      	movs	r3, #31
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	e02b      	b.n	8002e3a <UART_SetConfig+0x17a>
 8002de2:	231f      	movs	r3, #31
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	2202      	movs	r2, #2
 8002de8:	701a      	strb	r2, [r3, #0]
 8002dea:	e026      	b.n	8002e3a <UART_SetConfig+0x17a>
 8002dec:	231f      	movs	r3, #31
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	2204      	movs	r2, #4
 8002df2:	701a      	strb	r2, [r3, #0]
 8002df4:	e021      	b.n	8002e3a <UART_SetConfig+0x17a>
 8002df6:	231f      	movs	r3, #31
 8002df8:	18fb      	adds	r3, r7, r3
 8002dfa:	2208      	movs	r2, #8
 8002dfc:	701a      	strb	r2, [r3, #0]
 8002dfe:	e01c      	b.n	8002e3a <UART_SetConfig+0x17a>
 8002e00:	231f      	movs	r3, #31
 8002e02:	18fb      	adds	r3, r7, r3
 8002e04:	2210      	movs	r2, #16
 8002e06:	701a      	strb	r2, [r3, #0]
 8002e08:	e017      	b.n	8002e3a <UART_SetConfig+0x17a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a6d      	ldr	r2, [pc, #436]	@ (8002fc4 <UART_SetConfig+0x304>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d104      	bne.n	8002e1e <UART_SetConfig+0x15e>
 8002e14:	231f      	movs	r3, #31
 8002e16:	18fb      	adds	r3, r7, r3
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
 8002e1c:	e00d      	b.n	8002e3a <UART_SetConfig+0x17a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a69      	ldr	r2, [pc, #420]	@ (8002fc8 <UART_SetConfig+0x308>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d104      	bne.n	8002e32 <UART_SetConfig+0x172>
 8002e28:	231f      	movs	r3, #31
 8002e2a:	18fb      	adds	r3, r7, r3
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
 8002e30:	e003      	b.n	8002e3a <UART_SetConfig+0x17a>
 8002e32:	231f      	movs	r3, #31
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	2210      	movs	r2, #16
 8002e38:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69da      	ldr	r2, [r3, #28]
 8002e3e:	2380      	movs	r3, #128	@ 0x80
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d15c      	bne.n	8002f00 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8002e46:	231f      	movs	r3, #31
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d015      	beq.n	8002e7c <UART_SetConfig+0x1bc>
 8002e50:	dc18      	bgt.n	8002e84 <UART_SetConfig+0x1c4>
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d00d      	beq.n	8002e72 <UART_SetConfig+0x1b2>
 8002e56:	dc15      	bgt.n	8002e84 <UART_SetConfig+0x1c4>
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <UART_SetConfig+0x1a2>
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d005      	beq.n	8002e6c <UART_SetConfig+0x1ac>
 8002e60:	e010      	b.n	8002e84 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e62:	f7fe febf 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 8002e66:	0003      	movs	r3, r0
 8002e68:	61bb      	str	r3, [r7, #24]
        break;
 8002e6a:	e012      	b.n	8002e92 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e6c:	4b57      	ldr	r3, [pc, #348]	@ (8002fcc <UART_SetConfig+0x30c>)
 8002e6e:	61bb      	str	r3, [r7, #24]
        break;
 8002e70:	e00f      	b.n	8002e92 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e72:	f7fe fe3b 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8002e76:	0003      	movs	r3, r0
 8002e78:	61bb      	str	r3, [r7, #24]
        break;
 8002e7a:	e00a      	b.n	8002e92 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e7c:	2380      	movs	r3, #128	@ 0x80
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	61bb      	str	r3, [r7, #24]
        break;
 8002e82:	e006      	b.n	8002e92 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e88:	231e      	movs	r3, #30
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	701a      	strb	r2, [r3, #0]
        break;
 8002e90:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d100      	bne.n	8002e9a <UART_SetConfig+0x1da>
 8002e98:	e07a      	b.n	8002f90 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	005a      	lsls	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	085b      	lsrs	r3, r3, #1
 8002ea4:	18d2      	adds	r2, r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	0019      	movs	r1, r3
 8002eac:	0010      	movs	r0, r2
 8002eae:	f7fd f92b 	bl	8000108 <__udivsi3>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	2b0f      	cmp	r3, #15
 8002eba:	d91c      	bls.n	8002ef6 <UART_SetConfig+0x236>
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	2380      	movs	r3, #128	@ 0x80
 8002ec0:	025b      	lsls	r3, r3, #9
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d217      	bcs.n	8002ef6 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	200e      	movs	r0, #14
 8002ecc:	183b      	adds	r3, r7, r0
 8002ece:	210f      	movs	r1, #15
 8002ed0:	438a      	bics	r2, r1
 8002ed2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	085b      	lsrs	r3, r3, #1
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2207      	movs	r2, #7
 8002edc:	4013      	ands	r3, r2
 8002ede:	b299      	uxth	r1, r3
 8002ee0:	183b      	adds	r3, r7, r0
 8002ee2:	183a      	adds	r2, r7, r0
 8002ee4:	8812      	ldrh	r2, [r2, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	183a      	adds	r2, r7, r0
 8002ef0:	8812      	ldrh	r2, [r2, #0]
 8002ef2:	60da      	str	r2, [r3, #12]
 8002ef4:	e04c      	b.n	8002f90 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8002ef6:	231e      	movs	r3, #30
 8002ef8:	18fb      	adds	r3, r7, r3
 8002efa:	2201      	movs	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	e047      	b.n	8002f90 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f00:	231f      	movs	r3, #31
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d015      	beq.n	8002f36 <UART_SetConfig+0x276>
 8002f0a:	dc18      	bgt.n	8002f3e <UART_SetConfig+0x27e>
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d00d      	beq.n	8002f2c <UART_SetConfig+0x26c>
 8002f10:	dc15      	bgt.n	8002f3e <UART_SetConfig+0x27e>
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <UART_SetConfig+0x25c>
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d005      	beq.n	8002f26 <UART_SetConfig+0x266>
 8002f1a:	e010      	b.n	8002f3e <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f1c:	f7fe fe62 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 8002f20:	0003      	movs	r3, r0
 8002f22:	61bb      	str	r3, [r7, #24]
        break;
 8002f24:	e012      	b.n	8002f4c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f26:	4b29      	ldr	r3, [pc, #164]	@ (8002fcc <UART_SetConfig+0x30c>)
 8002f28:	61bb      	str	r3, [r7, #24]
        break;
 8002f2a:	e00f      	b.n	8002f4c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f2c:	f7fe fdde 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8002f30:	0003      	movs	r3, r0
 8002f32:	61bb      	str	r3, [r7, #24]
        break;
 8002f34:	e00a      	b.n	8002f4c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f36:	2380      	movs	r3, #128	@ 0x80
 8002f38:	021b      	lsls	r3, r3, #8
 8002f3a:	61bb      	str	r3, [r7, #24]
        break;
 8002f3c:	e006      	b.n	8002f4c <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f42:	231e      	movs	r3, #30
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]
        break;
 8002f4a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d01e      	beq.n	8002f90 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	085a      	lsrs	r2, r3, #1
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	18d2      	adds	r2, r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	0019      	movs	r1, r3
 8002f62:	0010      	movs	r0, r2
 8002f64:	f7fd f8d0 	bl	8000108 <__udivsi3>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	2b0f      	cmp	r3, #15
 8002f70:	d90a      	bls.n	8002f88 <UART_SetConfig+0x2c8>
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	2380      	movs	r3, #128	@ 0x80
 8002f76:	025b      	lsls	r3, r3, #9
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d205      	bcs.n	8002f88 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	e003      	b.n	8002f90 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8002f88:	231e      	movs	r3, #30
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002f9c:	231e      	movs	r3, #30
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	781b      	ldrb	r3, [r3, #0]
}
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	b008      	add	sp, #32
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	46c0      	nop			@ (mov r8, r8)
 8002fac:	efff69f3 	.word	0xefff69f3
 8002fb0:	ffffcfff 	.word	0xffffcfff
 8002fb4:	fffff4ff 	.word	0xfffff4ff
 8002fb8:	40013800 	.word	0x40013800
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40004400 	.word	0x40004400
 8002fc4:	40004800 	.word	0x40004800
 8002fc8:	40004c00 	.word	0x40004c00
 8002fcc:	007a1200 	.word	0x007a1200

08002fd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fdc:	2208      	movs	r2, #8
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d00b      	beq.n	8002ffa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4a4a      	ldr	r2, [pc, #296]	@ (8003114 <UART_AdvFeatureConfig+0x144>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	0019      	movs	r1, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffe:	2201      	movs	r2, #1
 8003000:	4013      	ands	r3, r2
 8003002:	d00b      	beq.n	800301c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	4a43      	ldr	r2, [pc, #268]	@ (8003118 <UART_AdvFeatureConfig+0x148>)
 800300c:	4013      	ands	r3, r2
 800300e:	0019      	movs	r1, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	2202      	movs	r2, #2
 8003022:	4013      	ands	r3, r2
 8003024:	d00b      	beq.n	800303e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	4a3b      	ldr	r2, [pc, #236]	@ (800311c <UART_AdvFeatureConfig+0x14c>)
 800302e:	4013      	ands	r3, r2
 8003030:	0019      	movs	r1, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003042:	2204      	movs	r2, #4
 8003044:	4013      	ands	r3, r2
 8003046:	d00b      	beq.n	8003060 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4a34      	ldr	r2, [pc, #208]	@ (8003120 <UART_AdvFeatureConfig+0x150>)
 8003050:	4013      	ands	r3, r2
 8003052:	0019      	movs	r1, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003064:	2210      	movs	r2, #16
 8003066:	4013      	ands	r3, r2
 8003068:	d00b      	beq.n	8003082 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4a2c      	ldr	r2, [pc, #176]	@ (8003124 <UART_AdvFeatureConfig+0x154>)
 8003072:	4013      	ands	r3, r2
 8003074:	0019      	movs	r1, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003086:	2220      	movs	r2, #32
 8003088:	4013      	ands	r3, r2
 800308a:	d00b      	beq.n	80030a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	4a25      	ldr	r2, [pc, #148]	@ (8003128 <UART_AdvFeatureConfig+0x158>)
 8003094:	4013      	ands	r3, r2
 8003096:	0019      	movs	r1, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a8:	2240      	movs	r2, #64	@ 0x40
 80030aa:	4013      	ands	r3, r2
 80030ac:	d01d      	beq.n	80030ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4a1d      	ldr	r2, [pc, #116]	@ (800312c <UART_AdvFeatureConfig+0x15c>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	0019      	movs	r1, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030ca:	2380      	movs	r3, #128	@ 0x80
 80030cc:	035b      	lsls	r3, r3, #13
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d10b      	bne.n	80030ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	4a15      	ldr	r2, [pc, #84]	@ (8003130 <UART_AdvFeatureConfig+0x160>)
 80030da:	4013      	ands	r3, r2
 80030dc:	0019      	movs	r1, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ee:	2280      	movs	r2, #128	@ 0x80
 80030f0:	4013      	ands	r3, r2
 80030f2:	d00b      	beq.n	800310c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003134 <UART_AdvFeatureConfig+0x164>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	0019      	movs	r1, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	605a      	str	r2, [r3, #4]
  }
}
 800310c:	46c0      	nop			@ (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b002      	add	sp, #8
 8003112:	bd80      	pop	{r7, pc}
 8003114:	ffff7fff 	.word	0xffff7fff
 8003118:	fffdffff 	.word	0xfffdffff
 800311c:	fffeffff 	.word	0xfffeffff
 8003120:	fffbffff 	.word	0xfffbffff
 8003124:	ffffefff 	.word	0xffffefff
 8003128:	ffffdfff 	.word	0xffffdfff
 800312c:	ffefffff 	.word	0xffefffff
 8003130:	ff9fffff 	.word	0xff9fffff
 8003134:	fff7ffff 	.word	0xfff7ffff

08003138 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b092      	sub	sp, #72	@ 0x48
 800313c:	af02      	add	r7, sp, #8
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2284      	movs	r2, #132	@ 0x84
 8003144:	2100      	movs	r1, #0
 8003146:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003148:	f7fd fc54 	bl	80009f4 <HAL_GetTick>
 800314c:	0003      	movs	r3, r0
 800314e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2208      	movs	r2, #8
 8003158:	4013      	ands	r3, r2
 800315a:	2b08      	cmp	r3, #8
 800315c:	d12c      	bne.n	80031b8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800315e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003160:	2280      	movs	r2, #128	@ 0x80
 8003162:	0391      	lsls	r1, r2, #14
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4a46      	ldr	r2, [pc, #280]	@ (8003280 <UART_CheckIdleState+0x148>)
 8003168:	9200      	str	r2, [sp, #0]
 800316a:	2200      	movs	r2, #0
 800316c:	f000 f88c 	bl	8003288 <UART_WaitOnFlagUntilTimeout>
 8003170:	1e03      	subs	r3, r0, #0
 8003172:	d021      	beq.n	80031b8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003174:	f3ef 8310 	mrs	r3, PRIMASK
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800317c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800317e:	2301      	movs	r3, #1
 8003180:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003184:	f383 8810 	msr	PRIMASK, r3
}
 8003188:	46c0      	nop			@ (mov r8, r8)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2180      	movs	r1, #128	@ 0x80
 8003196:	438a      	bics	r2, r1
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800319c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800319e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a0:	f383 8810 	msr	PRIMASK, r3
}
 80031a4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2220      	movs	r2, #32
 80031aa:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2278      	movs	r2, #120	@ 0x78
 80031b0:	2100      	movs	r1, #0
 80031b2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e05f      	b.n	8003278 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2204      	movs	r2, #4
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d146      	bne.n	8003254 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031c8:	2280      	movs	r2, #128	@ 0x80
 80031ca:	03d1      	lsls	r1, r2, #15
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003280 <UART_CheckIdleState+0x148>)
 80031d0:	9200      	str	r2, [sp, #0]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f000 f858 	bl	8003288 <UART_WaitOnFlagUntilTimeout>
 80031d8:	1e03      	subs	r3, r0, #0
 80031da:	d03b      	beq.n	8003254 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031dc:	f3ef 8310 	mrs	r3, PRIMASK
 80031e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80031e2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80031e6:	2301      	movs	r3, #1
 80031e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	f383 8810 	msr	PRIMASK, r3
}
 80031f0:	46c0      	nop			@ (mov r8, r8)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4921      	ldr	r1, [pc, #132]	@ (8003284 <UART_CheckIdleState+0x14c>)
 80031fe:	400a      	ands	r2, r1
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003204:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f383 8810 	msr	PRIMASK, r3
}
 800320c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800320e:	f3ef 8310 	mrs	r3, PRIMASK
 8003212:	61bb      	str	r3, [r7, #24]
  return(result);
 8003214:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003216:	633b      	str	r3, [r7, #48]	@ 0x30
 8003218:	2301      	movs	r3, #1
 800321a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f383 8810 	msr	PRIMASK, r3
}
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2101      	movs	r1, #1
 8003230:	438a      	bics	r2, r1
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003236:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	f383 8810 	msr	PRIMASK, r3
}
 800323e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2280      	movs	r2, #128	@ 0x80
 8003244:	2120      	movs	r1, #32
 8003246:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2278      	movs	r2, #120	@ 0x78
 800324c:	2100      	movs	r1, #0
 800324e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e011      	b.n	8003278 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2220      	movs	r2, #32
 8003258:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2280      	movs	r2, #128	@ 0x80
 800325e:	2120      	movs	r1, #32
 8003260:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2278      	movs	r2, #120	@ 0x78
 8003272:	2100      	movs	r1, #0
 8003274:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	0018      	movs	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	b010      	add	sp, #64	@ 0x40
 800327e:	bd80      	pop	{r7, pc}
 8003280:	01ffffff 	.word	0x01ffffff
 8003284:	fffffedf 	.word	0xfffffedf

08003288 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	1dfb      	adds	r3, r7, #7
 8003296:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003298:	e051      	b.n	800333e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	3301      	adds	r3, #1
 800329e:	d04e      	beq.n	800333e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a0:	f7fd fba8 	bl	80009f4 <HAL_GetTick>
 80032a4:	0002      	movs	r2, r0
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d302      	bcc.n	80032b6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e051      	b.n	800335e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2204      	movs	r2, #4
 80032c2:	4013      	ands	r3, r2
 80032c4:	d03b      	beq.n	800333e <UART_WaitOnFlagUntilTimeout+0xb6>
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b80      	cmp	r3, #128	@ 0x80
 80032ca:	d038      	beq.n	800333e <UART_WaitOnFlagUntilTimeout+0xb6>
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b40      	cmp	r3, #64	@ 0x40
 80032d0:	d035      	beq.n	800333e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	2208      	movs	r2, #8
 80032da:	4013      	ands	r3, r2
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d111      	bne.n	8003304 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2208      	movs	r2, #8
 80032e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	0018      	movs	r0, r3
 80032ec:	f000 f83c 	bl	8003368 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2284      	movs	r2, #132	@ 0x84
 80032f4:	2108      	movs	r1, #8
 80032f6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2278      	movs	r2, #120	@ 0x78
 80032fc:	2100      	movs	r1, #0
 80032fe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e02c      	b.n	800335e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	69da      	ldr	r2, [r3, #28]
 800330a:	2380      	movs	r3, #128	@ 0x80
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	401a      	ands	r2, r3
 8003310:	2380      	movs	r3, #128	@ 0x80
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	429a      	cmp	r2, r3
 8003316:	d112      	bne.n	800333e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2280      	movs	r2, #128	@ 0x80
 800331e:	0112      	lsls	r2, r2, #4
 8003320:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	0018      	movs	r0, r3
 8003326:	f000 f81f 	bl	8003368 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2284      	movs	r2, #132	@ 0x84
 800332e:	2120      	movs	r1, #32
 8003330:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2278      	movs	r2, #120	@ 0x78
 8003336:	2100      	movs	r1, #0
 8003338:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e00f      	b.n	800335e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	4013      	ands	r3, r2
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	425a      	negs	r2, r3
 800334e:	4153      	adcs	r3, r2
 8003350:	b2db      	uxtb	r3, r3
 8003352:	001a      	movs	r2, r3
 8003354:	1dfb      	adds	r3, r7, #7
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d09e      	beq.n	800329a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	0018      	movs	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	b004      	add	sp, #16
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08e      	sub	sp, #56	@ 0x38
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003370:	f3ef 8310 	mrs	r3, PRIMASK
 8003374:	617b      	str	r3, [r7, #20]
  return(result);
 8003376:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003378:	637b      	str	r3, [r7, #52]	@ 0x34
 800337a:	2301      	movs	r3, #1
 800337c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	f383 8810 	msr	PRIMASK, r3
}
 8003384:	46c0      	nop			@ (mov r8, r8)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4926      	ldr	r1, [pc, #152]	@ (800342c <UART_EndRxTransfer+0xc4>)
 8003392:	400a      	ands	r2, r1
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003398:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	f383 8810 	msr	PRIMASK, r3
}
 80033a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a2:	f3ef 8310 	mrs	r3, PRIMASK
 80033a6:	623b      	str	r3, [r7, #32]
  return(result);
 80033a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80033ac:	2301      	movs	r3, #1
 80033ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b2:	f383 8810 	msr	PRIMASK, r3
}
 80033b6:	46c0      	nop			@ (mov r8, r8)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2101      	movs	r1, #1
 80033c4:	438a      	bics	r2, r1
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ce:	f383 8810 	msr	PRIMASK, r3
}
 80033d2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d118      	bne.n	800340e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033dc:	f3ef 8310 	mrs	r3, PRIMASK
 80033e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80033e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033e6:	2301      	movs	r3, #1
 80033e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f383 8810 	msr	PRIMASK, r3
}
 80033f0:	46c0      	nop			@ (mov r8, r8)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2110      	movs	r1, #16
 80033fe:	438a      	bics	r2, r1
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003404:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f383 8810 	msr	PRIMASK, r3
}
 800340c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2280      	movs	r2, #128	@ 0x80
 8003412:	2120      	movs	r1, #32
 8003414:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003422:	46c0      	nop			@ (mov r8, r8)
 8003424:	46bd      	mov	sp, r7
 8003426:	b00e      	add	sp, #56	@ 0x38
 8003428:	bd80      	pop	{r7, pc}
 800342a:	46c0      	nop			@ (mov r8, r8)
 800342c:	fffffedf 	.word	0xfffffedf

08003430 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	225a      	movs	r2, #90	@ 0x5a
 8003442:	2100      	movs	r1, #0
 8003444:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2252      	movs	r2, #82	@ 0x52
 800344a:	2100      	movs	r1, #0
 800344c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	0018      	movs	r0, r3
 8003452:	f7ff fc21 	bl	8002c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003456:	46c0      	nop			@ (mov r8, r8)
 8003458:	46bd      	mov	sp, r7
 800345a:	b004      	add	sp, #16
 800345c:	bd80      	pop	{r7, pc}

0800345e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003466:	f3ef 8310 	mrs	r3, PRIMASK
 800346a:	60bb      	str	r3, [r7, #8]
  return(result);
 800346c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	2301      	movs	r3, #1
 8003472:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f383 8810 	msr	PRIMASK, r3
}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2140      	movs	r1, #64	@ 0x40
 8003488:	438a      	bics	r2, r1
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f383 8810 	msr	PRIMASK, r3
}
 8003496:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	0018      	movs	r0, r3
 80034a8:	f7ff fbee 	bl	8002c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034ac:	46c0      	nop			@ (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b006      	add	sp, #24
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80034bc:	46c0      	nop			@ (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b002      	add	sp, #8
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <memset>:
 80034c4:	0003      	movs	r3, r0
 80034c6:	1882      	adds	r2, r0, r2
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d100      	bne.n	80034ce <memset+0xa>
 80034cc:	4770      	bx	lr
 80034ce:	7019      	strb	r1, [r3, #0]
 80034d0:	3301      	adds	r3, #1
 80034d2:	e7f9      	b.n	80034c8 <memset+0x4>

080034d4 <__libc_init_array>:
 80034d4:	b570      	push	{r4, r5, r6, lr}
 80034d6:	2600      	movs	r6, #0
 80034d8:	4c0c      	ldr	r4, [pc, #48]	@ (800350c <__libc_init_array+0x38>)
 80034da:	4d0d      	ldr	r5, [pc, #52]	@ (8003510 <__libc_init_array+0x3c>)
 80034dc:	1b64      	subs	r4, r4, r5
 80034de:	10a4      	asrs	r4, r4, #2
 80034e0:	42a6      	cmp	r6, r4
 80034e2:	d109      	bne.n	80034f8 <__libc_init_array+0x24>
 80034e4:	2600      	movs	r6, #0
 80034e6:	f000 f819 	bl	800351c <_init>
 80034ea:	4c0a      	ldr	r4, [pc, #40]	@ (8003514 <__libc_init_array+0x40>)
 80034ec:	4d0a      	ldr	r5, [pc, #40]	@ (8003518 <__libc_init_array+0x44>)
 80034ee:	1b64      	subs	r4, r4, r5
 80034f0:	10a4      	asrs	r4, r4, #2
 80034f2:	42a6      	cmp	r6, r4
 80034f4:	d105      	bne.n	8003502 <__libc_init_array+0x2e>
 80034f6:	bd70      	pop	{r4, r5, r6, pc}
 80034f8:	00b3      	lsls	r3, r6, #2
 80034fa:	58eb      	ldr	r3, [r5, r3]
 80034fc:	4798      	blx	r3
 80034fe:	3601      	adds	r6, #1
 8003500:	e7ee      	b.n	80034e0 <__libc_init_array+0xc>
 8003502:	00b3      	lsls	r3, r6, #2
 8003504:	58eb      	ldr	r3, [r5, r3]
 8003506:	4798      	blx	r3
 8003508:	3601      	adds	r6, #1
 800350a:	e7f2      	b.n	80034f2 <__libc_init_array+0x1e>
 800350c:	0800356c 	.word	0x0800356c
 8003510:	0800356c 	.word	0x0800356c
 8003514:	08003570 	.word	0x08003570
 8003518:	0800356c 	.word	0x0800356c

0800351c <_init>:
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	46c0      	nop			@ (mov r8, r8)
 8003520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003522:	bc08      	pop	{r3}
 8003524:	469e      	mov	lr, r3
 8003526:	4770      	bx	lr

08003528 <_fini>:
 8003528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352a:	46c0      	nop			@ (mov r8, r8)
 800352c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352e:	bc08      	pop	{r3}
 8003530:	469e      	mov	lr, r3
 8003532:	4770      	bx	lr
