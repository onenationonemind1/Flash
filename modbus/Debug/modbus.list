
modbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003318  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080033d8  080033d8  000043d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800345c  0800345c  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  0800345c  0800345c  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800345c  0800345c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800345c  0800345c  0000445c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003460  08003460  00004460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003464  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000005c  080034c0  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  080034c0  00005250  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b1c  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018c7  00000000  00000000  0000dba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  0000f468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000528  00000000  00000000  0000fb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012c59  00000000  00000000  00010048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a01  00000000  00000000  00022ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00070f98  00000000  00000000  0002c6a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009d63a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b4c  00000000  00000000  0009d680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0009f1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080033c0 	.word	0x080033c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080033c0 	.word	0x080033c0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <ModBus_CRC16>:
/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */

uint16_t ModBus_CRC16(uint8_t *data, uint16_t length) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	000a      	movs	r2, r1
 800024e:	1cbb      	adds	r3, r7, #2
 8000250:	801a      	strh	r2, [r3, #0]
  uint16_t crc = 0xFFFF;    // Initial value
 8000252:	230e      	movs	r3, #14
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	2201      	movs	r2, #1
 8000258:	4252      	negs	r2, r2
 800025a:	801a      	strh	r2, [r3, #0]
  uint16_t i, j;
  
  for(i = 0; i < length; i++) {
 800025c:	230c      	movs	r3, #12
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	2200      	movs	r2, #0
 8000262:	801a      	strh	r2, [r3, #0]
 8000264:	e037      	b.n	80002d6 <ModBus_CRC16+0x92>
      crc ^= data[i];       // XOR byte with CRC
 8000266:	230c      	movs	r3, #12
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	881b      	ldrh	r3, [r3, #0]
 800026c:	687a      	ldr	r2, [r7, #4]
 800026e:	18d3      	adds	r3, r2, r3
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	0019      	movs	r1, r3
 8000274:	220e      	movs	r2, #14
 8000276:	18bb      	adds	r3, r7, r2
 8000278:	18ba      	adds	r2, r7, r2
 800027a:	8812      	ldrh	r2, [r2, #0]
 800027c:	404a      	eors	r2, r1
 800027e:	801a      	strh	r2, [r3, #0]
      for(j = 0; j < 8; j++) {   // Process each bit
 8000280:	230a      	movs	r3, #10
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	2200      	movs	r2, #0
 8000286:	801a      	strh	r2, [r3, #0]
 8000288:	e01a      	b.n	80002c0 <ModBus_CRC16+0x7c>
          if(crc & 0x0001) {     // If LSB is 1
 800028a:	210e      	movs	r1, #14
 800028c:	187b      	adds	r3, r7, r1
 800028e:	881b      	ldrh	r3, [r3, #0]
 8000290:	2201      	movs	r2, #1
 8000292:	4013      	ands	r3, r2
 8000294:	d008      	beq.n	80002a8 <ModBus_CRC16+0x64>
              crc = (crc >> 1) ^ 0xA001;  // Shift right and XOR with polynomial
 8000296:	187b      	adds	r3, r7, r1
 8000298:	881b      	ldrh	r3, [r3, #0]
 800029a:	085b      	lsrs	r3, r3, #1
 800029c:	b29a      	uxth	r2, r3
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	4914      	ldr	r1, [pc, #80]	@ (80002f4 <ModBus_CRC16+0xb0>)
 80002a2:	404a      	eors	r2, r1
 80002a4:	801a      	strh	r2, [r3, #0]
 80002a6:	e005      	b.n	80002b4 <ModBus_CRC16+0x70>
          } else {
              crc = crc >> 1;    // Just shift right
 80002a8:	220e      	movs	r2, #14
 80002aa:	18bb      	adds	r3, r7, r2
 80002ac:	18ba      	adds	r2, r7, r2
 80002ae:	8812      	ldrh	r2, [r2, #0]
 80002b0:	0852      	lsrs	r2, r2, #1
 80002b2:	801a      	strh	r2, [r3, #0]
      for(j = 0; j < 8; j++) {   // Process each bit
 80002b4:	210a      	movs	r1, #10
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	881a      	ldrh	r2, [r3, #0]
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	3201      	adds	r2, #1
 80002be:	801a      	strh	r2, [r3, #0]
 80002c0:	230a      	movs	r3, #10
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	881b      	ldrh	r3, [r3, #0]
 80002c6:	2b07      	cmp	r3, #7
 80002c8:	d9df      	bls.n	800028a <ModBus_CRC16+0x46>
  for(i = 0; i < length; i++) {
 80002ca:	210c      	movs	r1, #12
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	881a      	ldrh	r2, [r3, #0]
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	3201      	adds	r2, #1
 80002d4:	801a      	strh	r2, [r3, #0]
 80002d6:	230c      	movs	r3, #12
 80002d8:	18fa      	adds	r2, r7, r3
 80002da:	1cbb      	adds	r3, r7, #2
 80002dc:	8812      	ldrh	r2, [r2, #0]
 80002de:	881b      	ldrh	r3, [r3, #0]
 80002e0:	429a      	cmp	r2, r3
 80002e2:	d3c0      	bcc.n	8000266 <ModBus_CRC16+0x22>
          }
      }
  }
  
  return crc;
 80002e4:	230e      	movs	r3, #14
 80002e6:	18fb      	adds	r3, r7, r3
 80002e8:	881b      	ldrh	r3, [r3, #0]
}
 80002ea:	0018      	movs	r0, r3
 80002ec:	46bd      	mov	sp, r7
 80002ee:	b004      	add	sp, #16
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	46c0      	nop			@ (mov r8, r8)
 80002f4:	ffffa001 	.word	0xffffa001

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fa:	b0c7      	sub	sp, #284	@ 0x11c
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fe:	f000 fa7b 	bl	80007f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000302:	f000 f8b3 	bl	800046c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000306:	f000 f921 	bl	800054c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800030a:	f000 f8ef 	bl	80004ec <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t buffer[256];

  sprintf((char *)buffer, "Hello, World!\n");
 800030e:	4a52      	ldr	r2, [pc, #328]	@ (8000458 <main+0x160>)
 8000310:	240c      	movs	r4, #12
 8000312:	193b      	adds	r3, r7, r4
 8000314:	0011      	movs	r1, r2
 8000316:	0018      	movs	r0, r3
 8000318:	f002 fbb4 	bl	8002a84 <siprintf>
  HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), 100);
 800031c:	193b      	adds	r3, r7, r4
 800031e:	0018      	movs	r0, r3
 8000320:	f7ff fef2 	bl	8000108 <strlen>
 8000324:	0003      	movs	r3, r0
 8000326:	b29a      	uxth	r2, r3
 8000328:	1939      	adds	r1, r7, r4
 800032a:	484c      	ldr	r0, [pc, #304]	@ (800045c <main+0x164>)
 800032c:	2364      	movs	r3, #100	@ 0x64
 800032e:	f001 fb23 	bl	8001978 <HAL_UART_Transmit>
  int count = 0;
 8000332:	2300      	movs	r3, #0
 8000334:	228a      	movs	r2, #138	@ 0x8a
 8000336:	0052      	lsls	r2, r2, #1
 8000338:	18ba      	adds	r2, r7, r2
 800033a:	6013      	str	r3, [r2, #0]
  uint8_t test = 0x00;
 800033c:	4b48      	ldr	r3, [pc, #288]	@ (8000460 <main+0x168>)
 800033e:	228c      	movs	r2, #140	@ 0x8c
 8000340:	0052      	lsls	r2, r2, #1
 8000342:	189b      	adds	r3, r3, r2
 8000344:	19db      	adds	r3, r3, r7
 8000346:	2200      	movs	r2, #0
 8000348:	701a      	strb	r2, [r3, #0]
  uint8_t* arr_test = &test;
 800034a:	230b      	movs	r3, #11
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	2288      	movs	r2, #136	@ 0x88
 8000350:	0052      	lsls	r2, r2, #1
 8000352:	18ba      	adds	r2, r7, r2
 8000354:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    HAL_UART_Receive(&huart3, &data, sizeof(data),10);
 8000356:	230a      	movs	r3, #10
 8000358:	18f9      	adds	r1, r7, r3
 800035a:	4840      	ldr	r0, [pc, #256]	@ (800045c <main+0x164>)
 800035c:	230a      	movs	r3, #10
 800035e:	2201      	movs	r2, #1
 8000360:	f001 fbaa 	bl	8001ab8 <HAL_UART_Receive>
    // if(data == 'a')
    {
      HAL_UART_Transmit(&huart3, "hi\r\n", 4, 100);
 8000364:	493f      	ldr	r1, [pc, #252]	@ (8000464 <main+0x16c>)
 8000366:	483d      	ldr	r0, [pc, #244]	@ (800045c <main+0x164>)
 8000368:	2364      	movs	r3, #100	@ 0x64
 800036a:	2204      	movs	r2, #4
 800036c:	f001 fb04 	bl	8001978 <HAL_UART_Transmit>

      HAL_Delay(1000);
 8000370:	23fa      	movs	r3, #250	@ 0xfa
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	0018      	movs	r0, r3
 8000376:	f000 faa3 	bl	80008c0 <HAL_Delay>


      uint8_t response[] = {0x01, 0x03, 0x02, 0x11, *arr_test, 0xB4, 0x27};
 800037a:	4b3b      	ldr	r3, [pc, #236]	@ (8000468 <main+0x170>)
 800037c:	258c      	movs	r5, #140	@ 0x8c
 800037e:	006d      	lsls	r5, r5, #1
 8000380:	195b      	adds	r3, r3, r5
 8000382:	19db      	adds	r3, r3, r7
 8000384:	2201      	movs	r2, #1
 8000386:	701a      	strb	r2, [r3, #0]
 8000388:	4b37      	ldr	r3, [pc, #220]	@ (8000468 <main+0x170>)
 800038a:	195b      	adds	r3, r3, r5
 800038c:	19db      	adds	r3, r3, r7
 800038e:	2203      	movs	r2, #3
 8000390:	705a      	strb	r2, [r3, #1]
 8000392:	4b35      	ldr	r3, [pc, #212]	@ (8000468 <main+0x170>)
 8000394:	195b      	adds	r3, r3, r5
 8000396:	19db      	adds	r3, r3, r7
 8000398:	2202      	movs	r2, #2
 800039a:	709a      	strb	r2, [r3, #2]
 800039c:	4b32      	ldr	r3, [pc, #200]	@ (8000468 <main+0x170>)
 800039e:	195b      	adds	r3, r3, r5
 80003a0:	19db      	adds	r3, r3, r7
 80003a2:	2211      	movs	r2, #17
 80003a4:	70da      	strb	r2, [r3, #3]
 80003a6:	2388      	movs	r3, #136	@ 0x88
 80003a8:	005b      	lsls	r3, r3, #1
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	781a      	ldrb	r2, [r3, #0]
 80003b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000468 <main+0x170>)
 80003b2:	195b      	adds	r3, r3, r5
 80003b4:	19db      	adds	r3, r3, r7
 80003b6:	711a      	strb	r2, [r3, #4]
 80003b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000468 <main+0x170>)
 80003ba:	195b      	adds	r3, r3, r5
 80003bc:	19db      	adds	r3, r3, r7
 80003be:	22b4      	movs	r2, #180	@ 0xb4
 80003c0:	715a      	strb	r2, [r3, #5]
 80003c2:	4b29      	ldr	r3, [pc, #164]	@ (8000468 <main+0x170>)
 80003c4:	195b      	adds	r3, r3, r5
 80003c6:	19db      	adds	r3, r3, r7
 80003c8:	2227      	movs	r2, #39	@ 0x27
 80003ca:	719a      	strb	r2, [r3, #6]
      uint16_t crc = ModBus_CRC16(response, sizeof(response) - 2);
 80003cc:	2687      	movs	r6, #135	@ 0x87
 80003ce:	0076      	lsls	r6, r6, #1
 80003d0:	19bc      	adds	r4, r7, r6
 80003d2:	003b      	movs	r3, r7
 80003d4:	2105      	movs	r1, #5
 80003d6:	0018      	movs	r0, r3
 80003d8:	f7ff ff34 	bl	8000244 <ModBus_CRC16>
 80003dc:	0003      	movs	r3, r0
 80003de:	8023      	strh	r3, [r4, #0]
      uint8_t crc_low = crc & 0xFF;
 80003e0:	210e      	movs	r1, #14
 80003e2:	31ff      	adds	r1, #255	@ 0xff
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	19ba      	adds	r2, r7, r6
 80003e8:	8812      	ldrh	r2, [r2, #0]
 80003ea:	701a      	strb	r2, [r3, #0]
      uint8_t crc_high = (crc >> 8) & 0xFF;
 80003ec:	19bb      	adds	r3, r7, r6
 80003ee:	881b      	ldrh	r3, [r3, #0]
 80003f0:	0a1b      	lsrs	r3, r3, #8
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	2086      	movs	r0, #134	@ 0x86
 80003f6:	0040      	lsls	r0, r0, #1
 80003f8:	183b      	adds	r3, r7, r0
 80003fa:	701a      	strb	r2, [r3, #0]
      response[sizeof(response) - 2] = crc_low;
 80003fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000468 <main+0x170>)
 80003fe:	195b      	adds	r3, r3, r5
 8000400:	19db      	adds	r3, r3, r7
 8000402:	187a      	adds	r2, r7, r1
 8000404:	7812      	ldrb	r2, [r2, #0]
 8000406:	715a      	strb	r2, [r3, #5]
      response[sizeof(response) - 1] = crc_high;
 8000408:	4b17      	ldr	r3, [pc, #92]	@ (8000468 <main+0x170>)
 800040a:	195b      	adds	r3, r3, r5
 800040c:	19db      	adds	r3, r3, r7
 800040e:	183a      	adds	r2, r7, r0
 8000410:	7812      	ldrb	r2, [r2, #0]
 8000412:	719a      	strb	r2, [r3, #6]

	    HAL_UART_Transmit(&huart3, &response, sizeof(response), 100);
 8000414:	0039      	movs	r1, r7
 8000416:	4811      	ldr	r0, [pc, #68]	@ (800045c <main+0x164>)
 8000418:	2364      	movs	r3, #100	@ 0x64
 800041a:	2207      	movs	r2, #7
 800041c:	f001 faac 	bl	8001978 <HAL_UART_Transmit>
	    HAL_Delay(1000);
 8000420:	23fa      	movs	r3, #250	@ 0xfa
 8000422:	009b      	lsls	r3, r3, #2
 8000424:	0018      	movs	r0, r3
 8000426:	f000 fa4b 	bl	80008c0 <HAL_Delay>
	    HAL_UART_Transmit(&huart3, &response, sizeof(response), 100);
 800042a:	0039      	movs	r1, r7
 800042c:	480b      	ldr	r0, [pc, #44]	@ (800045c <main+0x164>)
 800042e:	2364      	movs	r3, #100	@ 0x64
 8000430:	2207      	movs	r2, #7
 8000432:	f001 faa1 	bl	8001978 <HAL_UART_Transmit>
      test++;
 8000436:	4b0a      	ldr	r3, [pc, #40]	@ (8000460 <main+0x168>)
 8000438:	195b      	adds	r3, r3, r5
 800043a:	19db      	adds	r3, r3, r7
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	3301      	adds	r3, #1
 8000440:	b2da      	uxtb	r2, r3
 8000442:	4b07      	ldr	r3, [pc, #28]	@ (8000460 <main+0x168>)
 8000444:	195b      	adds	r3, r3, r5
 8000446:	19db      	adds	r3, r3, r7
 8000448:	701a      	strb	r2, [r3, #0]
    }
	  HAL_Delay(1000);
 800044a:	23fa      	movs	r3, #250	@ 0xfa
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	0018      	movs	r0, r3
 8000450:	f000 fa36 	bl	80008c0 <HAL_Delay>
    HAL_UART_Receive(&huart3, &data, sizeof(data),10);
 8000454:	46c0      	nop			@ (mov r8, r8)
 8000456:	e77e      	b.n	8000356 <main+0x5e>
 8000458:	080033d8 	.word	0x080033d8
 800045c:	20000078 	.word	0x20000078
 8000460:	fffffef3 	.word	0xfffffef3
 8000464:	080033e8 	.word	0x080033e8
 8000468:	fffffee8 	.word	0xfffffee8

0800046c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046c:	b590      	push	{r4, r7, lr}
 800046e:	b093      	sub	sp, #76	@ 0x4c
 8000470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000472:	2414      	movs	r4, #20
 8000474:	193b      	adds	r3, r7, r4
 8000476:	0018      	movs	r0, r3
 8000478:	2334      	movs	r3, #52	@ 0x34
 800047a:	001a      	movs	r2, r3
 800047c:	2100      	movs	r1, #0
 800047e:	f002 fb21 	bl	8002ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	0018      	movs	r0, r3
 8000486:	2310      	movs	r3, #16
 8000488:	001a      	movs	r2, r3
 800048a:	2100      	movs	r1, #0
 800048c:	f002 fb1a 	bl	8002ac4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000490:	0021      	movs	r1, r4
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2202      	movs	r2, #2
 8000496:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2201      	movs	r2, #1
 800049c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2210      	movs	r2, #16
 80004a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2200      	movs	r2, #0
 80004a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	0018      	movs	r0, r3
 80004ae:	f000 fd1d 	bl	8000eec <HAL_RCC_OscConfig>
 80004b2:	1e03      	subs	r3, r0, #0
 80004b4:	d001      	beq.n	80004ba <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80004b6:	f000 f893 	bl	80005e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2207      	movs	r2, #7
 80004be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2200      	movs	r2, #0
 80004c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2100      	movs	r1, #0
 80004d6:	0018      	movs	r0, r3
 80004d8:	f001 f88e 	bl	80015f8 <HAL_RCC_ClockConfig>
 80004dc:	1e03      	subs	r3, r0, #0
 80004de:	d001      	beq.n	80004e4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80004e0:	f000 f87e 	bl	80005e0 <Error_Handler>
  }
}
 80004e4:	46c0      	nop			@ (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b013      	add	sp, #76	@ 0x4c
 80004ea:	bd90      	pop	{r4, r7, pc}

080004ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80004f0:	4b14      	ldr	r3, [pc, #80]	@ (8000544 <MX_USART3_UART_Init+0x58>)
 80004f2:	4a15      	ldr	r2, [pc, #84]	@ (8000548 <MX_USART3_UART_Init+0x5c>)
 80004f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80004f6:	4b13      	ldr	r3, [pc, #76]	@ (8000544 <MX_USART3_UART_Init+0x58>)
 80004f8:	2296      	movs	r2, #150	@ 0x96
 80004fa:	0192      	lsls	r2, r2, #6
 80004fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004fe:	4b11      	ldr	r3, [pc, #68]	@ (8000544 <MX_USART3_UART_Init+0x58>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000504:	4b0f      	ldr	r3, [pc, #60]	@ (8000544 <MX_USART3_UART_Init+0x58>)
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800050a:	4b0e      	ldr	r3, [pc, #56]	@ (8000544 <MX_USART3_UART_Init+0x58>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000510:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <MX_USART3_UART_Init+0x58>)
 8000512:	220c      	movs	r2, #12
 8000514:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000516:	4b0b      	ldr	r3, [pc, #44]	@ (8000544 <MX_USART3_UART_Init+0x58>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800051c:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <MX_USART3_UART_Init+0x58>)
 800051e:	2200      	movs	r2, #0
 8000520:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000522:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <MX_USART3_UART_Init+0x58>)
 8000524:	2200      	movs	r2, #0
 8000526:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <MX_USART3_UART_Init+0x58>)
 800052a:	2200      	movs	r2, #0
 800052c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800052e:	4b05      	ldr	r3, [pc, #20]	@ (8000544 <MX_USART3_UART_Init+0x58>)
 8000530:	0018      	movs	r0, r3
 8000532:	f001 f9cd 	bl	80018d0 <HAL_UART_Init>
 8000536:	1e03      	subs	r3, r0, #0
 8000538:	d001      	beq.n	800053e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800053a:	f000 f851 	bl	80005e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000078 	.word	0x20000078
 8000548:	40004800 	.word	0x40004800

0800054c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b089      	sub	sp, #36	@ 0x24
 8000550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	240c      	movs	r4, #12
 8000554:	193b      	adds	r3, r7, r4
 8000556:	0018      	movs	r0, r3
 8000558:	2314      	movs	r3, #20
 800055a:	001a      	movs	r2, r3
 800055c:	2100      	movs	r1, #0
 800055e:	f002 fab1 	bl	8002ac4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000562:	4b1d      	ldr	r3, [pc, #116]	@ (80005d8 <MX_GPIO_Init+0x8c>)
 8000564:	695a      	ldr	r2, [r3, #20]
 8000566:	4b1c      	ldr	r3, [pc, #112]	@ (80005d8 <MX_GPIO_Init+0x8c>)
 8000568:	2180      	movs	r1, #128	@ 0x80
 800056a:	0309      	lsls	r1, r1, #12
 800056c:	430a      	orrs	r2, r1
 800056e:	615a      	str	r2, [r3, #20]
 8000570:	4b19      	ldr	r3, [pc, #100]	@ (80005d8 <MX_GPIO_Init+0x8c>)
 8000572:	695a      	ldr	r2, [r3, #20]
 8000574:	2380      	movs	r3, #128	@ 0x80
 8000576:	031b      	lsls	r3, r3, #12
 8000578:	4013      	ands	r3, r2
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b16      	ldr	r3, [pc, #88]	@ (80005d8 <MX_GPIO_Init+0x8c>)
 8000580:	695a      	ldr	r2, [r3, #20]
 8000582:	4b15      	ldr	r3, [pc, #84]	@ (80005d8 <MX_GPIO_Init+0x8c>)
 8000584:	2180      	movs	r1, #128	@ 0x80
 8000586:	02c9      	lsls	r1, r1, #11
 8000588:	430a      	orrs	r2, r1
 800058a:	615a      	str	r2, [r3, #20]
 800058c:	4b12      	ldr	r3, [pc, #72]	@ (80005d8 <MX_GPIO_Init+0x8c>)
 800058e:	695a      	ldr	r2, [r3, #20]
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	02db      	lsls	r3, r3, #11
 8000594:	4013      	ands	r3, r2
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800059a:	2380      	movs	r3, #128	@ 0x80
 800059c:	019b      	lsls	r3, r3, #6
 800059e:	480f      	ldr	r0, [pc, #60]	@ (80005dc <MX_GPIO_Init+0x90>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	0019      	movs	r1, r3
 80005a4:	f000 fc84 	bl	8000eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	2280      	movs	r2, #128	@ 0x80
 80005ac:	0192      	lsls	r2, r2, #6
 80005ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	2201      	movs	r2, #1
 80005b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c2:	193b      	adds	r3, r7, r4
 80005c4:	4a05      	ldr	r2, [pc, #20]	@ (80005dc <MX_GPIO_Init+0x90>)
 80005c6:	0019      	movs	r1, r3
 80005c8:	0010      	movs	r0, r2
 80005ca:	f000 faf9 	bl	8000bc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b009      	add	sp, #36	@ 0x24
 80005d4:	bd90      	pop	{r4, r7, pc}
 80005d6:	46c0      	nop			@ (mov r8, r8)
 80005d8:	40021000 	.word	0x40021000
 80005dc:	48000800 	.word	0x48000800

080005e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e4:	b672      	cpsid	i
}
 80005e6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e8:	46c0      	nop			@ (mov r8, r8)
 80005ea:	e7fd      	b.n	80005e8 <Error_Handler+0x8>

080005ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <HAL_MspInit+0x44>)
 80005f4:	699a      	ldr	r2, [r3, #24]
 80005f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000630 <HAL_MspInit+0x44>)
 80005f8:	2101      	movs	r1, #1
 80005fa:	430a      	orrs	r2, r1
 80005fc:	619a      	str	r2, [r3, #24]
 80005fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <HAL_MspInit+0x44>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	2201      	movs	r2, #1
 8000604:	4013      	ands	r3, r2
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <HAL_MspInit+0x44>)
 800060c:	69da      	ldr	r2, [r3, #28]
 800060e:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <HAL_MspInit+0x44>)
 8000610:	2180      	movs	r1, #128	@ 0x80
 8000612:	0549      	lsls	r1, r1, #21
 8000614:	430a      	orrs	r2, r1
 8000616:	61da      	str	r2, [r3, #28]
 8000618:	4b05      	ldr	r3, [pc, #20]	@ (8000630 <HAL_MspInit+0x44>)
 800061a:	69da      	ldr	r2, [r3, #28]
 800061c:	2380      	movs	r3, #128	@ 0x80
 800061e:	055b      	lsls	r3, r3, #21
 8000620:	4013      	ands	r3, r2
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b002      	add	sp, #8
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	40021000 	.word	0x40021000

08000634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b08b      	sub	sp, #44	@ 0x2c
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	2414      	movs	r4, #20
 800063e:	193b      	adds	r3, r7, r4
 8000640:	0018      	movs	r0, r3
 8000642:	2314      	movs	r3, #20
 8000644:	001a      	movs	r2, r3
 8000646:	2100      	movs	r1, #0
 8000648:	f002 fa3c 	bl	8002ac4 <memset>
  if(huart->Instance==USART3)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <HAL_UART_MspInit+0xa0>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d13a      	bne.n	80006cc <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000656:	4b20      	ldr	r3, [pc, #128]	@ (80006d8 <HAL_UART_MspInit+0xa4>)
 8000658:	69da      	ldr	r2, [r3, #28]
 800065a:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <HAL_UART_MspInit+0xa4>)
 800065c:	2180      	movs	r1, #128	@ 0x80
 800065e:	02c9      	lsls	r1, r1, #11
 8000660:	430a      	orrs	r2, r1
 8000662:	61da      	str	r2, [r3, #28]
 8000664:	4b1c      	ldr	r3, [pc, #112]	@ (80006d8 <HAL_UART_MspInit+0xa4>)
 8000666:	69da      	ldr	r2, [r3, #28]
 8000668:	2380      	movs	r3, #128	@ 0x80
 800066a:	02db      	lsls	r3, r3, #11
 800066c:	4013      	ands	r3, r2
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	4b19      	ldr	r3, [pc, #100]	@ (80006d8 <HAL_UART_MspInit+0xa4>)
 8000674:	695a      	ldr	r2, [r3, #20]
 8000676:	4b18      	ldr	r3, [pc, #96]	@ (80006d8 <HAL_UART_MspInit+0xa4>)
 8000678:	2180      	movs	r1, #128	@ 0x80
 800067a:	02c9      	lsls	r1, r1, #11
 800067c:	430a      	orrs	r2, r1
 800067e:	615a      	str	r2, [r3, #20]
 8000680:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <HAL_UART_MspInit+0xa4>)
 8000682:	695a      	ldr	r2, [r3, #20]
 8000684:	2380      	movs	r3, #128	@ 0x80
 8000686:	02db      	lsls	r3, r3, #11
 8000688:	4013      	ands	r3, r2
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	22c0      	movs	r2, #192	@ 0xc0
 8000692:	0112      	lsls	r2, r2, #4
 8000694:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000696:	0021      	movs	r1, r4
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2202      	movs	r2, #2
 800069c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2203      	movs	r2, #3
 80006a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2204      	movs	r2, #4
 80006ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	4a0a      	ldr	r2, [pc, #40]	@ (80006dc <HAL_UART_MspInit+0xa8>)
 80006b4:	0019      	movs	r1, r3
 80006b6:	0010      	movs	r0, r2
 80006b8:	f000 fa82 	bl	8000bc0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 80006bc:	2200      	movs	r2, #0
 80006be:	2100      	movs	r1, #0
 80006c0:	201d      	movs	r0, #29
 80006c2:	f000 f9cd 	bl	8000a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80006c6:	201d      	movs	r0, #29
 80006c8:	f000 f9df 	bl	8000a8a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80006cc:	46c0      	nop			@ (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b00b      	add	sp, #44	@ 0x2c
 80006d2:	bd90      	pop	{r4, r7, pc}
 80006d4:	40004800 	.word	0x40004800
 80006d8:	40021000 	.word	0x40021000
 80006dc:	48000400 	.word	0x48000400

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e4:	46c0      	nop			@ (mov r8, r8)
 80006e6:	e7fd      	b.n	80006e4 <NMI_Handler+0x4>

080006e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ec:	46c0      	nop			@ (mov r8, r8)
 80006ee:	e7fd      	b.n	80006ec <HardFault_Handler+0x4>

080006f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006f4:	46c0      	nop			@ (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000708:	f000 f8be 	bl	8000888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800070c:	46c0      	nop			@ (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000718:	4b03      	ldr	r3, [pc, #12]	@ (8000728 <USART3_4_IRQHandler+0x14>)
 800071a:	0018      	movs	r0, r3
 800071c:	f001 fab4 	bl	8001c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8000720:	46c0      	nop			@ (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	20000078 	.word	0x20000078

0800072c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000734:	4a14      	ldr	r2, [pc, #80]	@ (8000788 <_sbrk+0x5c>)
 8000736:	4b15      	ldr	r3, [pc, #84]	@ (800078c <_sbrk+0x60>)
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000740:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <_sbrk+0x64>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d102      	bne.n	800074e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000748:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <_sbrk+0x64>)
 800074a:	4a12      	ldr	r2, [pc, #72]	@ (8000794 <_sbrk+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800074e:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <_sbrk+0x64>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	18d3      	adds	r3, r2, r3
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	429a      	cmp	r2, r3
 800075a:	d207      	bcs.n	800076c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800075c:	f002 f9ba 	bl	8002ad4 <__errno>
 8000760:	0003      	movs	r3, r0
 8000762:	220c      	movs	r2, #12
 8000764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000766:	2301      	movs	r3, #1
 8000768:	425b      	negs	r3, r3
 800076a:	e009      	b.n	8000780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800076c:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <_sbrk+0x64>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000772:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <_sbrk+0x64>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	18d2      	adds	r2, r2, r3
 800077a:	4b05      	ldr	r3, [pc, #20]	@ (8000790 <_sbrk+0x64>)
 800077c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800077e:	68fb      	ldr	r3, [r7, #12]
}
 8000780:	0018      	movs	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	b006      	add	sp, #24
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20004000 	.word	0x20004000
 800078c:	00000400 	.word	0x00000400
 8000790:	20000100 	.word	0x20000100
 8000794:	20000250 	.word	0x20000250

08000798 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800079c:	46c0      	nop			@ (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007a4:	480d      	ldr	r0, [pc, #52]	@ (80007dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007a6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007a8:	f7ff fff6 	bl	8000798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ac:	480c      	ldr	r0, [pc, #48]	@ (80007e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ae:	490d      	ldr	r1, [pc, #52]	@ (80007e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b0:	4a0d      	ldr	r2, [pc, #52]	@ (80007e8 <LoopForever+0xe>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b4:	e002      	b.n	80007bc <LoopCopyDataInit>

080007b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ba:	3304      	adds	r3, #4

080007bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c0:	d3f9      	bcc.n	80007b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c2:	4a0a      	ldr	r2, [pc, #40]	@ (80007ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c4:	4c0a      	ldr	r4, [pc, #40]	@ (80007f0 <LoopForever+0x16>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c8:	e001      	b.n	80007ce <LoopFillZerobss>

080007ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007cc:	3204      	adds	r2, #4

080007ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d0:	d3fb      	bcc.n	80007ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007d2:	f002 f985 	bl	8002ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d6:	f7ff fd8f 	bl	80002f8 <main>

080007da <LoopForever>:

LoopForever:
    b LoopForever
 80007da:	e7fe      	b.n	80007da <LoopForever>
  ldr   r0, =_estack
 80007dc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80007e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80007e8:	08003464 	.word	0x08003464
  ldr r2, =_sbss
 80007ec:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80007f0:	20000250 	.word	0x20000250

080007f4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f4:	e7fe      	b.n	80007f4 <ADC1_COMP_IRQHandler>
	...

080007f8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007fc:	4b07      	ldr	r3, [pc, #28]	@ (800081c <HAL_Init+0x24>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <HAL_Init+0x24>)
 8000802:	2110      	movs	r1, #16
 8000804:	430a      	orrs	r2, r1
 8000806:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000808:	2003      	movs	r0, #3
 800080a:	f000 f809 	bl	8000820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800080e:	f7ff feed 	bl	80005ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000812:	2300      	movs	r3, #0
}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	40022000 	.word	0x40022000

08000820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000828:	4b14      	ldr	r3, [pc, #80]	@ (800087c <HAL_InitTick+0x5c>)
 800082a:	681c      	ldr	r4, [r3, #0]
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <HAL_InitTick+0x60>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	0019      	movs	r1, r3
 8000832:	23fa      	movs	r3, #250	@ 0xfa
 8000834:	0098      	lsls	r0, r3, #2
 8000836:	f7ff fc79 	bl	800012c <__udivsi3>
 800083a:	0003      	movs	r3, r0
 800083c:	0019      	movs	r1, r3
 800083e:	0020      	movs	r0, r4
 8000840:	f7ff fc74 	bl	800012c <__udivsi3>
 8000844:	0003      	movs	r3, r0
 8000846:	0018      	movs	r0, r3
 8000848:	f000 f92f 	bl	8000aaa <HAL_SYSTICK_Config>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d001      	beq.n	8000854 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000850:	2301      	movs	r3, #1
 8000852:	e00f      	b.n	8000874 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b03      	cmp	r3, #3
 8000858:	d80b      	bhi.n	8000872 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	2301      	movs	r3, #1
 800085e:	425b      	negs	r3, r3
 8000860:	2200      	movs	r2, #0
 8000862:	0018      	movs	r0, r3
 8000864:	f000 f8fc 	bl	8000a60 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <HAL_InitTick+0x64>)
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800086e:	2300      	movs	r3, #0
 8000870:	e000      	b.n	8000874 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
}
 8000874:	0018      	movs	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	b003      	add	sp, #12
 800087a:	bd90      	pop	{r4, r7, pc}
 800087c:	20000000 	.word	0x20000000
 8000880:	20000008 	.word	0x20000008
 8000884:	20000004 	.word	0x20000004

08000888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800088c:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <HAL_IncTick+0x1c>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	001a      	movs	r2, r3
 8000892:	4b05      	ldr	r3, [pc, #20]	@ (80008a8 <HAL_IncTick+0x20>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	18d2      	adds	r2, r2, r3
 8000898:	4b03      	ldr	r3, [pc, #12]	@ (80008a8 <HAL_IncTick+0x20>)
 800089a:	601a      	str	r2, [r3, #0]
}
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	20000008 	.word	0x20000008
 80008a8:	20000104 	.word	0x20000104

080008ac <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  return uwTick;
 80008b0:	4b02      	ldr	r3, [pc, #8]	@ (80008bc <HAL_GetTick+0x10>)
 80008b2:	681b      	ldr	r3, [r3, #0]
}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	20000104 	.word	0x20000104

080008c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c8:	f7ff fff0 	bl	80008ac <HAL_GetTick>
 80008cc:	0003      	movs	r3, r0
 80008ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	3301      	adds	r3, #1
 80008d8:	d005      	beq.n	80008e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008da:	4b0a      	ldr	r3, [pc, #40]	@ (8000904 <HAL_Delay+0x44>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	001a      	movs	r2, r3
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	189b      	adds	r3, r3, r2
 80008e4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	f7ff ffe0 	bl	80008ac <HAL_GetTick>
 80008ec:	0002      	movs	r2, r0
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d8f7      	bhi.n	80008e8 <HAL_Delay+0x28>
  {
  }
}
 80008f8:	46c0      	nop			@ (mov r8, r8)
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b004      	add	sp, #16
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	20000008 	.word	0x20000008

08000908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	0002      	movs	r2, r0
 8000910:	1dfb      	adds	r3, r7, #7
 8000912:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b7f      	cmp	r3, #127	@ 0x7f
 800091a:	d809      	bhi.n	8000930 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091c:	1dfb      	adds	r3, r7, #7
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	001a      	movs	r2, r3
 8000922:	231f      	movs	r3, #31
 8000924:	401a      	ands	r2, r3
 8000926:	4b04      	ldr	r3, [pc, #16]	@ (8000938 <__NVIC_EnableIRQ+0x30>)
 8000928:	2101      	movs	r1, #1
 800092a:	4091      	lsls	r1, r2
 800092c:	000a      	movs	r2, r1
 800092e:	601a      	str	r2, [r3, #0]
  }
}
 8000930:	46c0      	nop			@ (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	b002      	add	sp, #8
 8000936:	bd80      	pop	{r7, pc}
 8000938:	e000e100 	.word	0xe000e100

0800093c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	0002      	movs	r2, r0
 8000944:	6039      	str	r1, [r7, #0]
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000950:	d828      	bhi.n	80009a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000952:	4a2f      	ldr	r2, [pc, #188]	@ (8000a10 <__NVIC_SetPriority+0xd4>)
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b25b      	sxtb	r3, r3
 800095a:	089b      	lsrs	r3, r3, #2
 800095c:	33c0      	adds	r3, #192	@ 0xc0
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	589b      	ldr	r3, [r3, r2]
 8000962:	1dfa      	adds	r2, r7, #7
 8000964:	7812      	ldrb	r2, [r2, #0]
 8000966:	0011      	movs	r1, r2
 8000968:	2203      	movs	r2, #3
 800096a:	400a      	ands	r2, r1
 800096c:	00d2      	lsls	r2, r2, #3
 800096e:	21ff      	movs	r1, #255	@ 0xff
 8000970:	4091      	lsls	r1, r2
 8000972:	000a      	movs	r2, r1
 8000974:	43d2      	mvns	r2, r2
 8000976:	401a      	ands	r2, r3
 8000978:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	019b      	lsls	r3, r3, #6
 800097e:	22ff      	movs	r2, #255	@ 0xff
 8000980:	401a      	ands	r2, r3
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	0018      	movs	r0, r3
 8000988:	2303      	movs	r3, #3
 800098a:	4003      	ands	r3, r0
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000990:	481f      	ldr	r0, [pc, #124]	@ (8000a10 <__NVIC_SetPriority+0xd4>)
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b25b      	sxtb	r3, r3
 8000998:	089b      	lsrs	r3, r3, #2
 800099a:	430a      	orrs	r2, r1
 800099c:	33c0      	adds	r3, #192	@ 0xc0
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009a2:	e031      	b.n	8000a08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a14 <__NVIC_SetPriority+0xd8>)
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	0019      	movs	r1, r3
 80009ac:	230f      	movs	r3, #15
 80009ae:	400b      	ands	r3, r1
 80009b0:	3b08      	subs	r3, #8
 80009b2:	089b      	lsrs	r3, r3, #2
 80009b4:	3306      	adds	r3, #6
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	18d3      	adds	r3, r2, r3
 80009ba:	3304      	adds	r3, #4
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	1dfa      	adds	r2, r7, #7
 80009c0:	7812      	ldrb	r2, [r2, #0]
 80009c2:	0011      	movs	r1, r2
 80009c4:	2203      	movs	r2, #3
 80009c6:	400a      	ands	r2, r1
 80009c8:	00d2      	lsls	r2, r2, #3
 80009ca:	21ff      	movs	r1, #255	@ 0xff
 80009cc:	4091      	lsls	r1, r2
 80009ce:	000a      	movs	r2, r1
 80009d0:	43d2      	mvns	r2, r2
 80009d2:	401a      	ands	r2, r3
 80009d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	019b      	lsls	r3, r3, #6
 80009da:	22ff      	movs	r2, #255	@ 0xff
 80009dc:	401a      	ands	r2, r3
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	0018      	movs	r0, r3
 80009e4:	2303      	movs	r3, #3
 80009e6:	4003      	ands	r3, r0
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ec:	4809      	ldr	r0, [pc, #36]	@ (8000a14 <__NVIC_SetPriority+0xd8>)
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	001c      	movs	r4, r3
 80009f4:	230f      	movs	r3, #15
 80009f6:	4023      	ands	r3, r4
 80009f8:	3b08      	subs	r3, #8
 80009fa:	089b      	lsrs	r3, r3, #2
 80009fc:	430a      	orrs	r2, r1
 80009fe:	3306      	adds	r3, #6
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	18c3      	adds	r3, r0, r3
 8000a04:	3304      	adds	r3, #4
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	46c0      	nop			@ (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b003      	add	sp, #12
 8000a0e:	bd90      	pop	{r4, r7, pc}
 8000a10:	e000e100 	.word	0xe000e100
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	1e5a      	subs	r2, r3, #1
 8000a24:	2380      	movs	r3, #128	@ 0x80
 8000a26:	045b      	lsls	r3, r3, #17
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d301      	bcc.n	8000a30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e010      	b.n	8000a52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a30:	4b0a      	ldr	r3, [pc, #40]	@ (8000a5c <SysTick_Config+0x44>)
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	3a01      	subs	r2, #1
 8000a36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a38:	2301      	movs	r3, #1
 8000a3a:	425b      	negs	r3, r3
 8000a3c:	2103      	movs	r1, #3
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f7ff ff7c 	bl	800093c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a44:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <SysTick_Config+0x44>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4a:	4b04      	ldr	r3, [pc, #16]	@ (8000a5c <SysTick_Config+0x44>)
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	0018      	movs	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b002      	add	sp, #8
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	e000e010 	.word	0xe000e010

08000a60 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
 8000a6a:	210f      	movs	r1, #15
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	1c02      	adds	r2, r0, #0
 8000a70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b25b      	sxtb	r3, r3
 8000a7a:	0011      	movs	r1, r2
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff ff5d 	bl	800093c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b004      	add	sp, #16
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	0002      	movs	r2, r0
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b25b      	sxtb	r3, r3
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f7ff ff33 	bl	8000908 <__NVIC_EnableIRQ>
}
 8000aa2:	46c0      	nop			@ (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b002      	add	sp, #8
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f7ff ffaf 	bl	8000a18 <SysTick_Config>
 8000aba:	0003      	movs	r3, r0
}
 8000abc:	0018      	movs	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b002      	add	sp, #8
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2221      	movs	r2, #33	@ 0x21
 8000ad0:	5c9b      	ldrb	r3, [r3, r2]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d008      	beq.n	8000aea <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2204      	movs	r2, #4
 8000adc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2220      	movs	r2, #32
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e020      	b.n	8000b2c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	210e      	movs	r1, #14
 8000af6:	438a      	bics	r2, r1
 8000af8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2101      	movs	r1, #1
 8000b06:	438a      	bics	r2, r1
 8000b08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b12:	2101      	movs	r1, #1
 8000b14:	4091      	lsls	r1, r2
 8000b16:	000a      	movs	r2, r1
 8000b18:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2221      	movs	r2, #33	@ 0x21
 8000b1e:	2101      	movs	r1, #1
 8000b20:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2220      	movs	r2, #32
 8000b26:	2100      	movs	r1, #0
 8000b28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000b2a:	2300      	movs	r3, #0
}
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b002      	add	sp, #8
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b3c:	210f      	movs	r1, #15
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2221      	movs	r2, #33	@ 0x21
 8000b48:	5c9b      	ldrb	r3, [r3, r2]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d006      	beq.n	8000b5e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2204      	movs	r2, #4
 8000b54:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
 8000b5c:	e028      	b.n	8000bb0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	210e      	movs	r1, #14
 8000b6a:	438a      	bics	r2, r1
 8000b6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2101      	movs	r1, #1
 8000b7a:	438a      	bics	r2, r1
 8000b7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b86:	2101      	movs	r1, #1
 8000b88:	4091      	lsls	r1, r2
 8000b8a:	000a      	movs	r2, r1
 8000b8c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2221      	movs	r2, #33	@ 0x21
 8000b92:	2101      	movs	r1, #1
 8000b94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2220      	movs	r2, #32
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d004      	beq.n	8000bb0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	0010      	movs	r0, r2
 8000bae:	4798      	blx	r3
    }
  }
  return status;
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	18fb      	adds	r3, r7, r3
 8000bb4:	781b      	ldrb	r3, [r3, #0]
}
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b004      	add	sp, #16
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bce:	e155      	b.n	8000e7c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	697a      	ldr	r2, [r7, #20]
 8000bd8:	4091      	lsls	r1, r2
 8000bda:	000a      	movs	r2, r1
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d100      	bne.n	8000be8 <HAL_GPIO_Init+0x28>
 8000be6:	e146      	b.n	8000e76 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2203      	movs	r2, #3
 8000bee:	4013      	ands	r3, r2
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d005      	beq.n	8000c00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d130      	bne.n	8000c62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	409a      	lsls	r2, r3
 8000c0e:	0013      	movs	r3, r2
 8000c10:	43da      	mvns	r2, r3
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	68da      	ldr	r2, [r3, #12]
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	409a      	lsls	r2, r3
 8000c22:	0013      	movs	r3, r2
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c36:	2201      	movs	r2, #1
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	409a      	lsls	r2, r3
 8000c3c:	0013      	movs	r3, r2
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	091b      	lsrs	r3, r3, #4
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	409a      	lsls	r2, r3
 8000c54:	0013      	movs	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	2203      	movs	r2, #3
 8000c68:	4013      	ands	r3, r2
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d017      	beq.n	8000c9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	2203      	movs	r2, #3
 8000c7a:	409a      	lsls	r2, r3
 8000c7c:	0013      	movs	r3, r2
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	689a      	ldr	r2, [r3, #8]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	409a      	lsls	r2, r3
 8000c90:	0013      	movs	r3, r2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d123      	bne.n	8000cf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	08da      	lsrs	r2, r3, #3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	3208      	adds	r2, #8
 8000cb2:	0092      	lsls	r2, r2, #2
 8000cb4:	58d3      	ldr	r3, [r2, r3]
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	2207      	movs	r2, #7
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	220f      	movs	r2, #15
 8000cc2:	409a      	lsls	r2, r3
 8000cc4:	0013      	movs	r3, r2
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	691a      	ldr	r2, [r3, #16]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	2107      	movs	r1, #7
 8000cd6:	400b      	ands	r3, r1
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	409a      	lsls	r2, r3
 8000cdc:	0013      	movs	r3, r2
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	08da      	lsrs	r2, r3, #3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3208      	adds	r2, #8
 8000cec:	0092      	lsls	r2, r2, #2
 8000cee:	6939      	ldr	r1, [r7, #16]
 8000cf0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	409a      	lsls	r2, r3
 8000d00:	0013      	movs	r3, r2
 8000d02:	43da      	mvns	r2, r3
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2203      	movs	r2, #3
 8000d10:	401a      	ands	r2, r3
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	409a      	lsls	r2, r3
 8000d18:	0013      	movs	r3, r2
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	23c0      	movs	r3, #192	@ 0xc0
 8000d2c:	029b      	lsls	r3, r3, #10
 8000d2e:	4013      	ands	r3, r2
 8000d30:	d100      	bne.n	8000d34 <HAL_GPIO_Init+0x174>
 8000d32:	e0a0      	b.n	8000e76 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d34:	4b57      	ldr	r3, [pc, #348]	@ (8000e94 <HAL_GPIO_Init+0x2d4>)
 8000d36:	699a      	ldr	r2, [r3, #24]
 8000d38:	4b56      	ldr	r3, [pc, #344]	@ (8000e94 <HAL_GPIO_Init+0x2d4>)
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	619a      	str	r2, [r3, #24]
 8000d40:	4b54      	ldr	r3, [pc, #336]	@ (8000e94 <HAL_GPIO_Init+0x2d4>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	2201      	movs	r2, #1
 8000d46:	4013      	ands	r3, r2
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d4c:	4a52      	ldr	r2, [pc, #328]	@ (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	089b      	lsrs	r3, r3, #2
 8000d52:	3302      	adds	r3, #2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	589b      	ldr	r3, [r3, r2]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	4013      	ands	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	220f      	movs	r2, #15
 8000d64:	409a      	lsls	r2, r3
 8000d66:	0013      	movs	r3, r2
 8000d68:	43da      	mvns	r2, r3
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	2390      	movs	r3, #144	@ 0x90
 8000d74:	05db      	lsls	r3, r3, #23
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d019      	beq.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a47      	ldr	r2, [pc, #284]	@ (8000e9c <HAL_GPIO_Init+0x2dc>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d013      	beq.n	8000daa <HAL_GPIO_Init+0x1ea>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a46      	ldr	r2, [pc, #280]	@ (8000ea0 <HAL_GPIO_Init+0x2e0>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d00d      	beq.n	8000da6 <HAL_GPIO_Init+0x1e6>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a45      	ldr	r2, [pc, #276]	@ (8000ea4 <HAL_GPIO_Init+0x2e4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d007      	beq.n	8000da2 <HAL_GPIO_Init+0x1e2>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a44      	ldr	r2, [pc, #272]	@ (8000ea8 <HAL_GPIO_Init+0x2e8>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d101      	bne.n	8000d9e <HAL_GPIO_Init+0x1de>
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	e008      	b.n	8000db0 <HAL_GPIO_Init+0x1f0>
 8000d9e:	2305      	movs	r3, #5
 8000da0:	e006      	b.n	8000db0 <HAL_GPIO_Init+0x1f0>
 8000da2:	2303      	movs	r3, #3
 8000da4:	e004      	b.n	8000db0 <HAL_GPIO_Init+0x1f0>
 8000da6:	2302      	movs	r3, #2
 8000da8:	e002      	b.n	8000db0 <HAL_GPIO_Init+0x1f0>
 8000daa:	2301      	movs	r3, #1
 8000dac:	e000      	b.n	8000db0 <HAL_GPIO_Init+0x1f0>
 8000dae:	2300      	movs	r3, #0
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	2103      	movs	r1, #3
 8000db4:	400a      	ands	r2, r1
 8000db6:	0092      	lsls	r2, r2, #2
 8000db8:	4093      	lsls	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dc0:	4935      	ldr	r1, [pc, #212]	@ (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dce:	4b37      	ldr	r3, [pc, #220]	@ (8000eac <HAL_GPIO_Init+0x2ec>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	2380      	movs	r3, #128	@ 0x80
 8000de4:	035b      	lsls	r3, r3, #13
 8000de6:	4013      	ands	r3, r2
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000df2:	4b2e      	ldr	r3, [pc, #184]	@ (8000eac <HAL_GPIO_Init+0x2ec>)
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000df8:	4b2c      	ldr	r3, [pc, #176]	@ (8000eac <HAL_GPIO_Init+0x2ec>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	43da      	mvns	r2, r3
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	2380      	movs	r3, #128	@ 0x80
 8000e0e:	039b      	lsls	r3, r3, #14
 8000e10:	4013      	ands	r3, r2
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e1c:	4b23      	ldr	r3, [pc, #140]	@ (8000eac <HAL_GPIO_Init+0x2ec>)
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000e22:	4b22      	ldr	r3, [pc, #136]	@ (8000eac <HAL_GPIO_Init+0x2ec>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	2380      	movs	r3, #128	@ 0x80
 8000e38:	029b      	lsls	r3, r3, #10
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e46:	4b19      	ldr	r3, [pc, #100]	@ (8000eac <HAL_GPIO_Init+0x2ec>)
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000e4c:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <HAL_GPIO_Init+0x2ec>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43da      	mvns	r2, r3
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	2380      	movs	r3, #128	@ 0x80
 8000e62:	025b      	lsls	r3, r3, #9
 8000e64:	4013      	ands	r3, r2
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e70:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <HAL_GPIO_Init+0x2ec>)
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	40da      	lsrs	r2, r3
 8000e84:	1e13      	subs	r3, r2, #0
 8000e86:	d000      	beq.n	8000e8a <HAL_GPIO_Init+0x2ca>
 8000e88:	e6a2      	b.n	8000bd0 <HAL_GPIO_Init+0x10>
  } 
}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	46c0      	nop			@ (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b006      	add	sp, #24
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010000 	.word	0x40010000
 8000e9c:	48000400 	.word	0x48000400
 8000ea0:	48000800 	.word	0x48000800
 8000ea4:	48000c00 	.word	0x48000c00
 8000ea8:	48001000 	.word	0x48001000
 8000eac:	40010400 	.word	0x40010400

08000eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	0008      	movs	r0, r1
 8000eba:	0011      	movs	r1, r2
 8000ebc:	1cbb      	adds	r3, r7, #2
 8000ebe:	1c02      	adds	r2, r0, #0
 8000ec0:	801a      	strh	r2, [r3, #0]
 8000ec2:	1c7b      	adds	r3, r7, #1
 8000ec4:	1c0a      	adds	r2, r1, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ec8:	1c7b      	adds	r3, r7, #1
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d004      	beq.n	8000eda <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ed0:	1cbb      	adds	r3, r7, #2
 8000ed2:	881a      	ldrh	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ed8:	e003      	b.n	8000ee2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eda:	1cbb      	adds	r3, r7, #2
 8000edc:	881a      	ldrh	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ee2:	46c0      	nop			@ (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b002      	add	sp, #8
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d102      	bne.n	8000f00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	f000 fb76 	bl	80015ec <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2201      	movs	r2, #1
 8000f06:	4013      	ands	r3, r2
 8000f08:	d100      	bne.n	8000f0c <HAL_RCC_OscConfig+0x20>
 8000f0a:	e08e      	b.n	800102a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f0c:	4bc5      	ldr	r3, [pc, #788]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	220c      	movs	r2, #12
 8000f12:	4013      	ands	r3, r2
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	d00e      	beq.n	8000f36 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f18:	4bc2      	ldr	r3, [pc, #776]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	220c      	movs	r2, #12
 8000f1e:	4013      	ands	r3, r2
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	d117      	bne.n	8000f54 <HAL_RCC_OscConfig+0x68>
 8000f24:	4bbf      	ldr	r3, [pc, #764]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	23c0      	movs	r3, #192	@ 0xc0
 8000f2a:	025b      	lsls	r3, r3, #9
 8000f2c:	401a      	ands	r2, r3
 8000f2e:	2380      	movs	r3, #128	@ 0x80
 8000f30:	025b      	lsls	r3, r3, #9
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d10e      	bne.n	8000f54 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f36:	4bbb      	ldr	r3, [pc, #748]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	2380      	movs	r3, #128	@ 0x80
 8000f3c:	029b      	lsls	r3, r3, #10
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d100      	bne.n	8000f44 <HAL_RCC_OscConfig+0x58>
 8000f42:	e071      	b.n	8001028 <HAL_RCC_OscConfig+0x13c>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d000      	beq.n	8000f4e <HAL_RCC_OscConfig+0x62>
 8000f4c:	e06c      	b.n	8001028 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	f000 fb4c 	bl	80015ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d107      	bne.n	8000f6c <HAL_RCC_OscConfig+0x80>
 8000f5c:	4bb1      	ldr	r3, [pc, #708]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4bb0      	ldr	r3, [pc, #704]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8000f62:	2180      	movs	r1, #128	@ 0x80
 8000f64:	0249      	lsls	r1, r1, #9
 8000f66:	430a      	orrs	r2, r1
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	e02f      	b.n	8000fcc <HAL_RCC_OscConfig+0xe0>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10c      	bne.n	8000f8e <HAL_RCC_OscConfig+0xa2>
 8000f74:	4bab      	ldr	r3, [pc, #684]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4baa      	ldr	r3, [pc, #680]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8000f7a:	49ab      	ldr	r1, [pc, #684]	@ (8001228 <HAL_RCC_OscConfig+0x33c>)
 8000f7c:	400a      	ands	r2, r1
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	4ba8      	ldr	r3, [pc, #672]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4ba7      	ldr	r3, [pc, #668]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8000f86:	49a9      	ldr	r1, [pc, #676]	@ (800122c <HAL_RCC_OscConfig+0x340>)
 8000f88:	400a      	ands	r2, r1
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	e01e      	b.n	8000fcc <HAL_RCC_OscConfig+0xe0>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b05      	cmp	r3, #5
 8000f94:	d10e      	bne.n	8000fb4 <HAL_RCC_OscConfig+0xc8>
 8000f96:	4ba3      	ldr	r3, [pc, #652]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4ba2      	ldr	r3, [pc, #648]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8000f9c:	2180      	movs	r1, #128	@ 0x80
 8000f9e:	02c9      	lsls	r1, r1, #11
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	4b9f      	ldr	r3, [pc, #636]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b9e      	ldr	r3, [pc, #632]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8000faa:	2180      	movs	r1, #128	@ 0x80
 8000fac:	0249      	lsls	r1, r1, #9
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	e00b      	b.n	8000fcc <HAL_RCC_OscConfig+0xe0>
 8000fb4:	4b9b      	ldr	r3, [pc, #620]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b9a      	ldr	r3, [pc, #616]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8000fba:	499b      	ldr	r1, [pc, #620]	@ (8001228 <HAL_RCC_OscConfig+0x33c>)
 8000fbc:	400a      	ands	r2, r1
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	4b98      	ldr	r3, [pc, #608]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b97      	ldr	r3, [pc, #604]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8000fc6:	4999      	ldr	r1, [pc, #612]	@ (800122c <HAL_RCC_OscConfig+0x340>)
 8000fc8:	400a      	ands	r2, r1
 8000fca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d014      	beq.n	8000ffe <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fc6a 	bl	80008ac <HAL_GetTick>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fde:	f7ff fc65 	bl	80008ac <HAL_GetTick>
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b64      	cmp	r3, #100	@ 0x64
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e2fd      	b.n	80015ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff0:	4b8c      	ldr	r3, [pc, #560]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	2380      	movs	r3, #128	@ 0x80
 8000ff6:	029b      	lsls	r3, r3, #10
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	d0f0      	beq.n	8000fde <HAL_RCC_OscConfig+0xf2>
 8000ffc:	e015      	b.n	800102a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffe:	f7ff fc55 	bl	80008ac <HAL_GetTick>
 8001002:	0003      	movs	r3, r0
 8001004:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001008:	f7ff fc50 	bl	80008ac <HAL_GetTick>
 800100c:	0002      	movs	r2, r0
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b64      	cmp	r3, #100	@ 0x64
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e2e8      	b.n	80015ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101a:	4b82      	ldr	r3, [pc, #520]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	2380      	movs	r3, #128	@ 0x80
 8001020:	029b      	lsls	r3, r3, #10
 8001022:	4013      	ands	r3, r2
 8001024:	d1f0      	bne.n	8001008 <HAL_RCC_OscConfig+0x11c>
 8001026:	e000      	b.n	800102a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001028:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2202      	movs	r2, #2
 8001030:	4013      	ands	r3, r2
 8001032:	d100      	bne.n	8001036 <HAL_RCC_OscConfig+0x14a>
 8001034:	e06c      	b.n	8001110 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001036:	4b7b      	ldr	r3, [pc, #492]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	220c      	movs	r2, #12
 800103c:	4013      	ands	r3, r2
 800103e:	d00e      	beq.n	800105e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001040:	4b78      	ldr	r3, [pc, #480]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	220c      	movs	r2, #12
 8001046:	4013      	ands	r3, r2
 8001048:	2b08      	cmp	r3, #8
 800104a:	d11f      	bne.n	800108c <HAL_RCC_OscConfig+0x1a0>
 800104c:	4b75      	ldr	r3, [pc, #468]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	23c0      	movs	r3, #192	@ 0xc0
 8001052:	025b      	lsls	r3, r3, #9
 8001054:	401a      	ands	r2, r3
 8001056:	2380      	movs	r3, #128	@ 0x80
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	429a      	cmp	r2, r3
 800105c:	d116      	bne.n	800108c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105e:	4b71      	ldr	r3, [pc, #452]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2202      	movs	r2, #2
 8001064:	4013      	ands	r3, r2
 8001066:	d005      	beq.n	8001074 <HAL_RCC_OscConfig+0x188>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d001      	beq.n	8001074 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e2bb      	b.n	80015ec <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001074:	4b6b      	ldr	r3, [pc, #428]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	22f8      	movs	r2, #248	@ 0xf8
 800107a:	4393      	bics	r3, r2
 800107c:	0019      	movs	r1, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	00da      	lsls	r2, r3, #3
 8001084:	4b67      	ldr	r3, [pc, #412]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8001086:	430a      	orrs	r2, r1
 8001088:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108a:	e041      	b.n	8001110 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d024      	beq.n	80010de <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001094:	4b63      	ldr	r3, [pc, #396]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b62      	ldr	r3, [pc, #392]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 800109a:	2101      	movs	r1, #1
 800109c:	430a      	orrs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fc04 	bl	80008ac <HAL_GetTick>
 80010a4:	0003      	movs	r3, r0
 80010a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010aa:	f7ff fbff 	bl	80008ac <HAL_GetTick>
 80010ae:	0002      	movs	r2, r0
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e297      	b.n	80015ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010bc:	4b59      	ldr	r3, [pc, #356]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2202      	movs	r2, #2
 80010c2:	4013      	ands	r3, r2
 80010c4:	d0f1      	beq.n	80010aa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c6:	4b57      	ldr	r3, [pc, #348]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	22f8      	movs	r2, #248	@ 0xf8
 80010cc:	4393      	bics	r3, r2
 80010ce:	0019      	movs	r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	00da      	lsls	r2, r3, #3
 80010d6:	4b53      	ldr	r3, [pc, #332]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 80010d8:	430a      	orrs	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	e018      	b.n	8001110 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010de:	4b51      	ldr	r3, [pc, #324]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4b50      	ldr	r3, [pc, #320]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 80010e4:	2101      	movs	r1, #1
 80010e6:	438a      	bics	r2, r1
 80010e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ea:	f7ff fbdf 	bl	80008ac <HAL_GetTick>
 80010ee:	0003      	movs	r3, r0
 80010f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f4:	f7ff fbda 	bl	80008ac <HAL_GetTick>
 80010f8:	0002      	movs	r2, r0
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e272      	b.n	80015ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001106:	4b47      	ldr	r3, [pc, #284]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2202      	movs	r2, #2
 800110c:	4013      	ands	r3, r2
 800110e:	d1f1      	bne.n	80010f4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2208      	movs	r2, #8
 8001116:	4013      	ands	r3, r2
 8001118:	d036      	beq.n	8001188 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d019      	beq.n	8001156 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001122:	4b40      	ldr	r3, [pc, #256]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8001124:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001126:	4b3f      	ldr	r3, [pc, #252]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8001128:	2101      	movs	r1, #1
 800112a:	430a      	orrs	r2, r1
 800112c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112e:	f7ff fbbd 	bl	80008ac <HAL_GetTick>
 8001132:	0003      	movs	r3, r0
 8001134:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001138:	f7ff fbb8 	bl	80008ac <HAL_GetTick>
 800113c:	0002      	movs	r2, r0
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e250      	b.n	80015ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114a:	4b36      	ldr	r3, [pc, #216]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 800114c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800114e:	2202      	movs	r2, #2
 8001150:	4013      	ands	r3, r2
 8001152:	d0f1      	beq.n	8001138 <HAL_RCC_OscConfig+0x24c>
 8001154:	e018      	b.n	8001188 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001156:	4b33      	ldr	r3, [pc, #204]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8001158:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800115a:	4b32      	ldr	r3, [pc, #200]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 800115c:	2101      	movs	r1, #1
 800115e:	438a      	bics	r2, r1
 8001160:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001162:	f7ff fba3 	bl	80008ac <HAL_GetTick>
 8001166:	0003      	movs	r3, r0
 8001168:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800116c:	f7ff fb9e 	bl	80008ac <HAL_GetTick>
 8001170:	0002      	movs	r2, r0
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e236      	b.n	80015ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800117e:	4b29      	ldr	r3, [pc, #164]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8001180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001182:	2202      	movs	r2, #2
 8001184:	4013      	ands	r3, r2
 8001186:	d1f1      	bne.n	800116c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2204      	movs	r2, #4
 800118e:	4013      	ands	r3, r2
 8001190:	d100      	bne.n	8001194 <HAL_RCC_OscConfig+0x2a8>
 8001192:	e0b5      	b.n	8001300 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001194:	201f      	movs	r0, #31
 8001196:	183b      	adds	r3, r7, r0
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800119c:	4b21      	ldr	r3, [pc, #132]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 800119e:	69da      	ldr	r2, [r3, #28]
 80011a0:	2380      	movs	r3, #128	@ 0x80
 80011a2:	055b      	lsls	r3, r3, #21
 80011a4:	4013      	ands	r3, r2
 80011a6:	d110      	bne.n	80011ca <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 80011aa:	69da      	ldr	r2, [r3, #28]
 80011ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 80011ae:	2180      	movs	r1, #128	@ 0x80
 80011b0:	0549      	lsls	r1, r1, #21
 80011b2:	430a      	orrs	r2, r1
 80011b4:	61da      	str	r2, [r3, #28]
 80011b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 80011b8:	69da      	ldr	r2, [r3, #28]
 80011ba:	2380      	movs	r3, #128	@ 0x80
 80011bc:	055b      	lsls	r3, r3, #21
 80011be:	4013      	ands	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011c4:	183b      	adds	r3, r7, r0
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ca:	4b19      	ldr	r3, [pc, #100]	@ (8001230 <HAL_RCC_OscConfig+0x344>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	2380      	movs	r3, #128	@ 0x80
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4013      	ands	r3, r2
 80011d4:	d11a      	bne.n	800120c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011d6:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <HAL_RCC_OscConfig+0x344>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <HAL_RCC_OscConfig+0x344>)
 80011dc:	2180      	movs	r1, #128	@ 0x80
 80011de:	0049      	lsls	r1, r1, #1
 80011e0:	430a      	orrs	r2, r1
 80011e2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011e4:	f7ff fb62 	bl	80008ac <HAL_GetTick>
 80011e8:	0003      	movs	r3, r0
 80011ea:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ee:	f7ff fb5d 	bl	80008ac <HAL_GetTick>
 80011f2:	0002      	movs	r2, r0
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b64      	cmp	r3, #100	@ 0x64
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e1f5      	b.n	80015ec <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001200:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <HAL_RCC_OscConfig+0x344>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	2380      	movs	r3, #128	@ 0x80
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4013      	ands	r3, r2
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d10f      	bne.n	8001234 <HAL_RCC_OscConfig+0x348>
 8001214:	4b03      	ldr	r3, [pc, #12]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 8001216:	6a1a      	ldr	r2, [r3, #32]
 8001218:	4b02      	ldr	r3, [pc, #8]	@ (8001224 <HAL_RCC_OscConfig+0x338>)
 800121a:	2101      	movs	r1, #1
 800121c:	430a      	orrs	r2, r1
 800121e:	621a      	str	r2, [r3, #32]
 8001220:	e036      	b.n	8001290 <HAL_RCC_OscConfig+0x3a4>
 8001222:	46c0      	nop			@ (mov r8, r8)
 8001224:	40021000 	.word	0x40021000
 8001228:	fffeffff 	.word	0xfffeffff
 800122c:	fffbffff 	.word	0xfffbffff
 8001230:	40007000 	.word	0x40007000
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d10c      	bne.n	8001256 <HAL_RCC_OscConfig+0x36a>
 800123c:	4bca      	ldr	r3, [pc, #808]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 800123e:	6a1a      	ldr	r2, [r3, #32]
 8001240:	4bc9      	ldr	r3, [pc, #804]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001242:	2101      	movs	r1, #1
 8001244:	438a      	bics	r2, r1
 8001246:	621a      	str	r2, [r3, #32]
 8001248:	4bc7      	ldr	r3, [pc, #796]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 800124a:	6a1a      	ldr	r2, [r3, #32]
 800124c:	4bc6      	ldr	r3, [pc, #792]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 800124e:	2104      	movs	r1, #4
 8001250:	438a      	bics	r2, r1
 8001252:	621a      	str	r2, [r3, #32]
 8001254:	e01c      	b.n	8001290 <HAL_RCC_OscConfig+0x3a4>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	2b05      	cmp	r3, #5
 800125c:	d10c      	bne.n	8001278 <HAL_RCC_OscConfig+0x38c>
 800125e:	4bc2      	ldr	r3, [pc, #776]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001260:	6a1a      	ldr	r2, [r3, #32]
 8001262:	4bc1      	ldr	r3, [pc, #772]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001264:	2104      	movs	r1, #4
 8001266:	430a      	orrs	r2, r1
 8001268:	621a      	str	r2, [r3, #32]
 800126a:	4bbf      	ldr	r3, [pc, #764]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 800126c:	6a1a      	ldr	r2, [r3, #32]
 800126e:	4bbe      	ldr	r3, [pc, #760]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001270:	2101      	movs	r1, #1
 8001272:	430a      	orrs	r2, r1
 8001274:	621a      	str	r2, [r3, #32]
 8001276:	e00b      	b.n	8001290 <HAL_RCC_OscConfig+0x3a4>
 8001278:	4bbb      	ldr	r3, [pc, #748]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 800127a:	6a1a      	ldr	r2, [r3, #32]
 800127c:	4bba      	ldr	r3, [pc, #744]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 800127e:	2101      	movs	r1, #1
 8001280:	438a      	bics	r2, r1
 8001282:	621a      	str	r2, [r3, #32]
 8001284:	4bb8      	ldr	r3, [pc, #736]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001286:	6a1a      	ldr	r2, [r3, #32]
 8001288:	4bb7      	ldr	r3, [pc, #732]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 800128a:	2104      	movs	r1, #4
 800128c:	438a      	bics	r2, r1
 800128e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d014      	beq.n	80012c2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001298:	f7ff fb08 	bl	80008ac <HAL_GetTick>
 800129c:	0003      	movs	r3, r0
 800129e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a0:	e009      	b.n	80012b6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a2:	f7ff fb03 	bl	80008ac <HAL_GetTick>
 80012a6:	0002      	movs	r2, r0
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	4aaf      	ldr	r2, [pc, #700]	@ (800156c <HAL_RCC_OscConfig+0x680>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e19a      	b.n	80015ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b6:	4bac      	ldr	r3, [pc, #688]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	2202      	movs	r2, #2
 80012bc:	4013      	ands	r3, r2
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x3b6>
 80012c0:	e013      	b.n	80012ea <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c2:	f7ff faf3 	bl	80008ac <HAL_GetTick>
 80012c6:	0003      	movs	r3, r0
 80012c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ca:	e009      	b.n	80012e0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012cc:	f7ff faee 	bl	80008ac <HAL_GetTick>
 80012d0:	0002      	movs	r2, r0
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	4aa5      	ldr	r2, [pc, #660]	@ (800156c <HAL_RCC_OscConfig+0x680>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e185      	b.n	80015ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e0:	4ba1      	ldr	r3, [pc, #644]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	2202      	movs	r2, #2
 80012e6:	4013      	ands	r3, r2
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012ea:	231f      	movs	r3, #31
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d105      	bne.n	8001300 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f4:	4b9c      	ldr	r3, [pc, #624]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 80012f6:	69da      	ldr	r2, [r3, #28]
 80012f8:	4b9b      	ldr	r3, [pc, #620]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 80012fa:	499d      	ldr	r1, [pc, #628]	@ (8001570 <HAL_RCC_OscConfig+0x684>)
 80012fc:	400a      	ands	r2, r1
 80012fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2210      	movs	r2, #16
 8001306:	4013      	ands	r3, r2
 8001308:	d063      	beq.n	80013d2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d12a      	bne.n	8001368 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001312:	4b95      	ldr	r3, [pc, #596]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001314:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001316:	4b94      	ldr	r3, [pc, #592]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001318:	2104      	movs	r1, #4
 800131a:	430a      	orrs	r2, r1
 800131c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800131e:	4b92      	ldr	r3, [pc, #584]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001320:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001322:	4b91      	ldr	r3, [pc, #580]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001324:	2101      	movs	r1, #1
 8001326:	430a      	orrs	r2, r1
 8001328:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132a:	f7ff fabf 	bl	80008ac <HAL_GetTick>
 800132e:	0003      	movs	r3, r0
 8001330:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001334:	f7ff faba 	bl	80008ac <HAL_GetTick>
 8001338:	0002      	movs	r2, r0
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e152      	b.n	80015ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001346:	4b88      	ldr	r3, [pc, #544]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800134a:	2202      	movs	r2, #2
 800134c:	4013      	ands	r3, r2
 800134e:	d0f1      	beq.n	8001334 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001350:	4b85      	ldr	r3, [pc, #532]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001354:	22f8      	movs	r2, #248	@ 0xf8
 8001356:	4393      	bics	r3, r2
 8001358:	0019      	movs	r1, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	00da      	lsls	r2, r3, #3
 8001360:	4b81      	ldr	r3, [pc, #516]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001362:	430a      	orrs	r2, r1
 8001364:	635a      	str	r2, [r3, #52]	@ 0x34
 8001366:	e034      	b.n	80013d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	3305      	adds	r3, #5
 800136e:	d111      	bne.n	8001394 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001370:	4b7d      	ldr	r3, [pc, #500]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001372:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001374:	4b7c      	ldr	r3, [pc, #496]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001376:	2104      	movs	r1, #4
 8001378:	438a      	bics	r2, r1
 800137a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800137c:	4b7a      	ldr	r3, [pc, #488]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 800137e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001380:	22f8      	movs	r2, #248	@ 0xf8
 8001382:	4393      	bics	r3, r2
 8001384:	0019      	movs	r1, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	00da      	lsls	r2, r3, #3
 800138c:	4b76      	ldr	r3, [pc, #472]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 800138e:	430a      	orrs	r2, r1
 8001390:	635a      	str	r2, [r3, #52]	@ 0x34
 8001392:	e01e      	b.n	80013d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001394:	4b74      	ldr	r3, [pc, #464]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001396:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001398:	4b73      	ldr	r3, [pc, #460]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 800139a:	2104      	movs	r1, #4
 800139c:	430a      	orrs	r2, r1
 800139e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80013a0:	4b71      	ldr	r3, [pc, #452]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 80013a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013a4:	4b70      	ldr	r3, [pc, #448]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 80013a6:	2101      	movs	r1, #1
 80013a8:	438a      	bics	r2, r1
 80013aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ac:	f7ff fa7e 	bl	80008ac <HAL_GetTick>
 80013b0:	0003      	movs	r3, r0
 80013b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013b6:	f7ff fa79 	bl	80008ac <HAL_GetTick>
 80013ba:	0002      	movs	r2, r0
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e111      	b.n	80015ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013c8:	4b67      	ldr	r3, [pc, #412]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 80013ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013cc:	2202      	movs	r2, #2
 80013ce:	4013      	ands	r3, r2
 80013d0:	d1f1      	bne.n	80013b6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2220      	movs	r2, #32
 80013d8:	4013      	ands	r3, r2
 80013da:	d05c      	beq.n	8001496 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80013dc:	4b62      	ldr	r3, [pc, #392]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	220c      	movs	r2, #12
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b0c      	cmp	r3, #12
 80013e6:	d00e      	beq.n	8001406 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80013e8:	4b5f      	ldr	r3, [pc, #380]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	220c      	movs	r2, #12
 80013ee:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	d114      	bne.n	800141e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80013f4:	4b5c      	ldr	r3, [pc, #368]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	23c0      	movs	r3, #192	@ 0xc0
 80013fa:	025b      	lsls	r3, r3, #9
 80013fc:	401a      	ands	r2, r3
 80013fe:	23c0      	movs	r3, #192	@ 0xc0
 8001400:	025b      	lsls	r3, r3, #9
 8001402:	429a      	cmp	r2, r3
 8001404:	d10b      	bne.n	800141e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001406:	4b58      	ldr	r3, [pc, #352]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001408:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800140a:	2380      	movs	r3, #128	@ 0x80
 800140c:	029b      	lsls	r3, r3, #10
 800140e:	4013      	ands	r3, r2
 8001410:	d040      	beq.n	8001494 <HAL_RCC_OscConfig+0x5a8>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d03c      	beq.n	8001494 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e0e6      	b.n	80015ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d01b      	beq.n	800145e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001426:	4b50      	ldr	r3, [pc, #320]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001428:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800142a:	4b4f      	ldr	r3, [pc, #316]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 800142c:	2180      	movs	r1, #128	@ 0x80
 800142e:	0249      	lsls	r1, r1, #9
 8001430:	430a      	orrs	r2, r1
 8001432:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff fa3a 	bl	80008ac <HAL_GetTick>
 8001438:	0003      	movs	r3, r0
 800143a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800143e:	f7ff fa35 	bl	80008ac <HAL_GetTick>
 8001442:	0002      	movs	r2, r0
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e0cd      	b.n	80015ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001450:	4b45      	ldr	r3, [pc, #276]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001452:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001454:	2380      	movs	r3, #128	@ 0x80
 8001456:	029b      	lsls	r3, r3, #10
 8001458:	4013      	ands	r3, r2
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x552>
 800145c:	e01b      	b.n	8001496 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800145e:	4b42      	ldr	r3, [pc, #264]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001460:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001462:	4b41      	ldr	r3, [pc, #260]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001464:	4943      	ldr	r1, [pc, #268]	@ (8001574 <HAL_RCC_OscConfig+0x688>)
 8001466:	400a      	ands	r2, r1
 8001468:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146a:	f7ff fa1f 	bl	80008ac <HAL_GetTick>
 800146e:	0003      	movs	r3, r0
 8001470:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001474:	f7ff fa1a 	bl	80008ac <HAL_GetTick>
 8001478:	0002      	movs	r2, r0
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e0b2      	b.n	80015ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001486:	4b38      	ldr	r3, [pc, #224]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001488:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800148a:	2380      	movs	r3, #128	@ 0x80
 800148c:	029b      	lsls	r3, r3, #10
 800148e:	4013      	ands	r3, r2
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x588>
 8001492:	e000      	b.n	8001496 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001494:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149a:	2b00      	cmp	r3, #0
 800149c:	d100      	bne.n	80014a0 <HAL_RCC_OscConfig+0x5b4>
 800149e:	e0a4      	b.n	80015ea <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014a0:	4b31      	ldr	r3, [pc, #196]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	220c      	movs	r2, #12
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b08      	cmp	r3, #8
 80014aa:	d100      	bne.n	80014ae <HAL_RCC_OscConfig+0x5c2>
 80014ac:	e078      	b.n	80015a0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d14c      	bne.n	8001550 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 80014bc:	492e      	ldr	r1, [pc, #184]	@ (8001578 <HAL_RCC_OscConfig+0x68c>)
 80014be:	400a      	ands	r2, r1
 80014c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c2:	f7ff f9f3 	bl	80008ac <HAL_GetTick>
 80014c6:	0003      	movs	r3, r0
 80014c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014cc:	f7ff f9ee 	bl	80008ac <HAL_GetTick>
 80014d0:	0002      	movs	r2, r0
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e086      	b.n	80015ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014de:	4b22      	ldr	r3, [pc, #136]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	2380      	movs	r3, #128	@ 0x80
 80014e4:	049b      	lsls	r3, r3, #18
 80014e6:	4013      	ands	r3, r2
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 80014ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ee:	220f      	movs	r2, #15
 80014f0:	4393      	bics	r3, r2
 80014f2:	0019      	movs	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 80014fa:	430a      	orrs	r2, r1
 80014fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4a1e      	ldr	r2, [pc, #120]	@ (800157c <HAL_RCC_OscConfig+0x690>)
 8001504:	4013      	ands	r3, r2
 8001506:	0019      	movs	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001510:	431a      	orrs	r2, r3
 8001512:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001514:	430a      	orrs	r2, r1
 8001516:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001518:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 800151e:	2180      	movs	r1, #128	@ 0x80
 8001520:	0449      	lsls	r1, r1, #17
 8001522:	430a      	orrs	r2, r1
 8001524:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001526:	f7ff f9c1 	bl	80008ac <HAL_GetTick>
 800152a:	0003      	movs	r3, r0
 800152c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001530:	f7ff f9bc 	bl	80008ac <HAL_GetTick>
 8001534:	0002      	movs	r2, r0
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e054      	b.n	80015ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001542:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	2380      	movs	r3, #128	@ 0x80
 8001548:	049b      	lsls	r3, r3, #18
 800154a:	4013      	ands	r3, r2
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0x644>
 800154e:	e04c      	b.n	80015ea <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001550:	4b05      	ldr	r3, [pc, #20]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b04      	ldr	r3, [pc, #16]	@ (8001568 <HAL_RCC_OscConfig+0x67c>)
 8001556:	4908      	ldr	r1, [pc, #32]	@ (8001578 <HAL_RCC_OscConfig+0x68c>)
 8001558:	400a      	ands	r2, r1
 800155a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff f9a6 	bl	80008ac <HAL_GetTick>
 8001560:	0003      	movs	r3, r0
 8001562:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001564:	e015      	b.n	8001592 <HAL_RCC_OscConfig+0x6a6>
 8001566:	46c0      	nop			@ (mov r8, r8)
 8001568:	40021000 	.word	0x40021000
 800156c:	00001388 	.word	0x00001388
 8001570:	efffffff 	.word	0xefffffff
 8001574:	fffeffff 	.word	0xfffeffff
 8001578:	feffffff 	.word	0xfeffffff
 800157c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001580:	f7ff f994 	bl	80008ac <HAL_GetTick>
 8001584:	0002      	movs	r2, r0
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e02c      	b.n	80015ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001592:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <HAL_RCC_OscConfig+0x708>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	2380      	movs	r3, #128	@ 0x80
 8001598:	049b      	lsls	r3, r3, #18
 800159a:	4013      	ands	r3, r2
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x694>
 800159e:	e024      	b.n	80015ea <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e01f      	b.n	80015ec <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80015ac:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <HAL_RCC_OscConfig+0x708>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80015b2:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <HAL_RCC_OscConfig+0x708>)
 80015b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	23c0      	movs	r3, #192	@ 0xc0
 80015bc:	025b      	lsls	r3, r3, #9
 80015be:	401a      	ands	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d10e      	bne.n	80015e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	220f      	movs	r2, #15
 80015cc:	401a      	ands	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d107      	bne.n	80015e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	23f0      	movs	r3, #240	@ 0xf0
 80015da:	039b      	lsls	r3, r3, #14
 80015dc:	401a      	ands	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d001      	beq.n	80015ea <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	0018      	movs	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b008      	add	sp, #32
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40021000 	.word	0x40021000

080015f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e0bf      	b.n	800178c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800160c:	4b61      	ldr	r3, [pc, #388]	@ (8001794 <HAL_RCC_ClockConfig+0x19c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2201      	movs	r2, #1
 8001612:	4013      	ands	r3, r2
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d911      	bls.n	800163e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161a:	4b5e      	ldr	r3, [pc, #376]	@ (8001794 <HAL_RCC_ClockConfig+0x19c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2201      	movs	r2, #1
 8001620:	4393      	bics	r3, r2
 8001622:	0019      	movs	r1, r3
 8001624:	4b5b      	ldr	r3, [pc, #364]	@ (8001794 <HAL_RCC_ClockConfig+0x19c>)
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800162c:	4b59      	ldr	r3, [pc, #356]	@ (8001794 <HAL_RCC_ClockConfig+0x19c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2201      	movs	r2, #1
 8001632:	4013      	ands	r3, r2
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d001      	beq.n	800163e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e0a6      	b.n	800178c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2202      	movs	r2, #2
 8001644:	4013      	ands	r3, r2
 8001646:	d015      	beq.n	8001674 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2204      	movs	r2, #4
 800164e:	4013      	ands	r3, r2
 8001650:	d006      	beq.n	8001660 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001652:	4b51      	ldr	r3, [pc, #324]	@ (8001798 <HAL_RCC_ClockConfig+0x1a0>)
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	4b50      	ldr	r3, [pc, #320]	@ (8001798 <HAL_RCC_ClockConfig+0x1a0>)
 8001658:	21e0      	movs	r1, #224	@ 0xe0
 800165a:	00c9      	lsls	r1, r1, #3
 800165c:	430a      	orrs	r2, r1
 800165e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001660:	4b4d      	ldr	r3, [pc, #308]	@ (8001798 <HAL_RCC_ClockConfig+0x1a0>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	22f0      	movs	r2, #240	@ 0xf0
 8001666:	4393      	bics	r3, r2
 8001668:	0019      	movs	r1, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	4b4a      	ldr	r3, [pc, #296]	@ (8001798 <HAL_RCC_ClockConfig+0x1a0>)
 8001670:	430a      	orrs	r2, r1
 8001672:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2201      	movs	r2, #1
 800167a:	4013      	ands	r3, r2
 800167c:	d04c      	beq.n	8001718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d107      	bne.n	8001696 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001686:	4b44      	ldr	r3, [pc, #272]	@ (8001798 <HAL_RCC_ClockConfig+0x1a0>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	2380      	movs	r3, #128	@ 0x80
 800168c:	029b      	lsls	r3, r3, #10
 800168e:	4013      	ands	r3, r2
 8001690:	d120      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e07a      	b.n	800178c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169e:	4b3e      	ldr	r3, [pc, #248]	@ (8001798 <HAL_RCC_ClockConfig+0x1a0>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	2380      	movs	r3, #128	@ 0x80
 80016a4:	049b      	lsls	r3, r3, #18
 80016a6:	4013      	ands	r3, r2
 80016a8:	d114      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e06e      	b.n	800178c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d107      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80016b6:	4b38      	ldr	r3, [pc, #224]	@ (8001798 <HAL_RCC_ClockConfig+0x1a0>)
 80016b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016ba:	2380      	movs	r3, #128	@ 0x80
 80016bc:	029b      	lsls	r3, r3, #10
 80016be:	4013      	ands	r3, r2
 80016c0:	d108      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e062      	b.n	800178c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c6:	4b34      	ldr	r3, [pc, #208]	@ (8001798 <HAL_RCC_ClockConfig+0x1a0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2202      	movs	r2, #2
 80016cc:	4013      	ands	r3, r2
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e05b      	b.n	800178c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016d4:	4b30      	ldr	r3, [pc, #192]	@ (8001798 <HAL_RCC_ClockConfig+0x1a0>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2203      	movs	r2, #3
 80016da:	4393      	bics	r3, r2
 80016dc:	0019      	movs	r1, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001798 <HAL_RCC_ClockConfig+0x1a0>)
 80016e4:	430a      	orrs	r2, r1
 80016e6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e8:	f7ff f8e0 	bl	80008ac <HAL_GetTick>
 80016ec:	0003      	movs	r3, r0
 80016ee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f0:	e009      	b.n	8001706 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f2:	f7ff f8db 	bl	80008ac <HAL_GetTick>
 80016f6:	0002      	movs	r2, r0
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	4a27      	ldr	r2, [pc, #156]	@ (800179c <HAL_RCC_ClockConfig+0x1a4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e042      	b.n	800178c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001706:	4b24      	ldr	r3, [pc, #144]	@ (8001798 <HAL_RCC_ClockConfig+0x1a0>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	220c      	movs	r2, #12
 800170c:	401a      	ands	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	429a      	cmp	r2, r3
 8001716:	d1ec      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001718:	4b1e      	ldr	r3, [pc, #120]	@ (8001794 <HAL_RCC_ClockConfig+0x19c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2201      	movs	r2, #1
 800171e:	4013      	ands	r3, r2
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d211      	bcs.n	800174a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001726:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <HAL_RCC_ClockConfig+0x19c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2201      	movs	r2, #1
 800172c:	4393      	bics	r3, r2
 800172e:	0019      	movs	r1, r3
 8001730:	4b18      	ldr	r3, [pc, #96]	@ (8001794 <HAL_RCC_ClockConfig+0x19c>)
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001738:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <HAL_RCC_ClockConfig+0x19c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2201      	movs	r2, #1
 800173e:	4013      	ands	r3, r2
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d001      	beq.n	800174a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e020      	b.n	800178c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2204      	movs	r2, #4
 8001750:	4013      	ands	r3, r2
 8001752:	d009      	beq.n	8001768 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001754:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <HAL_RCC_ClockConfig+0x1a0>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	4a11      	ldr	r2, [pc, #68]	@ (80017a0 <HAL_RCC_ClockConfig+0x1a8>)
 800175a:	4013      	ands	r3, r2
 800175c:	0019      	movs	r1, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	4b0d      	ldr	r3, [pc, #52]	@ (8001798 <HAL_RCC_ClockConfig+0x1a0>)
 8001764:	430a      	orrs	r2, r1
 8001766:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001768:	f000 f820 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 800176c:	0001      	movs	r1, r0
 800176e:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <HAL_RCC_ClockConfig+0x1a0>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	220f      	movs	r2, #15
 8001776:	4013      	ands	r3, r2
 8001778:	4a0a      	ldr	r2, [pc, #40]	@ (80017a4 <HAL_RCC_ClockConfig+0x1ac>)
 800177a:	5cd3      	ldrb	r3, [r2, r3]
 800177c:	000a      	movs	r2, r1
 800177e:	40da      	lsrs	r2, r3
 8001780:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <HAL_RCC_ClockConfig+0x1b0>)
 8001782:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001784:	2003      	movs	r0, #3
 8001786:	f7ff f84b 	bl	8000820 <HAL_InitTick>
  
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b004      	add	sp, #16
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40022000 	.word	0x40022000
 8001798:	40021000 	.word	0x40021000
 800179c:	00001388 	.word	0x00001388
 80017a0:	fffff8ff 	.word	0xfffff8ff
 80017a4:	080033f0 	.word	0x080033f0
 80017a8:	20000000 	.word	0x20000000

080017ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80017c6:	4b2d      	ldr	r3, [pc, #180]	@ (800187c <HAL_RCC_GetSysClockFreq+0xd0>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	220c      	movs	r2, #12
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b0c      	cmp	r3, #12
 80017d4:	d046      	beq.n	8001864 <HAL_RCC_GetSysClockFreq+0xb8>
 80017d6:	d848      	bhi.n	800186a <HAL_RCC_GetSysClockFreq+0xbe>
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d002      	beq.n	80017e2 <HAL_RCC_GetSysClockFreq+0x36>
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d003      	beq.n	80017e8 <HAL_RCC_GetSysClockFreq+0x3c>
 80017e0:	e043      	b.n	800186a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017e2:	4b27      	ldr	r3, [pc, #156]	@ (8001880 <HAL_RCC_GetSysClockFreq+0xd4>)
 80017e4:	613b      	str	r3, [r7, #16]
      break;
 80017e6:	e043      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	0c9b      	lsrs	r3, r3, #18
 80017ec:	220f      	movs	r2, #15
 80017ee:	4013      	ands	r3, r2
 80017f0:	4a24      	ldr	r2, [pc, #144]	@ (8001884 <HAL_RCC_GetSysClockFreq+0xd8>)
 80017f2:	5cd3      	ldrb	r3, [r2, r3]
 80017f4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80017f6:	4b21      	ldr	r3, [pc, #132]	@ (800187c <HAL_RCC_GetSysClockFreq+0xd0>)
 80017f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fa:	220f      	movs	r2, #15
 80017fc:	4013      	ands	r3, r2
 80017fe:	4a22      	ldr	r2, [pc, #136]	@ (8001888 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001800:	5cd3      	ldrb	r3, [r2, r3]
 8001802:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	23c0      	movs	r3, #192	@ 0xc0
 8001808:	025b      	lsls	r3, r3, #9
 800180a:	401a      	ands	r2, r3
 800180c:	2380      	movs	r3, #128	@ 0x80
 800180e:	025b      	lsls	r3, r3, #9
 8001810:	429a      	cmp	r2, r3
 8001812:	d109      	bne.n	8001828 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	481a      	ldr	r0, [pc, #104]	@ (8001880 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001818:	f7fe fc88 	bl	800012c <__udivsi3>
 800181c:	0003      	movs	r3, r0
 800181e:	001a      	movs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4353      	muls	r3, r2
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e01a      	b.n	800185e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	23c0      	movs	r3, #192	@ 0xc0
 800182c:	025b      	lsls	r3, r3, #9
 800182e:	401a      	ands	r2, r3
 8001830:	23c0      	movs	r3, #192	@ 0xc0
 8001832:	025b      	lsls	r3, r3, #9
 8001834:	429a      	cmp	r2, r3
 8001836:	d109      	bne.n	800184c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	4814      	ldr	r0, [pc, #80]	@ (800188c <HAL_RCC_GetSysClockFreq+0xe0>)
 800183c:	f7fe fc76 	bl	800012c <__udivsi3>
 8001840:	0003      	movs	r3, r0
 8001842:	001a      	movs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4353      	muls	r3, r2
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	e008      	b.n	800185e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	480c      	ldr	r0, [pc, #48]	@ (8001880 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001850:	f7fe fc6c 	bl	800012c <__udivsi3>
 8001854:	0003      	movs	r3, r0
 8001856:	001a      	movs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4353      	muls	r3, r2
 800185c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	613b      	str	r3, [r7, #16]
      break;
 8001862:	e005      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001864:	4b09      	ldr	r3, [pc, #36]	@ (800188c <HAL_RCC_GetSysClockFreq+0xe0>)
 8001866:	613b      	str	r3, [r7, #16]
      break;
 8001868:	e002      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800186a:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <HAL_RCC_GetSysClockFreq+0xd4>)
 800186c:	613b      	str	r3, [r7, #16]
      break;
 800186e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001870:	693b      	ldr	r3, [r7, #16]
}
 8001872:	0018      	movs	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	b006      	add	sp, #24
 8001878:	bd80      	pop	{r7, pc}
 800187a:	46c0      	nop			@ (mov r8, r8)
 800187c:	40021000 	.word	0x40021000
 8001880:	007a1200 	.word	0x007a1200
 8001884:	08003408 	.word	0x08003408
 8001888:	08003418 	.word	0x08003418
 800188c:	02dc6c00 	.word	0x02dc6c00

08001890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001894:	4b02      	ldr	r3, [pc, #8]	@ (80018a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	0018      	movs	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	46c0      	nop			@ (mov r8, r8)
 80018a0:	20000000 	.word	0x20000000

080018a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80018a8:	f7ff fff2 	bl	8001890 <HAL_RCC_GetHCLKFreq>
 80018ac:	0001      	movs	r1, r0
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	0a1b      	lsrs	r3, r3, #8
 80018b4:	2207      	movs	r2, #7
 80018b6:	4013      	ands	r3, r2
 80018b8:	4a04      	ldr	r2, [pc, #16]	@ (80018cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80018ba:	5cd3      	ldrb	r3, [r2, r3]
 80018bc:	40d9      	lsrs	r1, r3
 80018be:	000b      	movs	r3, r1
}    
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	40021000 	.word	0x40021000
 80018cc:	08003400 	.word	0x08003400

080018d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e044      	b.n	800196c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d107      	bne.n	80018fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2278      	movs	r2, #120	@ 0x78
 80018ee:	2100      	movs	r1, #0
 80018f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7fe fe9d 	bl	8000634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2224      	movs	r2, #36	@ 0x24
 80018fe:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2101      	movs	r1, #1
 800190c:	438a      	bics	r2, r1
 800190e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	0018      	movs	r0, r3
 800191c:	f000 fe38 	bl	8002590 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	0018      	movs	r0, r3
 8001924:	f000 fcac 	bl	8002280 <UART_SetConfig>
 8001928:	0003      	movs	r3, r0
 800192a:	2b01      	cmp	r3, #1
 800192c:	d101      	bne.n	8001932 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e01c      	b.n	800196c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	490d      	ldr	r1, [pc, #52]	@ (8001974 <HAL_UART_Init+0xa4>)
 800193e:	400a      	ands	r2, r1
 8001940:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	212a      	movs	r1, #42	@ 0x2a
 800194e:	438a      	bics	r2, r1
 8001950:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2101      	movs	r1, #1
 800195e:	430a      	orrs	r2, r1
 8001960:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	0018      	movs	r0, r3
 8001966:	f000 fec7 	bl	80026f8 <UART_CheckIdleState>
 800196a:	0003      	movs	r3, r0
}
 800196c:	0018      	movs	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	b002      	add	sp, #8
 8001972:	bd80      	pop	{r7, pc}
 8001974:	ffffb7ff 	.word	0xffffb7ff

08001978 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	@ 0x28
 800197c:	af02      	add	r7, sp, #8
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	1dbb      	adds	r3, r7, #6
 8001986:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800198c:	2b20      	cmp	r3, #32
 800198e:	d000      	beq.n	8001992 <HAL_UART_Transmit+0x1a>
 8001990:	e08c      	b.n	8001aac <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_UART_Transmit+0x28>
 8001998:	1dbb      	adds	r3, r7, #6
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e084      	b.n	8001aae <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	2380      	movs	r3, #128	@ 0x80
 80019aa:	015b      	lsls	r3, r3, #5
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d109      	bne.n	80019c4 <HAL_UART_Transmit+0x4c>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d105      	bne.n	80019c4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	2201      	movs	r2, #1
 80019bc:	4013      	ands	r3, r2
 80019be:	d001      	beq.n	80019c4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e074      	b.n	8001aae <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2284      	movs	r2, #132	@ 0x84
 80019c8:	2100      	movs	r1, #0
 80019ca:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2221      	movs	r2, #33	@ 0x21
 80019d0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019d2:	f7fe ff6b 	bl	80008ac <HAL_GetTick>
 80019d6:	0003      	movs	r3, r0
 80019d8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1dba      	adds	r2, r7, #6
 80019de:	2150      	movs	r1, #80	@ 0x50
 80019e0:	8812      	ldrh	r2, [r2, #0]
 80019e2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	1dba      	adds	r2, r7, #6
 80019e8:	2152      	movs	r1, #82	@ 0x52
 80019ea:	8812      	ldrh	r2, [r2, #0]
 80019ec:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	2380      	movs	r3, #128	@ 0x80
 80019f4:	015b      	lsls	r3, r3, #5
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d108      	bne.n	8001a0c <HAL_UART_Transmit+0x94>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d104      	bne.n	8001a0c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	e003      	b.n	8001a14 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001a14:	e02f      	b.n	8001a76 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	0013      	movs	r3, r2
 8001a20:	2200      	movs	r2, #0
 8001a22:	2180      	movs	r1, #128	@ 0x80
 8001a24:	f000 ff10 	bl	8002848 <UART_WaitOnFlagUntilTimeout>
 8001a28:	1e03      	subs	r3, r0, #0
 8001a2a:	d004      	beq.n	8001a36 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2220      	movs	r2, #32
 8001a30:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e03b      	b.n	8001aae <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10b      	bne.n	8001a54 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	881a      	ldrh	r2, [r3, #0]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	05d2      	lsls	r2, r2, #23
 8001a46:	0dd2      	lsrs	r2, r2, #23
 8001a48:	b292      	uxth	r2, r2
 8001a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	3302      	adds	r3, #2
 8001a50:	61bb      	str	r3, [r7, #24]
 8001a52:	e007      	b.n	8001a64 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	781a      	ldrb	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3301      	adds	r3, #1
 8001a62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2252      	movs	r2, #82	@ 0x52
 8001a68:	5a9b      	ldrh	r3, [r3, r2]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	b299      	uxth	r1, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2252      	movs	r2, #82	@ 0x52
 8001a74:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2252      	movs	r2, #82	@ 0x52
 8001a7a:	5a9b      	ldrh	r3, [r3, r2]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1c9      	bne.n	8001a16 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	0013      	movs	r3, r2
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2140      	movs	r1, #64	@ 0x40
 8001a90:	f000 feda 	bl	8002848 <UART_WaitOnFlagUntilTimeout>
 8001a94:	1e03      	subs	r3, r0, #0
 8001a96:	d004      	beq.n	8001aa2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e005      	b.n	8001aae <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	e000      	b.n	8001aae <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8001aac:	2302      	movs	r3, #2
  }
}
 8001aae:	0018      	movs	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b008      	add	sp, #32
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	@ 0x28
 8001abc:	af02      	add	r7, sp, #8
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	1dbb      	adds	r3, r7, #6
 8001ac6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2280      	movs	r2, #128	@ 0x80
 8001acc:	589b      	ldr	r3, [r3, r2]
 8001ace:	2b20      	cmp	r3, #32
 8001ad0:	d000      	beq.n	8001ad4 <HAL_UART_Receive+0x1c>
 8001ad2:	e0d1      	b.n	8001c78 <HAL_UART_Receive+0x1c0>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_UART_Receive+0x2a>
 8001ada:	1dbb      	adds	r3, r7, #6
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e0c9      	b.n	8001c7a <HAL_UART_Receive+0x1c2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	2380      	movs	r3, #128	@ 0x80
 8001aec:	015b      	lsls	r3, r3, #5
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d109      	bne.n	8001b06 <HAL_UART_Receive+0x4e>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d105      	bne.n	8001b06 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2201      	movs	r2, #1
 8001afe:	4013      	ands	r3, r2
 8001b00:	d001      	beq.n	8001b06 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e0b9      	b.n	8001c7a <HAL_UART_Receive+0x1c2>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2284      	movs	r2, #132	@ 0x84
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2280      	movs	r2, #128	@ 0x80
 8001b12:	2122      	movs	r1, #34	@ 0x22
 8001b14:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b1c:	f7fe fec6 	bl	80008ac <HAL_GetTick>
 8001b20:	0003      	movs	r3, r0
 8001b22:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1dba      	adds	r2, r7, #6
 8001b28:	2158      	movs	r1, #88	@ 0x58
 8001b2a:	8812      	ldrh	r2, [r2, #0]
 8001b2c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	1dba      	adds	r2, r7, #6
 8001b32:	215a      	movs	r1, #90	@ 0x5a
 8001b34:	8812      	ldrh	r2, [r2, #0]
 8001b36:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	2380      	movs	r3, #128	@ 0x80
 8001b3e:	015b      	lsls	r3, r3, #5
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d10d      	bne.n	8001b60 <HAL_UART_Receive+0xa8>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d104      	bne.n	8001b56 <HAL_UART_Receive+0x9e>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	225c      	movs	r2, #92	@ 0x5c
 8001b50:	494c      	ldr	r1, [pc, #304]	@ (8001c84 <HAL_UART_Receive+0x1cc>)
 8001b52:	5299      	strh	r1, [r3, r2]
 8001b54:	e02e      	b.n	8001bb4 <HAL_UART_Receive+0xfc>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	225c      	movs	r2, #92	@ 0x5c
 8001b5a:	21ff      	movs	r1, #255	@ 0xff
 8001b5c:	5299      	strh	r1, [r3, r2]
 8001b5e:	e029      	b.n	8001bb4 <HAL_UART_Receive+0xfc>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10d      	bne.n	8001b84 <HAL_UART_Receive+0xcc>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d104      	bne.n	8001b7a <HAL_UART_Receive+0xc2>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	225c      	movs	r2, #92	@ 0x5c
 8001b74:	21ff      	movs	r1, #255	@ 0xff
 8001b76:	5299      	strh	r1, [r3, r2]
 8001b78:	e01c      	b.n	8001bb4 <HAL_UART_Receive+0xfc>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	225c      	movs	r2, #92	@ 0x5c
 8001b7e:	217f      	movs	r1, #127	@ 0x7f
 8001b80:	5299      	strh	r1, [r3, r2]
 8001b82:	e017      	b.n	8001bb4 <HAL_UART_Receive+0xfc>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	2380      	movs	r3, #128	@ 0x80
 8001b8a:	055b      	lsls	r3, r3, #21
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d10d      	bne.n	8001bac <HAL_UART_Receive+0xf4>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d104      	bne.n	8001ba2 <HAL_UART_Receive+0xea>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	225c      	movs	r2, #92	@ 0x5c
 8001b9c:	217f      	movs	r1, #127	@ 0x7f
 8001b9e:	5299      	strh	r1, [r3, r2]
 8001ba0:	e008      	b.n	8001bb4 <HAL_UART_Receive+0xfc>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	225c      	movs	r2, #92	@ 0x5c
 8001ba6:	213f      	movs	r1, #63	@ 0x3f
 8001ba8:	5299      	strh	r1, [r3, r2]
 8001baa:	e003      	b.n	8001bb4 <HAL_UART_Receive+0xfc>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	225c      	movs	r2, #92	@ 0x5c
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8001bb4:	2312      	movs	r3, #18
 8001bb6:	18fb      	adds	r3, r7, r3
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	215c      	movs	r1, #92	@ 0x5c
 8001bbc:	5a52      	ldrh	r2, [r2, r1]
 8001bbe:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	2380      	movs	r3, #128	@ 0x80
 8001bc6:	015b      	lsls	r3, r3, #5
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d108      	bne.n	8001bde <HAL_UART_Receive+0x126>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d104      	bne.n	8001bde <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	e003      	b.n	8001be6 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8001be6:	e03b      	b.n	8001c60 <HAL_UART_Receive+0x1a8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	0013      	movs	r3, r2
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2120      	movs	r1, #32
 8001bf6:	f000 fe27 	bl	8002848 <UART_WaitOnFlagUntilTimeout>
 8001bfa:	1e03      	subs	r3, r0, #0
 8001bfc:	d005      	beq.n	8001c0a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2280      	movs	r2, #128	@ 0x80
 8001c02:	2120      	movs	r1, #32
 8001c04:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e037      	b.n	8001c7a <HAL_UART_Receive+0x1c2>
      }
      if (pdata8bits == NULL)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10e      	bne.n	8001c2e <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	2212      	movs	r2, #18
 8001c1a:	18ba      	adds	r2, r7, r2
 8001c1c:	8812      	ldrh	r2, [r2, #0]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	3302      	adds	r3, #2
 8001c2a:	61bb      	str	r3, [r7, #24]
 8001c2c:	e00f      	b.n	8001c4e <HAL_UART_Receive+0x196>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2212      	movs	r2, #18
 8001c3a:	18ba      	adds	r2, r7, r2
 8001c3c:	8812      	ldrh	r2, [r2, #0]
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	4013      	ands	r3, r2
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	225a      	movs	r2, #90	@ 0x5a
 8001c52:	5a9b      	ldrh	r3, [r3, r2]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b299      	uxth	r1, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	225a      	movs	r2, #90	@ 0x5a
 8001c5e:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	225a      	movs	r2, #90	@ 0x5a
 8001c64:	5a9b      	ldrh	r3, [r3, r2]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1bd      	bne.n	8001be8 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2280      	movs	r2, #128	@ 0x80
 8001c70:	2120      	movs	r1, #32
 8001c72:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e000      	b.n	8001c7a <HAL_UART_Receive+0x1c2>
  }
  else
  {
    return HAL_BUSY;
 8001c78:	2302      	movs	r3, #2
  }
}
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b008      	add	sp, #32
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			@ (mov r8, r8)
 8001c84:	000001ff 	.word	0x000001ff

08001c88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b0ab      	sub	sp, #172	@ 0xac
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	22a4      	movs	r2, #164	@ 0xa4
 8001c98:	18b9      	adds	r1, r7, r2
 8001c9a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	20a0      	movs	r0, #160	@ 0xa0
 8001ca4:	1839      	adds	r1, r7, r0
 8001ca6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	219c      	movs	r1, #156	@ 0x9c
 8001cb0:	1879      	adds	r1, r7, r1
 8001cb2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001cb4:	0011      	movs	r1, r2
 8001cb6:	18bb      	adds	r3, r7, r2
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a99      	ldr	r2, [pc, #612]	@ (8001f20 <HAL_UART_IRQHandler+0x298>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2298      	movs	r2, #152	@ 0x98
 8001cc0:	18bc      	adds	r4, r7, r2
 8001cc2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001cc4:	18bb      	adds	r3, r7, r2
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d114      	bne.n	8001cf6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001ccc:	187b      	adds	r3, r7, r1
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d00f      	beq.n	8001cf6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001cd6:	183b      	adds	r3, r7, r0
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d00a      	beq.n	8001cf6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d100      	bne.n	8001cea <HAL_UART_IRQHandler+0x62>
 8001ce8:	e29e      	b.n	8002228 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	0010      	movs	r0, r2
 8001cf2:	4798      	blx	r3
      }
      return;
 8001cf4:	e298      	b.n	8002228 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001cf6:	2398      	movs	r3, #152	@ 0x98
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d100      	bne.n	8001d02 <HAL_UART_IRQHandler+0x7a>
 8001d00:	e114      	b.n	8001f2c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001d02:	239c      	movs	r3, #156	@ 0x9c
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d106      	bne.n	8001d1c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001d0e:	23a0      	movs	r3, #160	@ 0xa0
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a83      	ldr	r2, [pc, #524]	@ (8001f24 <HAL_UART_IRQHandler+0x29c>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	d100      	bne.n	8001d1c <HAL_UART_IRQHandler+0x94>
 8001d1a:	e107      	b.n	8001f2c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001d1c:	23a4      	movs	r3, #164	@ 0xa4
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2201      	movs	r2, #1
 8001d24:	4013      	ands	r3, r2
 8001d26:	d012      	beq.n	8001d4e <HAL_UART_IRQHandler+0xc6>
 8001d28:	23a0      	movs	r3, #160	@ 0xa0
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	2380      	movs	r3, #128	@ 0x80
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4013      	ands	r3, r2
 8001d34:	d00b      	beq.n	8001d4e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2284      	movs	r2, #132	@ 0x84
 8001d42:	589b      	ldr	r3, [r3, r2]
 8001d44:	2201      	movs	r2, #1
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2184      	movs	r1, #132	@ 0x84
 8001d4c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d4e:	23a4      	movs	r3, #164	@ 0xa4
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2202      	movs	r2, #2
 8001d56:	4013      	ands	r3, r2
 8001d58:	d011      	beq.n	8001d7e <HAL_UART_IRQHandler+0xf6>
 8001d5a:	239c      	movs	r3, #156	@ 0x9c
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2201      	movs	r2, #1
 8001d62:	4013      	ands	r3, r2
 8001d64:	d00b      	beq.n	8001d7e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2284      	movs	r2, #132	@ 0x84
 8001d72:	589b      	ldr	r3, [r3, r2]
 8001d74:	2204      	movs	r2, #4
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2184      	movs	r1, #132	@ 0x84
 8001d7c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d7e:	23a4      	movs	r3, #164	@ 0xa4
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2204      	movs	r2, #4
 8001d86:	4013      	ands	r3, r2
 8001d88:	d011      	beq.n	8001dae <HAL_UART_IRQHandler+0x126>
 8001d8a:	239c      	movs	r3, #156	@ 0x9c
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2201      	movs	r2, #1
 8001d92:	4013      	ands	r3, r2
 8001d94:	d00b      	beq.n	8001dae <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2284      	movs	r2, #132	@ 0x84
 8001da2:	589b      	ldr	r3, [r3, r2]
 8001da4:	2202      	movs	r2, #2
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2184      	movs	r1, #132	@ 0x84
 8001dac:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001dae:	23a4      	movs	r3, #164	@ 0xa4
 8001db0:	18fb      	adds	r3, r7, r3
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2208      	movs	r2, #8
 8001db6:	4013      	ands	r3, r2
 8001db8:	d017      	beq.n	8001dea <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001dba:	23a0      	movs	r3, #160	@ 0xa0
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d105      	bne.n	8001dd2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001dc6:	239c      	movs	r3, #156	@ 0x9c
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001dd0:	d00b      	beq.n	8001dea <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2284      	movs	r2, #132	@ 0x84
 8001dde:	589b      	ldr	r3, [r3, r2]
 8001de0:	2208      	movs	r2, #8
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2184      	movs	r1, #132	@ 0x84
 8001de8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001dea:	23a4      	movs	r3, #164	@ 0xa4
 8001dec:	18fb      	adds	r3, r7, r3
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	2380      	movs	r3, #128	@ 0x80
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	4013      	ands	r3, r2
 8001df6:	d013      	beq.n	8001e20 <HAL_UART_IRQHandler+0x198>
 8001df8:	23a0      	movs	r3, #160	@ 0xa0
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	2380      	movs	r3, #128	@ 0x80
 8001e00:	04db      	lsls	r3, r3, #19
 8001e02:	4013      	ands	r3, r2
 8001e04:	d00c      	beq.n	8001e20 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2280      	movs	r2, #128	@ 0x80
 8001e0c:	0112      	lsls	r2, r2, #4
 8001e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2284      	movs	r2, #132	@ 0x84
 8001e14:	589b      	ldr	r3, [r3, r2]
 8001e16:	2220      	movs	r2, #32
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2184      	movs	r1, #132	@ 0x84
 8001e1e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2284      	movs	r2, #132	@ 0x84
 8001e24:	589b      	ldr	r3, [r3, r2]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d100      	bne.n	8001e2c <HAL_UART_IRQHandler+0x1a4>
 8001e2a:	e1ff      	b.n	800222c <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001e2c:	23a4      	movs	r3, #164	@ 0xa4
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2220      	movs	r2, #32
 8001e34:	4013      	ands	r3, r2
 8001e36:	d00e      	beq.n	8001e56 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001e38:	23a0      	movs	r3, #160	@ 0xa0
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	4013      	ands	r3, r2
 8001e42:	d008      	beq.n	8001e56 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d004      	beq.n	8001e56 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	0010      	movs	r0, r2
 8001e54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2284      	movs	r2, #132	@ 0x84
 8001e5a:	589b      	ldr	r3, [r3, r2]
 8001e5c:	2194      	movs	r1, #148	@ 0x94
 8001e5e:	187a      	adds	r2, r7, r1
 8001e60:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2240      	movs	r2, #64	@ 0x40
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b40      	cmp	r3, #64	@ 0x40
 8001e6e:	d004      	beq.n	8001e7a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001e70:	187b      	adds	r3, r7, r1
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2228      	movs	r2, #40	@ 0x28
 8001e76:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001e78:	d047      	beq.n	8001f0a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f000 fd53 	bl	8002928 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2240      	movs	r2, #64	@ 0x40
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b40      	cmp	r3, #64	@ 0x40
 8001e8e:	d137      	bne.n	8001f00 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e90:	f3ef 8310 	mrs	r3, PRIMASK
 8001e94:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8001e96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e98:	2090      	movs	r0, #144	@ 0x90
 8001e9a:	183a      	adds	r2, r7, r0
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ea2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ea4:	f383 8810 	msr	PRIMASK, r3
}
 8001ea8:	46c0      	nop			@ (mov r8, r8)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2140      	movs	r1, #64	@ 0x40
 8001eb6:	438a      	bics	r2, r1
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	183b      	adds	r3, r7, r0
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ec0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ec2:	f383 8810 	msr	PRIMASK, r3
}
 8001ec6:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d012      	beq.n	8001ef6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ed4:	4a14      	ldr	r2, [pc, #80]	@ (8001f28 <HAL_UART_IRQHandler+0x2a0>)
 8001ed6:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7fe fe29 	bl	8000b34 <HAL_DMA_Abort_IT>
 8001ee2:	1e03      	subs	r3, r0, #0
 8001ee4:	d01a      	beq.n	8001f1c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ef4:	e012      	b.n	8001f1c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f000 f9ad 	bl	8002258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001efe:	e00d      	b.n	8001f1c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	0018      	movs	r0, r3
 8001f04:	f000 f9a8 	bl	8002258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f08:	e008      	b.n	8001f1c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f000 f9a3 	bl	8002258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2284      	movs	r2, #132	@ 0x84
 8001f16:	2100      	movs	r1, #0
 8001f18:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001f1a:	e187      	b.n	800222c <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f1c:	46c0      	nop			@ (mov r8, r8)
    return;
 8001f1e:	e185      	b.n	800222c <HAL_UART_IRQHandler+0x5a4>
 8001f20:	0000080f 	.word	0x0000080f
 8001f24:	04000120 	.word	0x04000120
 8001f28:	080029f1 	.word	0x080029f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d000      	beq.n	8001f36 <HAL_UART_IRQHandler+0x2ae>
 8001f34:	e139      	b.n	80021aa <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001f36:	23a4      	movs	r3, #164	@ 0xa4
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2210      	movs	r2, #16
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d100      	bne.n	8001f44 <HAL_UART_IRQHandler+0x2bc>
 8001f42:	e132      	b.n	80021aa <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001f44:	23a0      	movs	r3, #160	@ 0xa0
 8001f46:	18fb      	adds	r3, r7, r3
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2210      	movs	r2, #16
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d100      	bne.n	8001f52 <HAL_UART_IRQHandler+0x2ca>
 8001f50:	e12b      	b.n	80021aa <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2210      	movs	r2, #16
 8001f58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2240      	movs	r2, #64	@ 0x40
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b40      	cmp	r3, #64	@ 0x40
 8001f66:	d000      	beq.n	8001f6a <HAL_UART_IRQHandler+0x2e2>
 8001f68:	e09f      	b.n	80020aa <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	217e      	movs	r1, #126	@ 0x7e
 8001f74:	187b      	adds	r3, r7, r1
 8001f76:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001f78:	187b      	adds	r3, r7, r1
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d100      	bne.n	8001f82 <HAL_UART_IRQHandler+0x2fa>
 8001f80:	e156      	b.n	8002230 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2258      	movs	r2, #88	@ 0x58
 8001f86:	5a9b      	ldrh	r3, [r3, r2]
 8001f88:	187a      	adds	r2, r7, r1
 8001f8a:	8812      	ldrh	r2, [r2, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d300      	bcc.n	8001f92 <HAL_UART_IRQHandler+0x30a>
 8001f90:	e14e      	b.n	8002230 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	187a      	adds	r2, r7, r1
 8001f96:	215a      	movs	r1, #90	@ 0x5a
 8001f98:	8812      	ldrh	r2, [r2, #0]
 8001f9a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	2b20      	cmp	r3, #32
 8001fa4:	d06f      	beq.n	8002086 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8001faa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8001fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001fae:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fb6:	f383 8810 	msr	PRIMASK, r3
}
 8001fba:	46c0      	nop			@ (mov r8, r8)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	499e      	ldr	r1, [pc, #632]	@ (8002240 <HAL_UART_IRQHandler+0x5b8>)
 8001fc8:	400a      	ands	r2, r1
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fce:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fd2:	f383 8810 	msr	PRIMASK, r3
}
 8001fd6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8001fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8001fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fe0:	677b      	str	r3, [r7, #116]	@ 0x74
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fe8:	f383 8810 	msr	PRIMASK, r3
}
 8001fec:	46c0      	nop			@ (mov r8, r8)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	438a      	bics	r2, r1
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002000:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002004:	f383 8810 	msr	PRIMASK, r3
}
 8002008:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800200a:	f3ef 8310 	mrs	r3, PRIMASK
 800200e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002010:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002012:	673b      	str	r3, [r7, #112]	@ 0x70
 8002014:	2301      	movs	r3, #1
 8002016:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800201a:	f383 8810 	msr	PRIMASK, r3
}
 800201e:	46c0      	nop			@ (mov r8, r8)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2140      	movs	r1, #64	@ 0x40
 800202c:	438a      	bics	r2, r1
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002032:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002036:	f383 8810 	msr	PRIMASK, r3
}
 800203a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2280      	movs	r2, #128	@ 0x80
 8002040:	2120      	movs	r1, #32
 8002042:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800204a:	f3ef 8310 	mrs	r3, PRIMASK
 800204e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002052:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002054:	2301      	movs	r3, #1
 8002056:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002058:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800205a:	f383 8810 	msr	PRIMASK, r3
}
 800205e:	46c0      	nop			@ (mov r8, r8)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2110      	movs	r1, #16
 800206c:	438a      	bics	r2, r1
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002072:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002074:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002076:	f383 8810 	msr	PRIMASK, r3
}
 800207a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002080:	0018      	movs	r0, r3
 8002082:	f7fe fd1f 	bl	8000ac4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2202      	movs	r2, #2
 800208a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2258      	movs	r2, #88	@ 0x58
 8002090:	5a9a      	ldrh	r2, [r3, r2]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	215a      	movs	r1, #90	@ 0x5a
 8002096:	5a5b      	ldrh	r3, [r3, r1]
 8002098:	b29b      	uxth	r3, r3
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	b29a      	uxth	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	0011      	movs	r1, r2
 80020a2:	0018      	movs	r0, r3
 80020a4:	f000 f8e0 	bl	8002268 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80020a8:	e0c2      	b.n	8002230 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2258      	movs	r2, #88	@ 0x58
 80020ae:	5a99      	ldrh	r1, [r3, r2]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	225a      	movs	r2, #90	@ 0x5a
 80020b4:	5a9b      	ldrh	r3, [r3, r2]
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	208e      	movs	r0, #142	@ 0x8e
 80020ba:	183b      	adds	r3, r7, r0
 80020bc:	1a8a      	subs	r2, r1, r2
 80020be:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	225a      	movs	r2, #90	@ 0x5a
 80020c4:	5a9b      	ldrh	r3, [r3, r2]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d100      	bne.n	80020ce <HAL_UART_IRQHandler+0x446>
 80020cc:	e0b2      	b.n	8002234 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80020ce:	183b      	adds	r3, r7, r0
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d100      	bne.n	80020d8 <HAL_UART_IRQHandler+0x450>
 80020d6:	e0ad      	b.n	8002234 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020d8:	f3ef 8310 	mrs	r3, PRIMASK
 80020dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80020de:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020e0:	2488      	movs	r4, #136	@ 0x88
 80020e2:	193a      	adds	r2, r7, r4
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	2301      	movs	r3, #1
 80020e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	f383 8810 	msr	PRIMASK, r3
}
 80020f0:	46c0      	nop			@ (mov r8, r8)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4951      	ldr	r1, [pc, #324]	@ (8002244 <HAL_UART_IRQHandler+0x5bc>)
 80020fe:	400a      	ands	r2, r1
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	193b      	adds	r3, r7, r4
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f383 8810 	msr	PRIMASK, r3
}
 800210e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002110:	f3ef 8310 	mrs	r3, PRIMASK
 8002114:	61bb      	str	r3, [r7, #24]
  return(result);
 8002116:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002118:	2484      	movs	r4, #132	@ 0x84
 800211a:	193a      	adds	r2, r7, r4
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	2301      	movs	r3, #1
 8002120:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	f383 8810 	msr	PRIMASK, r3
}
 8002128:	46c0      	nop			@ (mov r8, r8)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2101      	movs	r1, #1
 8002136:	438a      	bics	r2, r1
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	193b      	adds	r3, r7, r4
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	f383 8810 	msr	PRIMASK, r3
}
 8002146:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2280      	movs	r2, #128	@ 0x80
 800214c:	2120      	movs	r1, #32
 800214e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800215c:	f3ef 8310 	mrs	r3, PRIMASK
 8002160:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002164:	2480      	movs	r4, #128	@ 0x80
 8002166:	193a      	adds	r2, r7, r4
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	2301      	movs	r3, #1
 800216c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800216e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002170:	f383 8810 	msr	PRIMASK, r3
}
 8002174:	46c0      	nop			@ (mov r8, r8)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2110      	movs	r1, #16
 8002182:	438a      	bics	r2, r1
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	193b      	adds	r3, r7, r4
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800218c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800218e:	f383 8810 	msr	PRIMASK, r3
}
 8002192:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800219a:	183b      	adds	r3, r7, r0
 800219c:	881a      	ldrh	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	0011      	movs	r1, r2
 80021a2:	0018      	movs	r0, r3
 80021a4:	f000 f860 	bl	8002268 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80021a8:	e044      	b.n	8002234 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80021aa:	23a4      	movs	r3, #164	@ 0xa4
 80021ac:	18fb      	adds	r3, r7, r3
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	2380      	movs	r3, #128	@ 0x80
 80021b2:	035b      	lsls	r3, r3, #13
 80021b4:	4013      	ands	r3, r2
 80021b6:	d010      	beq.n	80021da <HAL_UART_IRQHandler+0x552>
 80021b8:	239c      	movs	r3, #156	@ 0x9c
 80021ba:	18fb      	adds	r3, r7, r3
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	2380      	movs	r3, #128	@ 0x80
 80021c0:	03db      	lsls	r3, r3, #15
 80021c2:	4013      	ands	r3, r2
 80021c4:	d009      	beq.n	80021da <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2280      	movs	r2, #128	@ 0x80
 80021cc:	0352      	lsls	r2, r2, #13
 80021ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	0018      	movs	r0, r3
 80021d4:	f000 fc4e 	bl	8002a74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80021d8:	e02f      	b.n	800223a <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80021da:	23a4      	movs	r3, #164	@ 0xa4
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2280      	movs	r2, #128	@ 0x80
 80021e2:	4013      	ands	r3, r2
 80021e4:	d00f      	beq.n	8002206 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80021e6:	23a0      	movs	r3, #160	@ 0xa0
 80021e8:	18fb      	adds	r3, r7, r3
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2280      	movs	r2, #128	@ 0x80
 80021ee:	4013      	ands	r3, r2
 80021f0:	d009      	beq.n	8002206 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d01e      	beq.n	8002238 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	0010      	movs	r0, r2
 8002202:	4798      	blx	r3
    }
    return;
 8002204:	e018      	b.n	8002238 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002206:	23a4      	movs	r3, #164	@ 0xa4
 8002208:	18fb      	adds	r3, r7, r3
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2240      	movs	r2, #64	@ 0x40
 800220e:	4013      	ands	r3, r2
 8002210:	d013      	beq.n	800223a <HAL_UART_IRQHandler+0x5b2>
 8002212:	23a0      	movs	r3, #160	@ 0xa0
 8002214:	18fb      	adds	r3, r7, r3
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2240      	movs	r2, #64	@ 0x40
 800221a:	4013      	ands	r3, r2
 800221c:	d00d      	beq.n	800223a <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	0018      	movs	r0, r3
 8002222:	f000 fbfc 	bl	8002a1e <UART_EndTransmit_IT>
    return;
 8002226:	e008      	b.n	800223a <HAL_UART_IRQHandler+0x5b2>
      return;
 8002228:	46c0      	nop			@ (mov r8, r8)
 800222a:	e006      	b.n	800223a <HAL_UART_IRQHandler+0x5b2>
    return;
 800222c:	46c0      	nop			@ (mov r8, r8)
 800222e:	e004      	b.n	800223a <HAL_UART_IRQHandler+0x5b2>
      return;
 8002230:	46c0      	nop			@ (mov r8, r8)
 8002232:	e002      	b.n	800223a <HAL_UART_IRQHandler+0x5b2>
      return;
 8002234:	46c0      	nop			@ (mov r8, r8)
 8002236:	e000      	b.n	800223a <HAL_UART_IRQHandler+0x5b2>
    return;
 8002238:	46c0      	nop			@ (mov r8, r8)
  }

}
 800223a:	46bd      	mov	sp, r7
 800223c:	b02b      	add	sp, #172	@ 0xac
 800223e:	bd90      	pop	{r4, r7, pc}
 8002240:	fffffeff 	.word	0xfffffeff
 8002244:	fffffedf 	.word	0xfffffedf

08002248 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002250:	46c0      	nop			@ (mov r8, r8)
 8002252:	46bd      	mov	sp, r7
 8002254:	b002      	add	sp, #8
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002260:	46c0      	nop			@ (mov r8, r8)
 8002262:	46bd      	mov	sp, r7
 8002264:	b002      	add	sp, #8
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	000a      	movs	r2, r1
 8002272:	1cbb      	adds	r3, r7, #2
 8002274:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002276:	46c0      	nop			@ (mov r8, r8)
 8002278:	46bd      	mov	sp, r7
 800227a:	b002      	add	sp, #8
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002288:	231e      	movs	r3, #30
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4aaf      	ldr	r2, [pc, #700]	@ (800256c <UART_SetConfig+0x2ec>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	0019      	movs	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4aaa      	ldr	r2, [pc, #680]	@ (8002570 <UART_SetConfig+0x2f0>)
 80022c6:	4013      	ands	r3, r2
 80022c8:	0019      	movs	r1, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	4aa1      	ldr	r2, [pc, #644]	@ (8002574 <UART_SetConfig+0x2f4>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	0019      	movs	r1, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a9d      	ldr	r2, [pc, #628]	@ (8002578 <UART_SetConfig+0x2f8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d127      	bne.n	8002356 <UART_SetConfig+0xd6>
 8002306:	4b9d      	ldr	r3, [pc, #628]	@ (800257c <UART_SetConfig+0x2fc>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230a:	2203      	movs	r2, #3
 800230c:	4013      	ands	r3, r2
 800230e:	2b03      	cmp	r3, #3
 8002310:	d00d      	beq.n	800232e <UART_SetConfig+0xae>
 8002312:	d81b      	bhi.n	800234c <UART_SetConfig+0xcc>
 8002314:	2b02      	cmp	r3, #2
 8002316:	d014      	beq.n	8002342 <UART_SetConfig+0xc2>
 8002318:	d818      	bhi.n	800234c <UART_SetConfig+0xcc>
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <UART_SetConfig+0xa4>
 800231e:	2b01      	cmp	r3, #1
 8002320:	d00a      	beq.n	8002338 <UART_SetConfig+0xb8>
 8002322:	e013      	b.n	800234c <UART_SetConfig+0xcc>
 8002324:	231f      	movs	r3, #31
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
 800232c:	e065      	b.n	80023fa <UART_SetConfig+0x17a>
 800232e:	231f      	movs	r3, #31
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	2202      	movs	r2, #2
 8002334:	701a      	strb	r2, [r3, #0]
 8002336:	e060      	b.n	80023fa <UART_SetConfig+0x17a>
 8002338:	231f      	movs	r3, #31
 800233a:	18fb      	adds	r3, r7, r3
 800233c:	2204      	movs	r2, #4
 800233e:	701a      	strb	r2, [r3, #0]
 8002340:	e05b      	b.n	80023fa <UART_SetConfig+0x17a>
 8002342:	231f      	movs	r3, #31
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	2208      	movs	r2, #8
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	e056      	b.n	80023fa <UART_SetConfig+0x17a>
 800234c:	231f      	movs	r3, #31
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	2210      	movs	r2, #16
 8002352:	701a      	strb	r2, [r3, #0]
 8002354:	e051      	b.n	80023fa <UART_SetConfig+0x17a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a89      	ldr	r2, [pc, #548]	@ (8002580 <UART_SetConfig+0x300>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d134      	bne.n	80023ca <UART_SetConfig+0x14a>
 8002360:	4b86      	ldr	r3, [pc, #536]	@ (800257c <UART_SetConfig+0x2fc>)
 8002362:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002364:	23c0      	movs	r3, #192	@ 0xc0
 8002366:	029b      	lsls	r3, r3, #10
 8002368:	4013      	ands	r3, r2
 800236a:	22c0      	movs	r2, #192	@ 0xc0
 800236c:	0292      	lsls	r2, r2, #10
 800236e:	4293      	cmp	r3, r2
 8002370:	d017      	beq.n	80023a2 <UART_SetConfig+0x122>
 8002372:	22c0      	movs	r2, #192	@ 0xc0
 8002374:	0292      	lsls	r2, r2, #10
 8002376:	4293      	cmp	r3, r2
 8002378:	d822      	bhi.n	80023c0 <UART_SetConfig+0x140>
 800237a:	2280      	movs	r2, #128	@ 0x80
 800237c:	0292      	lsls	r2, r2, #10
 800237e:	4293      	cmp	r3, r2
 8002380:	d019      	beq.n	80023b6 <UART_SetConfig+0x136>
 8002382:	2280      	movs	r2, #128	@ 0x80
 8002384:	0292      	lsls	r2, r2, #10
 8002386:	4293      	cmp	r3, r2
 8002388:	d81a      	bhi.n	80023c0 <UART_SetConfig+0x140>
 800238a:	2b00      	cmp	r3, #0
 800238c:	d004      	beq.n	8002398 <UART_SetConfig+0x118>
 800238e:	2280      	movs	r2, #128	@ 0x80
 8002390:	0252      	lsls	r2, r2, #9
 8002392:	4293      	cmp	r3, r2
 8002394:	d00a      	beq.n	80023ac <UART_SetConfig+0x12c>
 8002396:	e013      	b.n	80023c0 <UART_SetConfig+0x140>
 8002398:	231f      	movs	r3, #31
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
 80023a0:	e02b      	b.n	80023fa <UART_SetConfig+0x17a>
 80023a2:	231f      	movs	r3, #31
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	2202      	movs	r2, #2
 80023a8:	701a      	strb	r2, [r3, #0]
 80023aa:	e026      	b.n	80023fa <UART_SetConfig+0x17a>
 80023ac:	231f      	movs	r3, #31
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	2204      	movs	r2, #4
 80023b2:	701a      	strb	r2, [r3, #0]
 80023b4:	e021      	b.n	80023fa <UART_SetConfig+0x17a>
 80023b6:	231f      	movs	r3, #31
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	2208      	movs	r2, #8
 80023bc:	701a      	strb	r2, [r3, #0]
 80023be:	e01c      	b.n	80023fa <UART_SetConfig+0x17a>
 80023c0:	231f      	movs	r3, #31
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	2210      	movs	r2, #16
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	e017      	b.n	80023fa <UART_SetConfig+0x17a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a6d      	ldr	r2, [pc, #436]	@ (8002584 <UART_SetConfig+0x304>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d104      	bne.n	80023de <UART_SetConfig+0x15e>
 80023d4:	231f      	movs	r3, #31
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
 80023dc:	e00d      	b.n	80023fa <UART_SetConfig+0x17a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a69      	ldr	r2, [pc, #420]	@ (8002588 <UART_SetConfig+0x308>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d104      	bne.n	80023f2 <UART_SetConfig+0x172>
 80023e8:	231f      	movs	r3, #31
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	e003      	b.n	80023fa <UART_SetConfig+0x17a>
 80023f2:	231f      	movs	r3, #31
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	2210      	movs	r2, #16
 80023f8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69da      	ldr	r2, [r3, #28]
 80023fe:	2380      	movs	r3, #128	@ 0x80
 8002400:	021b      	lsls	r3, r3, #8
 8002402:	429a      	cmp	r2, r3
 8002404:	d15c      	bne.n	80024c0 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8002406:	231f      	movs	r3, #31
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b08      	cmp	r3, #8
 800240e:	d015      	beq.n	800243c <UART_SetConfig+0x1bc>
 8002410:	dc18      	bgt.n	8002444 <UART_SetConfig+0x1c4>
 8002412:	2b04      	cmp	r3, #4
 8002414:	d00d      	beq.n	8002432 <UART_SetConfig+0x1b2>
 8002416:	dc15      	bgt.n	8002444 <UART_SetConfig+0x1c4>
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <UART_SetConfig+0x1a2>
 800241c:	2b02      	cmp	r3, #2
 800241e:	d005      	beq.n	800242c <UART_SetConfig+0x1ac>
 8002420:	e010      	b.n	8002444 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002422:	f7ff fa3f 	bl	80018a4 <HAL_RCC_GetPCLK1Freq>
 8002426:	0003      	movs	r3, r0
 8002428:	61bb      	str	r3, [r7, #24]
        break;
 800242a:	e012      	b.n	8002452 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800242c:	4b57      	ldr	r3, [pc, #348]	@ (800258c <UART_SetConfig+0x30c>)
 800242e:	61bb      	str	r3, [r7, #24]
        break;
 8002430:	e00f      	b.n	8002452 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002432:	f7ff f9bb 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 8002436:	0003      	movs	r3, r0
 8002438:	61bb      	str	r3, [r7, #24]
        break;
 800243a:	e00a      	b.n	8002452 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800243c:	2380      	movs	r3, #128	@ 0x80
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	61bb      	str	r3, [r7, #24]
        break;
 8002442:	e006      	b.n	8002452 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002448:	231e      	movs	r3, #30
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
        break;
 8002450:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d100      	bne.n	800245a <UART_SetConfig+0x1da>
 8002458:	e07a      	b.n	8002550 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	005a      	lsls	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	085b      	lsrs	r3, r3, #1
 8002464:	18d2      	adds	r2, r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	0019      	movs	r1, r3
 800246c:	0010      	movs	r0, r2
 800246e:	f7fd fe5d 	bl	800012c <__udivsi3>
 8002472:	0003      	movs	r3, r0
 8002474:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b0f      	cmp	r3, #15
 800247a:	d91c      	bls.n	80024b6 <UART_SetConfig+0x236>
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	2380      	movs	r3, #128	@ 0x80
 8002480:	025b      	lsls	r3, r3, #9
 8002482:	429a      	cmp	r2, r3
 8002484:	d217      	bcs.n	80024b6 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	b29a      	uxth	r2, r3
 800248a:	200e      	movs	r0, #14
 800248c:	183b      	adds	r3, r7, r0
 800248e:	210f      	movs	r1, #15
 8002490:	438a      	bics	r2, r1
 8002492:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	085b      	lsrs	r3, r3, #1
 8002498:	b29b      	uxth	r3, r3
 800249a:	2207      	movs	r2, #7
 800249c:	4013      	ands	r3, r2
 800249e:	b299      	uxth	r1, r3
 80024a0:	183b      	adds	r3, r7, r0
 80024a2:	183a      	adds	r2, r7, r0
 80024a4:	8812      	ldrh	r2, [r2, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	183a      	adds	r2, r7, r0
 80024b0:	8812      	ldrh	r2, [r2, #0]
 80024b2:	60da      	str	r2, [r3, #12]
 80024b4:	e04c      	b.n	8002550 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80024b6:	231e      	movs	r3, #30
 80024b8:	18fb      	adds	r3, r7, r3
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	e047      	b.n	8002550 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80024c0:	231f      	movs	r3, #31
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d015      	beq.n	80024f6 <UART_SetConfig+0x276>
 80024ca:	dc18      	bgt.n	80024fe <UART_SetConfig+0x27e>
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d00d      	beq.n	80024ec <UART_SetConfig+0x26c>
 80024d0:	dc15      	bgt.n	80024fe <UART_SetConfig+0x27e>
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <UART_SetConfig+0x25c>
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d005      	beq.n	80024e6 <UART_SetConfig+0x266>
 80024da:	e010      	b.n	80024fe <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024dc:	f7ff f9e2 	bl	80018a4 <HAL_RCC_GetPCLK1Freq>
 80024e0:	0003      	movs	r3, r0
 80024e2:	61bb      	str	r3, [r7, #24]
        break;
 80024e4:	e012      	b.n	800250c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024e6:	4b29      	ldr	r3, [pc, #164]	@ (800258c <UART_SetConfig+0x30c>)
 80024e8:	61bb      	str	r3, [r7, #24]
        break;
 80024ea:	e00f      	b.n	800250c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024ec:	f7ff f95e 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 80024f0:	0003      	movs	r3, r0
 80024f2:	61bb      	str	r3, [r7, #24]
        break;
 80024f4:	e00a      	b.n	800250c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024f6:	2380      	movs	r3, #128	@ 0x80
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	61bb      	str	r3, [r7, #24]
        break;
 80024fc:	e006      	b.n	800250c <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002502:	231e      	movs	r3, #30
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	2201      	movs	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]
        break;
 800250a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d01e      	beq.n	8002550 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	085a      	lsrs	r2, r3, #1
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	18d2      	adds	r2, r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	0019      	movs	r1, r3
 8002522:	0010      	movs	r0, r2
 8002524:	f7fd fe02 	bl	800012c <__udivsi3>
 8002528:	0003      	movs	r3, r0
 800252a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	2b0f      	cmp	r3, #15
 8002530:	d90a      	bls.n	8002548 <UART_SetConfig+0x2c8>
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	2380      	movs	r3, #128	@ 0x80
 8002536:	025b      	lsls	r3, r3, #9
 8002538:	429a      	cmp	r2, r3
 800253a:	d205      	bcs.n	8002548 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	b29a      	uxth	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	e003      	b.n	8002550 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8002548:	231e      	movs	r3, #30
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	2201      	movs	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800255c:	231e      	movs	r3, #30
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	781b      	ldrb	r3, [r3, #0]
}
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	b008      	add	sp, #32
 8002568:	bd80      	pop	{r7, pc}
 800256a:	46c0      	nop			@ (mov r8, r8)
 800256c:	efff69f3 	.word	0xefff69f3
 8002570:	ffffcfff 	.word	0xffffcfff
 8002574:	fffff4ff 	.word	0xfffff4ff
 8002578:	40013800 	.word	0x40013800
 800257c:	40021000 	.word	0x40021000
 8002580:	40004400 	.word	0x40004400
 8002584:	40004800 	.word	0x40004800
 8002588:	40004c00 	.word	0x40004c00
 800258c:	007a1200 	.word	0x007a1200

08002590 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259c:	2208      	movs	r2, #8
 800259e:	4013      	ands	r3, r2
 80025a0:	d00b      	beq.n	80025ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4a4a      	ldr	r2, [pc, #296]	@ (80026d4 <UART_AdvFeatureConfig+0x144>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	0019      	movs	r1, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025be:	2201      	movs	r2, #1
 80025c0:	4013      	ands	r3, r2
 80025c2:	d00b      	beq.n	80025dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4a43      	ldr	r2, [pc, #268]	@ (80026d8 <UART_AdvFeatureConfig+0x148>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	0019      	movs	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e0:	2202      	movs	r2, #2
 80025e2:	4013      	ands	r3, r2
 80025e4:	d00b      	beq.n	80025fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4a3b      	ldr	r2, [pc, #236]	@ (80026dc <UART_AdvFeatureConfig+0x14c>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002602:	2204      	movs	r2, #4
 8002604:	4013      	ands	r3, r2
 8002606:	d00b      	beq.n	8002620 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4a34      	ldr	r2, [pc, #208]	@ (80026e0 <UART_AdvFeatureConfig+0x150>)
 8002610:	4013      	ands	r3, r2
 8002612:	0019      	movs	r1, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002624:	2210      	movs	r2, #16
 8002626:	4013      	ands	r3, r2
 8002628:	d00b      	beq.n	8002642 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	4a2c      	ldr	r2, [pc, #176]	@ (80026e4 <UART_AdvFeatureConfig+0x154>)
 8002632:	4013      	ands	r3, r2
 8002634:	0019      	movs	r1, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002646:	2220      	movs	r2, #32
 8002648:	4013      	ands	r3, r2
 800264a:	d00b      	beq.n	8002664 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	4a25      	ldr	r2, [pc, #148]	@ (80026e8 <UART_AdvFeatureConfig+0x158>)
 8002654:	4013      	ands	r3, r2
 8002656:	0019      	movs	r1, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002668:	2240      	movs	r2, #64	@ 0x40
 800266a:	4013      	ands	r3, r2
 800266c:	d01d      	beq.n	80026aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4a1d      	ldr	r2, [pc, #116]	@ (80026ec <UART_AdvFeatureConfig+0x15c>)
 8002676:	4013      	ands	r3, r2
 8002678:	0019      	movs	r1, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	035b      	lsls	r3, r3, #13
 800268e:	429a      	cmp	r2, r3
 8002690:	d10b      	bne.n	80026aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	4a15      	ldr	r2, [pc, #84]	@ (80026f0 <UART_AdvFeatureConfig+0x160>)
 800269a:	4013      	ands	r3, r2
 800269c:	0019      	movs	r1, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ae:	2280      	movs	r2, #128	@ 0x80
 80026b0:	4013      	ands	r3, r2
 80026b2:	d00b      	beq.n	80026cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4a0e      	ldr	r2, [pc, #56]	@ (80026f4 <UART_AdvFeatureConfig+0x164>)
 80026bc:	4013      	ands	r3, r2
 80026be:	0019      	movs	r1, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	605a      	str	r2, [r3, #4]
  }
}
 80026cc:	46c0      	nop			@ (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b002      	add	sp, #8
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	ffff7fff 	.word	0xffff7fff
 80026d8:	fffdffff 	.word	0xfffdffff
 80026dc:	fffeffff 	.word	0xfffeffff
 80026e0:	fffbffff 	.word	0xfffbffff
 80026e4:	ffffefff 	.word	0xffffefff
 80026e8:	ffffdfff 	.word	0xffffdfff
 80026ec:	ffefffff 	.word	0xffefffff
 80026f0:	ff9fffff 	.word	0xff9fffff
 80026f4:	fff7ffff 	.word	0xfff7ffff

080026f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b092      	sub	sp, #72	@ 0x48
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2284      	movs	r2, #132	@ 0x84
 8002704:	2100      	movs	r1, #0
 8002706:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002708:	f7fe f8d0 	bl	80008ac <HAL_GetTick>
 800270c:	0003      	movs	r3, r0
 800270e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2208      	movs	r2, #8
 8002718:	4013      	ands	r3, r2
 800271a:	2b08      	cmp	r3, #8
 800271c:	d12c      	bne.n	8002778 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800271e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002720:	2280      	movs	r2, #128	@ 0x80
 8002722:	0391      	lsls	r1, r2, #14
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	4a46      	ldr	r2, [pc, #280]	@ (8002840 <UART_CheckIdleState+0x148>)
 8002728:	9200      	str	r2, [sp, #0]
 800272a:	2200      	movs	r2, #0
 800272c:	f000 f88c 	bl	8002848 <UART_WaitOnFlagUntilTimeout>
 8002730:	1e03      	subs	r3, r0, #0
 8002732:	d021      	beq.n	8002778 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002734:	f3ef 8310 	mrs	r3, PRIMASK
 8002738:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800273c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800273e:	2301      	movs	r3, #1
 8002740:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002744:	f383 8810 	msr	PRIMASK, r3
}
 8002748:	46c0      	nop			@ (mov r8, r8)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2180      	movs	r1, #128	@ 0x80
 8002756:	438a      	bics	r2, r1
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800275c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800275e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002760:	f383 8810 	msr	PRIMASK, r3
}
 8002764:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2220      	movs	r2, #32
 800276a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2278      	movs	r2, #120	@ 0x78
 8002770:	2100      	movs	r1, #0
 8002772:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e05f      	b.n	8002838 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2204      	movs	r2, #4
 8002780:	4013      	ands	r3, r2
 8002782:	2b04      	cmp	r3, #4
 8002784:	d146      	bne.n	8002814 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002788:	2280      	movs	r2, #128	@ 0x80
 800278a:	03d1      	lsls	r1, r2, #15
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	4a2c      	ldr	r2, [pc, #176]	@ (8002840 <UART_CheckIdleState+0x148>)
 8002790:	9200      	str	r2, [sp, #0]
 8002792:	2200      	movs	r2, #0
 8002794:	f000 f858 	bl	8002848 <UART_WaitOnFlagUntilTimeout>
 8002798:	1e03      	subs	r3, r0, #0
 800279a:	d03b      	beq.n	8002814 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800279c:	f3ef 8310 	mrs	r3, PRIMASK
 80027a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80027a2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80027a6:	2301      	movs	r3, #1
 80027a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f383 8810 	msr	PRIMASK, r3
}
 80027b0:	46c0      	nop			@ (mov r8, r8)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4921      	ldr	r1, [pc, #132]	@ (8002844 <UART_CheckIdleState+0x14c>)
 80027be:	400a      	ands	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f383 8810 	msr	PRIMASK, r3
}
 80027cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ce:	f3ef 8310 	mrs	r3, PRIMASK
 80027d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80027d4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80027d8:	2301      	movs	r3, #1
 80027da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f383 8810 	msr	PRIMASK, r3
}
 80027e2:	46c0      	nop			@ (mov r8, r8)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2101      	movs	r1, #1
 80027f0:	438a      	bics	r2, r1
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	f383 8810 	msr	PRIMASK, r3
}
 80027fe:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2280      	movs	r2, #128	@ 0x80
 8002804:	2120      	movs	r1, #32
 8002806:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2278      	movs	r2, #120	@ 0x78
 800280c:	2100      	movs	r1, #0
 800280e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e011      	b.n	8002838 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2220      	movs	r2, #32
 8002818:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2280      	movs	r2, #128	@ 0x80
 800281e:	2120      	movs	r1, #32
 8002820:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2278      	movs	r2, #120	@ 0x78
 8002832:	2100      	movs	r1, #0
 8002834:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	0018      	movs	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	b010      	add	sp, #64	@ 0x40
 800283e:	bd80      	pop	{r7, pc}
 8002840:	01ffffff 	.word	0x01ffffff
 8002844:	fffffedf 	.word	0xfffffedf

08002848 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	1dfb      	adds	r3, r7, #7
 8002856:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002858:	e051      	b.n	80028fe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	3301      	adds	r3, #1
 800285e:	d04e      	beq.n	80028fe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002860:	f7fe f824 	bl	80008ac <HAL_GetTick>
 8002864:	0002      	movs	r2, r0
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	429a      	cmp	r2, r3
 800286e:	d302      	bcc.n	8002876 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e051      	b.n	800291e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2204      	movs	r2, #4
 8002882:	4013      	ands	r3, r2
 8002884:	d03b      	beq.n	80028fe <UART_WaitOnFlagUntilTimeout+0xb6>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b80      	cmp	r3, #128	@ 0x80
 800288a:	d038      	beq.n	80028fe <UART_WaitOnFlagUntilTimeout+0xb6>
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b40      	cmp	r3, #64	@ 0x40
 8002890:	d035      	beq.n	80028fe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	2208      	movs	r2, #8
 800289a:	4013      	ands	r3, r2
 800289c:	2b08      	cmp	r3, #8
 800289e:	d111      	bne.n	80028c4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2208      	movs	r2, #8
 80028a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	0018      	movs	r0, r3
 80028ac:	f000 f83c 	bl	8002928 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2284      	movs	r2, #132	@ 0x84
 80028b4:	2108      	movs	r1, #8
 80028b6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2278      	movs	r2, #120	@ 0x78
 80028bc:	2100      	movs	r1, #0
 80028be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e02c      	b.n	800291e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	69da      	ldr	r2, [r3, #28]
 80028ca:	2380      	movs	r3, #128	@ 0x80
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	401a      	ands	r2, r3
 80028d0:	2380      	movs	r3, #128	@ 0x80
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d112      	bne.n	80028fe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2280      	movs	r2, #128	@ 0x80
 80028de:	0112      	lsls	r2, r2, #4
 80028e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f000 f81f 	bl	8002928 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2284      	movs	r2, #132	@ 0x84
 80028ee:	2120      	movs	r1, #32
 80028f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2278      	movs	r2, #120	@ 0x78
 80028f6:	2100      	movs	r1, #0
 80028f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e00f      	b.n	800291e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	4013      	ands	r3, r2
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	425a      	negs	r2, r3
 800290e:	4153      	adcs	r3, r2
 8002910:	b2db      	uxtb	r3, r3
 8002912:	001a      	movs	r2, r3
 8002914:	1dfb      	adds	r3, r7, #7
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d09e      	beq.n	800285a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	0018      	movs	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	b004      	add	sp, #16
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08e      	sub	sp, #56	@ 0x38
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002930:	f3ef 8310 	mrs	r3, PRIMASK
 8002934:	617b      	str	r3, [r7, #20]
  return(result);
 8002936:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002938:	637b      	str	r3, [r7, #52]	@ 0x34
 800293a:	2301      	movs	r3, #1
 800293c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	f383 8810 	msr	PRIMASK, r3
}
 8002944:	46c0      	nop			@ (mov r8, r8)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4926      	ldr	r1, [pc, #152]	@ (80029ec <UART_EndRxTransfer+0xc4>)
 8002952:	400a      	ands	r2, r1
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002958:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	f383 8810 	msr	PRIMASK, r3
}
 8002960:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002962:	f3ef 8310 	mrs	r3, PRIMASK
 8002966:	623b      	str	r3, [r7, #32]
  return(result);
 8002968:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800296a:	633b      	str	r3, [r7, #48]	@ 0x30
 800296c:	2301      	movs	r3, #1
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002972:	f383 8810 	msr	PRIMASK, r3
}
 8002976:	46c0      	nop			@ (mov r8, r8)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2101      	movs	r1, #1
 8002984:	438a      	bics	r2, r1
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800298a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800298c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298e:	f383 8810 	msr	PRIMASK, r3
}
 8002992:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002998:	2b01      	cmp	r3, #1
 800299a:	d118      	bne.n	80029ce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800299c:	f3ef 8310 	mrs	r3, PRIMASK
 80029a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80029a2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029a6:	2301      	movs	r3, #1
 80029a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f383 8810 	msr	PRIMASK, r3
}
 80029b0:	46c0      	nop			@ (mov r8, r8)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2110      	movs	r1, #16
 80029be:	438a      	bics	r2, r1
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f383 8810 	msr	PRIMASK, r3
}
 80029cc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2280      	movs	r2, #128	@ 0x80
 80029d2:	2120      	movs	r1, #32
 80029d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b00e      	add	sp, #56	@ 0x38
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			@ (mov r8, r8)
 80029ec:	fffffedf 	.word	0xfffffedf

080029f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	225a      	movs	r2, #90	@ 0x5a
 8002a02:	2100      	movs	r1, #0
 8002a04:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2252      	movs	r2, #82	@ 0x52
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	0018      	movs	r0, r3
 8002a12:	f7ff fc21 	bl	8002258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a16:	46c0      	nop			@ (mov r8, r8)
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b004      	add	sp, #16
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b086      	sub	sp, #24
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a26:	f3ef 8310 	mrs	r3, PRIMASK
 8002a2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a2c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	2301      	movs	r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f383 8810 	msr	PRIMASK, r3
}
 8002a3a:	46c0      	nop			@ (mov r8, r8)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2140      	movs	r1, #64	@ 0x40
 8002a48:	438a      	bics	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f383 8810 	msr	PRIMASK, r3
}
 8002a56:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	0018      	movs	r0, r3
 8002a68:	f7ff fbee 	bl	8002248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a6c:	46c0      	nop			@ (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b006      	add	sp, #24
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002a7c:	46c0      	nop			@ (mov r8, r8)
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b002      	add	sp, #8
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <siprintf>:
 8002a84:	b40e      	push	{r1, r2, r3}
 8002a86:	b500      	push	{lr}
 8002a88:	490b      	ldr	r1, [pc, #44]	@ (8002ab8 <siprintf+0x34>)
 8002a8a:	b09c      	sub	sp, #112	@ 0x70
 8002a8c:	ab1d      	add	r3, sp, #116	@ 0x74
 8002a8e:	9002      	str	r0, [sp, #8]
 8002a90:	9006      	str	r0, [sp, #24]
 8002a92:	9107      	str	r1, [sp, #28]
 8002a94:	9104      	str	r1, [sp, #16]
 8002a96:	4809      	ldr	r0, [pc, #36]	@ (8002abc <siprintf+0x38>)
 8002a98:	4909      	ldr	r1, [pc, #36]	@ (8002ac0 <siprintf+0x3c>)
 8002a9a:	cb04      	ldmia	r3!, {r2}
 8002a9c:	9105      	str	r1, [sp, #20]
 8002a9e:	6800      	ldr	r0, [r0, #0]
 8002aa0:	a902      	add	r1, sp, #8
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	f000 f99e 	bl	8002de4 <_svfiprintf_r>
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	9b02      	ldr	r3, [sp, #8]
 8002aac:	701a      	strb	r2, [r3, #0]
 8002aae:	b01c      	add	sp, #112	@ 0x70
 8002ab0:	bc08      	pop	{r3}
 8002ab2:	b003      	add	sp, #12
 8002ab4:	4718      	bx	r3
 8002ab6:	46c0      	nop			@ (mov r8, r8)
 8002ab8:	7fffffff 	.word	0x7fffffff
 8002abc:	2000000c 	.word	0x2000000c
 8002ac0:	ffff0208 	.word	0xffff0208

08002ac4 <memset>:
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	1882      	adds	r2, r0, r2
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d100      	bne.n	8002ace <memset+0xa>
 8002acc:	4770      	bx	lr
 8002ace:	7019      	strb	r1, [r3, #0]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	e7f9      	b.n	8002ac8 <memset+0x4>

08002ad4 <__errno>:
 8002ad4:	4b01      	ldr	r3, [pc, #4]	@ (8002adc <__errno+0x8>)
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	4770      	bx	lr
 8002ada:	46c0      	nop			@ (mov r8, r8)
 8002adc:	2000000c 	.word	0x2000000c

08002ae0 <__libc_init_array>:
 8002ae0:	b570      	push	{r4, r5, r6, lr}
 8002ae2:	2600      	movs	r6, #0
 8002ae4:	4c0c      	ldr	r4, [pc, #48]	@ (8002b18 <__libc_init_array+0x38>)
 8002ae6:	4d0d      	ldr	r5, [pc, #52]	@ (8002b1c <__libc_init_array+0x3c>)
 8002ae8:	1b64      	subs	r4, r4, r5
 8002aea:	10a4      	asrs	r4, r4, #2
 8002aec:	42a6      	cmp	r6, r4
 8002aee:	d109      	bne.n	8002b04 <__libc_init_array+0x24>
 8002af0:	2600      	movs	r6, #0
 8002af2:	f000 fc65 	bl	80033c0 <_init>
 8002af6:	4c0a      	ldr	r4, [pc, #40]	@ (8002b20 <__libc_init_array+0x40>)
 8002af8:	4d0a      	ldr	r5, [pc, #40]	@ (8002b24 <__libc_init_array+0x44>)
 8002afa:	1b64      	subs	r4, r4, r5
 8002afc:	10a4      	asrs	r4, r4, #2
 8002afe:	42a6      	cmp	r6, r4
 8002b00:	d105      	bne.n	8002b0e <__libc_init_array+0x2e>
 8002b02:	bd70      	pop	{r4, r5, r6, pc}
 8002b04:	00b3      	lsls	r3, r6, #2
 8002b06:	58eb      	ldr	r3, [r5, r3]
 8002b08:	4798      	blx	r3
 8002b0a:	3601      	adds	r6, #1
 8002b0c:	e7ee      	b.n	8002aec <__libc_init_array+0xc>
 8002b0e:	00b3      	lsls	r3, r6, #2
 8002b10:	58eb      	ldr	r3, [r5, r3]
 8002b12:	4798      	blx	r3
 8002b14:	3601      	adds	r6, #1
 8002b16:	e7f2      	b.n	8002afe <__libc_init_array+0x1e>
 8002b18:	0800345c 	.word	0x0800345c
 8002b1c:	0800345c 	.word	0x0800345c
 8002b20:	08003460 	.word	0x08003460
 8002b24:	0800345c 	.word	0x0800345c

08002b28 <__retarget_lock_acquire_recursive>:
 8002b28:	4770      	bx	lr

08002b2a <__retarget_lock_release_recursive>:
 8002b2a:	4770      	bx	lr

08002b2c <_free_r>:
 8002b2c:	b570      	push	{r4, r5, r6, lr}
 8002b2e:	0005      	movs	r5, r0
 8002b30:	1e0c      	subs	r4, r1, #0
 8002b32:	d010      	beq.n	8002b56 <_free_r+0x2a>
 8002b34:	3c04      	subs	r4, #4
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	da00      	bge.n	8002b3e <_free_r+0x12>
 8002b3c:	18e4      	adds	r4, r4, r3
 8002b3e:	0028      	movs	r0, r5
 8002b40:	f000 f8e0 	bl	8002d04 <__malloc_lock>
 8002b44:	4a1d      	ldr	r2, [pc, #116]	@ (8002bbc <_free_r+0x90>)
 8002b46:	6813      	ldr	r3, [r2, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d105      	bne.n	8002b58 <_free_r+0x2c>
 8002b4c:	6063      	str	r3, [r4, #4]
 8002b4e:	6014      	str	r4, [r2, #0]
 8002b50:	0028      	movs	r0, r5
 8002b52:	f000 f8df 	bl	8002d14 <__malloc_unlock>
 8002b56:	bd70      	pop	{r4, r5, r6, pc}
 8002b58:	42a3      	cmp	r3, r4
 8002b5a:	d908      	bls.n	8002b6e <_free_r+0x42>
 8002b5c:	6820      	ldr	r0, [r4, #0]
 8002b5e:	1821      	adds	r1, r4, r0
 8002b60:	428b      	cmp	r3, r1
 8002b62:	d1f3      	bne.n	8002b4c <_free_r+0x20>
 8002b64:	6819      	ldr	r1, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	1809      	adds	r1, r1, r0
 8002b6a:	6021      	str	r1, [r4, #0]
 8002b6c:	e7ee      	b.n	8002b4c <_free_r+0x20>
 8002b6e:	001a      	movs	r2, r3
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <_free_r+0x4e>
 8002b76:	42a3      	cmp	r3, r4
 8002b78:	d9f9      	bls.n	8002b6e <_free_r+0x42>
 8002b7a:	6811      	ldr	r1, [r2, #0]
 8002b7c:	1850      	adds	r0, r2, r1
 8002b7e:	42a0      	cmp	r0, r4
 8002b80:	d10b      	bne.n	8002b9a <_free_r+0x6e>
 8002b82:	6820      	ldr	r0, [r4, #0]
 8002b84:	1809      	adds	r1, r1, r0
 8002b86:	1850      	adds	r0, r2, r1
 8002b88:	6011      	str	r1, [r2, #0]
 8002b8a:	4283      	cmp	r3, r0
 8002b8c:	d1e0      	bne.n	8002b50 <_free_r+0x24>
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	1841      	adds	r1, r0, r1
 8002b94:	6011      	str	r1, [r2, #0]
 8002b96:	6053      	str	r3, [r2, #4]
 8002b98:	e7da      	b.n	8002b50 <_free_r+0x24>
 8002b9a:	42a0      	cmp	r0, r4
 8002b9c:	d902      	bls.n	8002ba4 <_free_r+0x78>
 8002b9e:	230c      	movs	r3, #12
 8002ba0:	602b      	str	r3, [r5, #0]
 8002ba2:	e7d5      	b.n	8002b50 <_free_r+0x24>
 8002ba4:	6820      	ldr	r0, [r4, #0]
 8002ba6:	1821      	adds	r1, r4, r0
 8002ba8:	428b      	cmp	r3, r1
 8002baa:	d103      	bne.n	8002bb4 <_free_r+0x88>
 8002bac:	6819      	ldr	r1, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	1809      	adds	r1, r1, r0
 8002bb2:	6021      	str	r1, [r4, #0]
 8002bb4:	6063      	str	r3, [r4, #4]
 8002bb6:	6054      	str	r4, [r2, #4]
 8002bb8:	e7ca      	b.n	8002b50 <_free_r+0x24>
 8002bba:	46c0      	nop			@ (mov r8, r8)
 8002bbc:	2000024c 	.word	0x2000024c

08002bc0 <sbrk_aligned>:
 8002bc0:	b570      	push	{r4, r5, r6, lr}
 8002bc2:	4e0f      	ldr	r6, [pc, #60]	@ (8002c00 <sbrk_aligned+0x40>)
 8002bc4:	000d      	movs	r5, r1
 8002bc6:	6831      	ldr	r1, [r6, #0]
 8002bc8:	0004      	movs	r4, r0
 8002bca:	2900      	cmp	r1, #0
 8002bcc:	d102      	bne.n	8002bd4 <sbrk_aligned+0x14>
 8002bce:	f000 fb99 	bl	8003304 <_sbrk_r>
 8002bd2:	6030      	str	r0, [r6, #0]
 8002bd4:	0029      	movs	r1, r5
 8002bd6:	0020      	movs	r0, r4
 8002bd8:	f000 fb94 	bl	8003304 <_sbrk_r>
 8002bdc:	1c43      	adds	r3, r0, #1
 8002bde:	d103      	bne.n	8002be8 <sbrk_aligned+0x28>
 8002be0:	2501      	movs	r5, #1
 8002be2:	426d      	negs	r5, r5
 8002be4:	0028      	movs	r0, r5
 8002be6:	bd70      	pop	{r4, r5, r6, pc}
 8002be8:	2303      	movs	r3, #3
 8002bea:	1cc5      	adds	r5, r0, #3
 8002bec:	439d      	bics	r5, r3
 8002bee:	42a8      	cmp	r0, r5
 8002bf0:	d0f8      	beq.n	8002be4 <sbrk_aligned+0x24>
 8002bf2:	1a29      	subs	r1, r5, r0
 8002bf4:	0020      	movs	r0, r4
 8002bf6:	f000 fb85 	bl	8003304 <_sbrk_r>
 8002bfa:	3001      	adds	r0, #1
 8002bfc:	d1f2      	bne.n	8002be4 <sbrk_aligned+0x24>
 8002bfe:	e7ef      	b.n	8002be0 <sbrk_aligned+0x20>
 8002c00:	20000248 	.word	0x20000248

08002c04 <_malloc_r>:
 8002c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c06:	2203      	movs	r2, #3
 8002c08:	1ccb      	adds	r3, r1, #3
 8002c0a:	4393      	bics	r3, r2
 8002c0c:	3308      	adds	r3, #8
 8002c0e:	0005      	movs	r5, r0
 8002c10:	001f      	movs	r7, r3
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d234      	bcs.n	8002c80 <_malloc_r+0x7c>
 8002c16:	270c      	movs	r7, #12
 8002c18:	42b9      	cmp	r1, r7
 8002c1a:	d833      	bhi.n	8002c84 <_malloc_r+0x80>
 8002c1c:	0028      	movs	r0, r5
 8002c1e:	f000 f871 	bl	8002d04 <__malloc_lock>
 8002c22:	4e37      	ldr	r6, [pc, #220]	@ (8002d00 <_malloc_r+0xfc>)
 8002c24:	6833      	ldr	r3, [r6, #0]
 8002c26:	001c      	movs	r4, r3
 8002c28:	2c00      	cmp	r4, #0
 8002c2a:	d12f      	bne.n	8002c8c <_malloc_r+0x88>
 8002c2c:	0039      	movs	r1, r7
 8002c2e:	0028      	movs	r0, r5
 8002c30:	f7ff ffc6 	bl	8002bc0 <sbrk_aligned>
 8002c34:	0004      	movs	r4, r0
 8002c36:	1c43      	adds	r3, r0, #1
 8002c38:	d15f      	bne.n	8002cfa <_malloc_r+0xf6>
 8002c3a:	6834      	ldr	r4, [r6, #0]
 8002c3c:	9400      	str	r4, [sp, #0]
 8002c3e:	9b00      	ldr	r3, [sp, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d14a      	bne.n	8002cda <_malloc_r+0xd6>
 8002c44:	2c00      	cmp	r4, #0
 8002c46:	d052      	beq.n	8002cee <_malloc_r+0xea>
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	0028      	movs	r0, r5
 8002c4c:	18e3      	adds	r3, r4, r3
 8002c4e:	9900      	ldr	r1, [sp, #0]
 8002c50:	9301      	str	r3, [sp, #4]
 8002c52:	f000 fb57 	bl	8003304 <_sbrk_r>
 8002c56:	9b01      	ldr	r3, [sp, #4]
 8002c58:	4283      	cmp	r3, r0
 8002c5a:	d148      	bne.n	8002cee <_malloc_r+0xea>
 8002c5c:	6823      	ldr	r3, [r4, #0]
 8002c5e:	0028      	movs	r0, r5
 8002c60:	1aff      	subs	r7, r7, r3
 8002c62:	0039      	movs	r1, r7
 8002c64:	f7ff ffac 	bl	8002bc0 <sbrk_aligned>
 8002c68:	3001      	adds	r0, #1
 8002c6a:	d040      	beq.n	8002cee <_malloc_r+0xea>
 8002c6c:	6823      	ldr	r3, [r4, #0]
 8002c6e:	19db      	adds	r3, r3, r7
 8002c70:	6023      	str	r3, [r4, #0]
 8002c72:	6833      	ldr	r3, [r6, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	2a00      	cmp	r2, #0
 8002c78:	d133      	bne.n	8002ce2 <_malloc_r+0xde>
 8002c7a:	9b00      	ldr	r3, [sp, #0]
 8002c7c:	6033      	str	r3, [r6, #0]
 8002c7e:	e019      	b.n	8002cb4 <_malloc_r+0xb0>
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	dac9      	bge.n	8002c18 <_malloc_r+0x14>
 8002c84:	230c      	movs	r3, #12
 8002c86:	602b      	str	r3, [r5, #0]
 8002c88:	2000      	movs	r0, #0
 8002c8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c8c:	6821      	ldr	r1, [r4, #0]
 8002c8e:	1bc9      	subs	r1, r1, r7
 8002c90:	d420      	bmi.n	8002cd4 <_malloc_r+0xd0>
 8002c92:	290b      	cmp	r1, #11
 8002c94:	d90a      	bls.n	8002cac <_malloc_r+0xa8>
 8002c96:	19e2      	adds	r2, r4, r7
 8002c98:	6027      	str	r7, [r4, #0]
 8002c9a:	42a3      	cmp	r3, r4
 8002c9c:	d104      	bne.n	8002ca8 <_malloc_r+0xa4>
 8002c9e:	6032      	str	r2, [r6, #0]
 8002ca0:	6863      	ldr	r3, [r4, #4]
 8002ca2:	6011      	str	r1, [r2, #0]
 8002ca4:	6053      	str	r3, [r2, #4]
 8002ca6:	e005      	b.n	8002cb4 <_malloc_r+0xb0>
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	e7f9      	b.n	8002ca0 <_malloc_r+0x9c>
 8002cac:	6862      	ldr	r2, [r4, #4]
 8002cae:	42a3      	cmp	r3, r4
 8002cb0:	d10e      	bne.n	8002cd0 <_malloc_r+0xcc>
 8002cb2:	6032      	str	r2, [r6, #0]
 8002cb4:	0028      	movs	r0, r5
 8002cb6:	f000 f82d 	bl	8002d14 <__malloc_unlock>
 8002cba:	0020      	movs	r0, r4
 8002cbc:	2207      	movs	r2, #7
 8002cbe:	300b      	adds	r0, #11
 8002cc0:	1d23      	adds	r3, r4, #4
 8002cc2:	4390      	bics	r0, r2
 8002cc4:	1ac2      	subs	r2, r0, r3
 8002cc6:	4298      	cmp	r0, r3
 8002cc8:	d0df      	beq.n	8002c8a <_malloc_r+0x86>
 8002cca:	1a1b      	subs	r3, r3, r0
 8002ccc:	50a3      	str	r3, [r4, r2]
 8002cce:	e7dc      	b.n	8002c8a <_malloc_r+0x86>
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	e7ef      	b.n	8002cb4 <_malloc_r+0xb0>
 8002cd4:	0023      	movs	r3, r4
 8002cd6:	6864      	ldr	r4, [r4, #4]
 8002cd8:	e7a6      	b.n	8002c28 <_malloc_r+0x24>
 8002cda:	9c00      	ldr	r4, [sp, #0]
 8002cdc:	6863      	ldr	r3, [r4, #4]
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	e7ad      	b.n	8002c3e <_malloc_r+0x3a>
 8002ce2:	001a      	movs	r2, r3
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	42a3      	cmp	r3, r4
 8002ce8:	d1fb      	bne.n	8002ce2 <_malloc_r+0xde>
 8002cea:	2300      	movs	r3, #0
 8002cec:	e7da      	b.n	8002ca4 <_malloc_r+0xa0>
 8002cee:	230c      	movs	r3, #12
 8002cf0:	0028      	movs	r0, r5
 8002cf2:	602b      	str	r3, [r5, #0]
 8002cf4:	f000 f80e 	bl	8002d14 <__malloc_unlock>
 8002cf8:	e7c6      	b.n	8002c88 <_malloc_r+0x84>
 8002cfa:	6007      	str	r7, [r0, #0]
 8002cfc:	e7da      	b.n	8002cb4 <_malloc_r+0xb0>
 8002cfe:	46c0      	nop			@ (mov r8, r8)
 8002d00:	2000024c 	.word	0x2000024c

08002d04 <__malloc_lock>:
 8002d04:	b510      	push	{r4, lr}
 8002d06:	4802      	ldr	r0, [pc, #8]	@ (8002d10 <__malloc_lock+0xc>)
 8002d08:	f7ff ff0e 	bl	8002b28 <__retarget_lock_acquire_recursive>
 8002d0c:	bd10      	pop	{r4, pc}
 8002d0e:	46c0      	nop			@ (mov r8, r8)
 8002d10:	20000244 	.word	0x20000244

08002d14 <__malloc_unlock>:
 8002d14:	b510      	push	{r4, lr}
 8002d16:	4802      	ldr	r0, [pc, #8]	@ (8002d20 <__malloc_unlock+0xc>)
 8002d18:	f7ff ff07 	bl	8002b2a <__retarget_lock_release_recursive>
 8002d1c:	bd10      	pop	{r4, pc}
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	20000244 	.word	0x20000244

08002d24 <__ssputs_r>:
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	688e      	ldr	r6, [r1, #8]
 8002d28:	b085      	sub	sp, #20
 8002d2a:	001f      	movs	r7, r3
 8002d2c:	000c      	movs	r4, r1
 8002d2e:	680b      	ldr	r3, [r1, #0]
 8002d30:	9002      	str	r0, [sp, #8]
 8002d32:	9203      	str	r2, [sp, #12]
 8002d34:	42be      	cmp	r6, r7
 8002d36:	d830      	bhi.n	8002d9a <__ssputs_r+0x76>
 8002d38:	210c      	movs	r1, #12
 8002d3a:	5e62      	ldrsh	r2, [r4, r1]
 8002d3c:	2190      	movs	r1, #144	@ 0x90
 8002d3e:	00c9      	lsls	r1, r1, #3
 8002d40:	420a      	tst	r2, r1
 8002d42:	d028      	beq.n	8002d96 <__ssputs_r+0x72>
 8002d44:	2003      	movs	r0, #3
 8002d46:	6921      	ldr	r1, [r4, #16]
 8002d48:	1a5b      	subs	r3, r3, r1
 8002d4a:	9301      	str	r3, [sp, #4]
 8002d4c:	6963      	ldr	r3, [r4, #20]
 8002d4e:	4343      	muls	r3, r0
 8002d50:	9801      	ldr	r0, [sp, #4]
 8002d52:	0fdd      	lsrs	r5, r3, #31
 8002d54:	18ed      	adds	r5, r5, r3
 8002d56:	1c7b      	adds	r3, r7, #1
 8002d58:	181b      	adds	r3, r3, r0
 8002d5a:	106d      	asrs	r5, r5, #1
 8002d5c:	42ab      	cmp	r3, r5
 8002d5e:	d900      	bls.n	8002d62 <__ssputs_r+0x3e>
 8002d60:	001d      	movs	r5, r3
 8002d62:	0552      	lsls	r2, r2, #21
 8002d64:	d528      	bpl.n	8002db8 <__ssputs_r+0x94>
 8002d66:	0029      	movs	r1, r5
 8002d68:	9802      	ldr	r0, [sp, #8]
 8002d6a:	f7ff ff4b 	bl	8002c04 <_malloc_r>
 8002d6e:	1e06      	subs	r6, r0, #0
 8002d70:	d02c      	beq.n	8002dcc <__ssputs_r+0xa8>
 8002d72:	9a01      	ldr	r2, [sp, #4]
 8002d74:	6921      	ldr	r1, [r4, #16]
 8002d76:	f000 fae2 	bl	800333e <memcpy>
 8002d7a:	89a2      	ldrh	r2, [r4, #12]
 8002d7c:	4b18      	ldr	r3, [pc, #96]	@ (8002de0 <__ssputs_r+0xbc>)
 8002d7e:	401a      	ands	r2, r3
 8002d80:	2380      	movs	r3, #128	@ 0x80
 8002d82:	4313      	orrs	r3, r2
 8002d84:	81a3      	strh	r3, [r4, #12]
 8002d86:	9b01      	ldr	r3, [sp, #4]
 8002d88:	6126      	str	r6, [r4, #16]
 8002d8a:	18f6      	adds	r6, r6, r3
 8002d8c:	6026      	str	r6, [r4, #0]
 8002d8e:	003e      	movs	r6, r7
 8002d90:	6165      	str	r5, [r4, #20]
 8002d92:	1aed      	subs	r5, r5, r3
 8002d94:	60a5      	str	r5, [r4, #8]
 8002d96:	42be      	cmp	r6, r7
 8002d98:	d900      	bls.n	8002d9c <__ssputs_r+0x78>
 8002d9a:	003e      	movs	r6, r7
 8002d9c:	0032      	movs	r2, r6
 8002d9e:	9903      	ldr	r1, [sp, #12]
 8002da0:	6820      	ldr	r0, [r4, #0]
 8002da2:	f000 fa9b 	bl	80032dc <memmove>
 8002da6:	2000      	movs	r0, #0
 8002da8:	68a3      	ldr	r3, [r4, #8]
 8002daa:	1b9b      	subs	r3, r3, r6
 8002dac:	60a3      	str	r3, [r4, #8]
 8002dae:	6823      	ldr	r3, [r4, #0]
 8002db0:	199b      	adds	r3, r3, r6
 8002db2:	6023      	str	r3, [r4, #0]
 8002db4:	b005      	add	sp, #20
 8002db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002db8:	002a      	movs	r2, r5
 8002dba:	9802      	ldr	r0, [sp, #8]
 8002dbc:	f000 fac8 	bl	8003350 <_realloc_r>
 8002dc0:	1e06      	subs	r6, r0, #0
 8002dc2:	d1e0      	bne.n	8002d86 <__ssputs_r+0x62>
 8002dc4:	6921      	ldr	r1, [r4, #16]
 8002dc6:	9802      	ldr	r0, [sp, #8]
 8002dc8:	f7ff feb0 	bl	8002b2c <_free_r>
 8002dcc:	230c      	movs	r3, #12
 8002dce:	2001      	movs	r0, #1
 8002dd0:	9a02      	ldr	r2, [sp, #8]
 8002dd2:	4240      	negs	r0, r0
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	89a2      	ldrh	r2, [r4, #12]
 8002dd8:	3334      	adds	r3, #52	@ 0x34
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	81a3      	strh	r3, [r4, #12]
 8002dde:	e7e9      	b.n	8002db4 <__ssputs_r+0x90>
 8002de0:	fffffb7f 	.word	0xfffffb7f

08002de4 <_svfiprintf_r>:
 8002de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002de6:	b0a1      	sub	sp, #132	@ 0x84
 8002de8:	9003      	str	r0, [sp, #12]
 8002dea:	001d      	movs	r5, r3
 8002dec:	898b      	ldrh	r3, [r1, #12]
 8002dee:	000f      	movs	r7, r1
 8002df0:	0016      	movs	r6, r2
 8002df2:	061b      	lsls	r3, r3, #24
 8002df4:	d511      	bpl.n	8002e1a <_svfiprintf_r+0x36>
 8002df6:	690b      	ldr	r3, [r1, #16]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10e      	bne.n	8002e1a <_svfiprintf_r+0x36>
 8002dfc:	2140      	movs	r1, #64	@ 0x40
 8002dfe:	f7ff ff01 	bl	8002c04 <_malloc_r>
 8002e02:	6038      	str	r0, [r7, #0]
 8002e04:	6138      	str	r0, [r7, #16]
 8002e06:	2800      	cmp	r0, #0
 8002e08:	d105      	bne.n	8002e16 <_svfiprintf_r+0x32>
 8002e0a:	230c      	movs	r3, #12
 8002e0c:	9a03      	ldr	r2, [sp, #12]
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	2001      	movs	r0, #1
 8002e12:	4240      	negs	r0, r0
 8002e14:	e0cf      	b.n	8002fb6 <_svfiprintf_r+0x1d2>
 8002e16:	2340      	movs	r3, #64	@ 0x40
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	ac08      	add	r4, sp, #32
 8002e1e:	6163      	str	r3, [r4, #20]
 8002e20:	3320      	adds	r3, #32
 8002e22:	7663      	strb	r3, [r4, #25]
 8002e24:	3310      	adds	r3, #16
 8002e26:	76a3      	strb	r3, [r4, #26]
 8002e28:	9507      	str	r5, [sp, #28]
 8002e2a:	0035      	movs	r5, r6
 8002e2c:	782b      	ldrb	r3, [r5, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <_svfiprintf_r+0x52>
 8002e32:	2b25      	cmp	r3, #37	@ 0x25
 8002e34:	d148      	bne.n	8002ec8 <_svfiprintf_r+0xe4>
 8002e36:	1bab      	subs	r3, r5, r6
 8002e38:	9305      	str	r3, [sp, #20]
 8002e3a:	42b5      	cmp	r5, r6
 8002e3c:	d00b      	beq.n	8002e56 <_svfiprintf_r+0x72>
 8002e3e:	0032      	movs	r2, r6
 8002e40:	0039      	movs	r1, r7
 8002e42:	9803      	ldr	r0, [sp, #12]
 8002e44:	f7ff ff6e 	bl	8002d24 <__ssputs_r>
 8002e48:	3001      	adds	r0, #1
 8002e4a:	d100      	bne.n	8002e4e <_svfiprintf_r+0x6a>
 8002e4c:	e0ae      	b.n	8002fac <_svfiprintf_r+0x1c8>
 8002e4e:	6963      	ldr	r3, [r4, #20]
 8002e50:	9a05      	ldr	r2, [sp, #20]
 8002e52:	189b      	adds	r3, r3, r2
 8002e54:	6163      	str	r3, [r4, #20]
 8002e56:	782b      	ldrb	r3, [r5, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d100      	bne.n	8002e5e <_svfiprintf_r+0x7a>
 8002e5c:	e0a6      	b.n	8002fac <_svfiprintf_r+0x1c8>
 8002e5e:	2201      	movs	r2, #1
 8002e60:	2300      	movs	r3, #0
 8002e62:	4252      	negs	r2, r2
 8002e64:	6062      	str	r2, [r4, #4]
 8002e66:	a904      	add	r1, sp, #16
 8002e68:	3254      	adds	r2, #84	@ 0x54
 8002e6a:	1852      	adds	r2, r2, r1
 8002e6c:	1c6e      	adds	r6, r5, #1
 8002e6e:	6023      	str	r3, [r4, #0]
 8002e70:	60e3      	str	r3, [r4, #12]
 8002e72:	60a3      	str	r3, [r4, #8]
 8002e74:	7013      	strb	r3, [r2, #0]
 8002e76:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002e78:	4b54      	ldr	r3, [pc, #336]	@ (8002fcc <_svfiprintf_r+0x1e8>)
 8002e7a:	2205      	movs	r2, #5
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	7831      	ldrb	r1, [r6, #0]
 8002e80:	9305      	str	r3, [sp, #20]
 8002e82:	f000 fa51 	bl	8003328 <memchr>
 8002e86:	1c75      	adds	r5, r6, #1
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	d11f      	bne.n	8002ecc <_svfiprintf_r+0xe8>
 8002e8c:	6822      	ldr	r2, [r4, #0]
 8002e8e:	06d3      	lsls	r3, r2, #27
 8002e90:	d504      	bpl.n	8002e9c <_svfiprintf_r+0xb8>
 8002e92:	2353      	movs	r3, #83	@ 0x53
 8002e94:	a904      	add	r1, sp, #16
 8002e96:	185b      	adds	r3, r3, r1
 8002e98:	2120      	movs	r1, #32
 8002e9a:	7019      	strb	r1, [r3, #0]
 8002e9c:	0713      	lsls	r3, r2, #28
 8002e9e:	d504      	bpl.n	8002eaa <_svfiprintf_r+0xc6>
 8002ea0:	2353      	movs	r3, #83	@ 0x53
 8002ea2:	a904      	add	r1, sp, #16
 8002ea4:	185b      	adds	r3, r3, r1
 8002ea6:	212b      	movs	r1, #43	@ 0x2b
 8002ea8:	7019      	strb	r1, [r3, #0]
 8002eaa:	7833      	ldrb	r3, [r6, #0]
 8002eac:	2b2a      	cmp	r3, #42	@ 0x2a
 8002eae:	d016      	beq.n	8002ede <_svfiprintf_r+0xfa>
 8002eb0:	0035      	movs	r5, r6
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	200a      	movs	r0, #10
 8002eb6:	68e3      	ldr	r3, [r4, #12]
 8002eb8:	782a      	ldrb	r2, [r5, #0]
 8002eba:	1c6e      	adds	r6, r5, #1
 8002ebc:	3a30      	subs	r2, #48	@ 0x30
 8002ebe:	2a09      	cmp	r2, #9
 8002ec0:	d950      	bls.n	8002f64 <_svfiprintf_r+0x180>
 8002ec2:	2900      	cmp	r1, #0
 8002ec4:	d111      	bne.n	8002eea <_svfiprintf_r+0x106>
 8002ec6:	e017      	b.n	8002ef8 <_svfiprintf_r+0x114>
 8002ec8:	3501      	adds	r5, #1
 8002eca:	e7af      	b.n	8002e2c <_svfiprintf_r+0x48>
 8002ecc:	9b05      	ldr	r3, [sp, #20]
 8002ece:	6822      	ldr	r2, [r4, #0]
 8002ed0:	1ac0      	subs	r0, r0, r3
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	4083      	lsls	r3, r0
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	002e      	movs	r6, r5
 8002eda:	6023      	str	r3, [r4, #0]
 8002edc:	e7cc      	b.n	8002e78 <_svfiprintf_r+0x94>
 8002ede:	9b07      	ldr	r3, [sp, #28]
 8002ee0:	1d19      	adds	r1, r3, #4
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	9107      	str	r1, [sp, #28]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	db01      	blt.n	8002eee <_svfiprintf_r+0x10a>
 8002eea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002eec:	e004      	b.n	8002ef8 <_svfiprintf_r+0x114>
 8002eee:	425b      	negs	r3, r3
 8002ef0:	60e3      	str	r3, [r4, #12]
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	6023      	str	r3, [r4, #0]
 8002ef8:	782b      	ldrb	r3, [r5, #0]
 8002efa:	2b2e      	cmp	r3, #46	@ 0x2e
 8002efc:	d10c      	bne.n	8002f18 <_svfiprintf_r+0x134>
 8002efe:	786b      	ldrb	r3, [r5, #1]
 8002f00:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f02:	d134      	bne.n	8002f6e <_svfiprintf_r+0x18a>
 8002f04:	9b07      	ldr	r3, [sp, #28]
 8002f06:	3502      	adds	r5, #2
 8002f08:	1d1a      	adds	r2, r3, #4
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	9207      	str	r2, [sp, #28]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	da01      	bge.n	8002f16 <_svfiprintf_r+0x132>
 8002f12:	2301      	movs	r3, #1
 8002f14:	425b      	negs	r3, r3
 8002f16:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f18:	4e2d      	ldr	r6, [pc, #180]	@ (8002fd0 <_svfiprintf_r+0x1ec>)
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	0030      	movs	r0, r6
 8002f1e:	7829      	ldrb	r1, [r5, #0]
 8002f20:	f000 fa02 	bl	8003328 <memchr>
 8002f24:	2800      	cmp	r0, #0
 8002f26:	d006      	beq.n	8002f36 <_svfiprintf_r+0x152>
 8002f28:	2340      	movs	r3, #64	@ 0x40
 8002f2a:	1b80      	subs	r0, r0, r6
 8002f2c:	4083      	lsls	r3, r0
 8002f2e:	6822      	ldr	r2, [r4, #0]
 8002f30:	3501      	adds	r5, #1
 8002f32:	4313      	orrs	r3, r2
 8002f34:	6023      	str	r3, [r4, #0]
 8002f36:	7829      	ldrb	r1, [r5, #0]
 8002f38:	2206      	movs	r2, #6
 8002f3a:	4826      	ldr	r0, [pc, #152]	@ (8002fd4 <_svfiprintf_r+0x1f0>)
 8002f3c:	1c6e      	adds	r6, r5, #1
 8002f3e:	7621      	strb	r1, [r4, #24]
 8002f40:	f000 f9f2 	bl	8003328 <memchr>
 8002f44:	2800      	cmp	r0, #0
 8002f46:	d038      	beq.n	8002fba <_svfiprintf_r+0x1d6>
 8002f48:	4b23      	ldr	r3, [pc, #140]	@ (8002fd8 <_svfiprintf_r+0x1f4>)
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d122      	bne.n	8002f94 <_svfiprintf_r+0x1b0>
 8002f4e:	2207      	movs	r2, #7
 8002f50:	9b07      	ldr	r3, [sp, #28]
 8002f52:	3307      	adds	r3, #7
 8002f54:	4393      	bics	r3, r2
 8002f56:	3308      	adds	r3, #8
 8002f58:	9307      	str	r3, [sp, #28]
 8002f5a:	6963      	ldr	r3, [r4, #20]
 8002f5c:	9a04      	ldr	r2, [sp, #16]
 8002f5e:	189b      	adds	r3, r3, r2
 8002f60:	6163      	str	r3, [r4, #20]
 8002f62:	e762      	b.n	8002e2a <_svfiprintf_r+0x46>
 8002f64:	4343      	muls	r3, r0
 8002f66:	0035      	movs	r5, r6
 8002f68:	2101      	movs	r1, #1
 8002f6a:	189b      	adds	r3, r3, r2
 8002f6c:	e7a4      	b.n	8002eb8 <_svfiprintf_r+0xd4>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	200a      	movs	r0, #10
 8002f72:	0019      	movs	r1, r3
 8002f74:	3501      	adds	r5, #1
 8002f76:	6063      	str	r3, [r4, #4]
 8002f78:	782a      	ldrb	r2, [r5, #0]
 8002f7a:	1c6e      	adds	r6, r5, #1
 8002f7c:	3a30      	subs	r2, #48	@ 0x30
 8002f7e:	2a09      	cmp	r2, #9
 8002f80:	d903      	bls.n	8002f8a <_svfiprintf_r+0x1a6>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0c8      	beq.n	8002f18 <_svfiprintf_r+0x134>
 8002f86:	9109      	str	r1, [sp, #36]	@ 0x24
 8002f88:	e7c6      	b.n	8002f18 <_svfiprintf_r+0x134>
 8002f8a:	4341      	muls	r1, r0
 8002f8c:	0035      	movs	r5, r6
 8002f8e:	2301      	movs	r3, #1
 8002f90:	1889      	adds	r1, r1, r2
 8002f92:	e7f1      	b.n	8002f78 <_svfiprintf_r+0x194>
 8002f94:	aa07      	add	r2, sp, #28
 8002f96:	9200      	str	r2, [sp, #0]
 8002f98:	0021      	movs	r1, r4
 8002f9a:	003a      	movs	r2, r7
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002fdc <_svfiprintf_r+0x1f8>)
 8002f9e:	9803      	ldr	r0, [sp, #12]
 8002fa0:	e000      	b.n	8002fa4 <_svfiprintf_r+0x1c0>
 8002fa2:	bf00      	nop
 8002fa4:	9004      	str	r0, [sp, #16]
 8002fa6:	9b04      	ldr	r3, [sp, #16]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	d1d6      	bne.n	8002f5a <_svfiprintf_r+0x176>
 8002fac:	89bb      	ldrh	r3, [r7, #12]
 8002fae:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002fb0:	065b      	lsls	r3, r3, #25
 8002fb2:	d500      	bpl.n	8002fb6 <_svfiprintf_r+0x1d2>
 8002fb4:	e72c      	b.n	8002e10 <_svfiprintf_r+0x2c>
 8002fb6:	b021      	add	sp, #132	@ 0x84
 8002fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fba:	aa07      	add	r2, sp, #28
 8002fbc:	9200      	str	r2, [sp, #0]
 8002fbe:	0021      	movs	r1, r4
 8002fc0:	003a      	movs	r2, r7
 8002fc2:	4b06      	ldr	r3, [pc, #24]	@ (8002fdc <_svfiprintf_r+0x1f8>)
 8002fc4:	9803      	ldr	r0, [sp, #12]
 8002fc6:	f000 f87b 	bl	80030c0 <_printf_i>
 8002fca:	e7eb      	b.n	8002fa4 <_svfiprintf_r+0x1c0>
 8002fcc:	08003428 	.word	0x08003428
 8002fd0:	0800342e 	.word	0x0800342e
 8002fd4:	08003432 	.word	0x08003432
 8002fd8:	00000000 	.word	0x00000000
 8002fdc:	08002d25 	.word	0x08002d25

08002fe0 <_printf_common>:
 8002fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fe2:	0016      	movs	r6, r2
 8002fe4:	9301      	str	r3, [sp, #4]
 8002fe6:	688a      	ldr	r2, [r1, #8]
 8002fe8:	690b      	ldr	r3, [r1, #16]
 8002fea:	000c      	movs	r4, r1
 8002fec:	9000      	str	r0, [sp, #0]
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	da00      	bge.n	8002ff4 <_printf_common+0x14>
 8002ff2:	0013      	movs	r3, r2
 8002ff4:	0022      	movs	r2, r4
 8002ff6:	6033      	str	r3, [r6, #0]
 8002ff8:	3243      	adds	r2, #67	@ 0x43
 8002ffa:	7812      	ldrb	r2, [r2, #0]
 8002ffc:	2a00      	cmp	r2, #0
 8002ffe:	d001      	beq.n	8003004 <_printf_common+0x24>
 8003000:	3301      	adds	r3, #1
 8003002:	6033      	str	r3, [r6, #0]
 8003004:	6823      	ldr	r3, [r4, #0]
 8003006:	069b      	lsls	r3, r3, #26
 8003008:	d502      	bpl.n	8003010 <_printf_common+0x30>
 800300a:	6833      	ldr	r3, [r6, #0]
 800300c:	3302      	adds	r3, #2
 800300e:	6033      	str	r3, [r6, #0]
 8003010:	6822      	ldr	r2, [r4, #0]
 8003012:	2306      	movs	r3, #6
 8003014:	0015      	movs	r5, r2
 8003016:	401d      	ands	r5, r3
 8003018:	421a      	tst	r2, r3
 800301a:	d027      	beq.n	800306c <_printf_common+0x8c>
 800301c:	0023      	movs	r3, r4
 800301e:	3343      	adds	r3, #67	@ 0x43
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	1e5a      	subs	r2, r3, #1
 8003024:	4193      	sbcs	r3, r2
 8003026:	6822      	ldr	r2, [r4, #0]
 8003028:	0692      	lsls	r2, r2, #26
 800302a:	d430      	bmi.n	800308e <_printf_common+0xae>
 800302c:	0022      	movs	r2, r4
 800302e:	9901      	ldr	r1, [sp, #4]
 8003030:	9800      	ldr	r0, [sp, #0]
 8003032:	9d08      	ldr	r5, [sp, #32]
 8003034:	3243      	adds	r2, #67	@ 0x43
 8003036:	47a8      	blx	r5
 8003038:	3001      	adds	r0, #1
 800303a:	d025      	beq.n	8003088 <_printf_common+0xa8>
 800303c:	2206      	movs	r2, #6
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	2500      	movs	r5, #0
 8003042:	4013      	ands	r3, r2
 8003044:	2b04      	cmp	r3, #4
 8003046:	d105      	bne.n	8003054 <_printf_common+0x74>
 8003048:	6833      	ldr	r3, [r6, #0]
 800304a:	68e5      	ldr	r5, [r4, #12]
 800304c:	1aed      	subs	r5, r5, r3
 800304e:	43eb      	mvns	r3, r5
 8003050:	17db      	asrs	r3, r3, #31
 8003052:	401d      	ands	r5, r3
 8003054:	68a3      	ldr	r3, [r4, #8]
 8003056:	6922      	ldr	r2, [r4, #16]
 8003058:	4293      	cmp	r3, r2
 800305a:	dd01      	ble.n	8003060 <_printf_common+0x80>
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	18ed      	adds	r5, r5, r3
 8003060:	2600      	movs	r6, #0
 8003062:	42b5      	cmp	r5, r6
 8003064:	d120      	bne.n	80030a8 <_printf_common+0xc8>
 8003066:	2000      	movs	r0, #0
 8003068:	e010      	b.n	800308c <_printf_common+0xac>
 800306a:	3501      	adds	r5, #1
 800306c:	68e3      	ldr	r3, [r4, #12]
 800306e:	6832      	ldr	r2, [r6, #0]
 8003070:	1a9b      	subs	r3, r3, r2
 8003072:	42ab      	cmp	r3, r5
 8003074:	ddd2      	ble.n	800301c <_printf_common+0x3c>
 8003076:	0022      	movs	r2, r4
 8003078:	2301      	movs	r3, #1
 800307a:	9901      	ldr	r1, [sp, #4]
 800307c:	9800      	ldr	r0, [sp, #0]
 800307e:	9f08      	ldr	r7, [sp, #32]
 8003080:	3219      	adds	r2, #25
 8003082:	47b8      	blx	r7
 8003084:	3001      	adds	r0, #1
 8003086:	d1f0      	bne.n	800306a <_printf_common+0x8a>
 8003088:	2001      	movs	r0, #1
 800308a:	4240      	negs	r0, r0
 800308c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800308e:	2030      	movs	r0, #48	@ 0x30
 8003090:	18e1      	adds	r1, r4, r3
 8003092:	3143      	adds	r1, #67	@ 0x43
 8003094:	7008      	strb	r0, [r1, #0]
 8003096:	0021      	movs	r1, r4
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	3145      	adds	r1, #69	@ 0x45
 800309c:	7809      	ldrb	r1, [r1, #0]
 800309e:	18a2      	adds	r2, r4, r2
 80030a0:	3243      	adds	r2, #67	@ 0x43
 80030a2:	3302      	adds	r3, #2
 80030a4:	7011      	strb	r1, [r2, #0]
 80030a6:	e7c1      	b.n	800302c <_printf_common+0x4c>
 80030a8:	0022      	movs	r2, r4
 80030aa:	2301      	movs	r3, #1
 80030ac:	9901      	ldr	r1, [sp, #4]
 80030ae:	9800      	ldr	r0, [sp, #0]
 80030b0:	9f08      	ldr	r7, [sp, #32]
 80030b2:	321a      	adds	r2, #26
 80030b4:	47b8      	blx	r7
 80030b6:	3001      	adds	r0, #1
 80030b8:	d0e6      	beq.n	8003088 <_printf_common+0xa8>
 80030ba:	3601      	adds	r6, #1
 80030bc:	e7d1      	b.n	8003062 <_printf_common+0x82>
	...

080030c0 <_printf_i>:
 80030c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c2:	b08b      	sub	sp, #44	@ 0x2c
 80030c4:	9206      	str	r2, [sp, #24]
 80030c6:	000a      	movs	r2, r1
 80030c8:	3243      	adds	r2, #67	@ 0x43
 80030ca:	9307      	str	r3, [sp, #28]
 80030cc:	9005      	str	r0, [sp, #20]
 80030ce:	9203      	str	r2, [sp, #12]
 80030d0:	7e0a      	ldrb	r2, [r1, #24]
 80030d2:	000c      	movs	r4, r1
 80030d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80030d6:	2a78      	cmp	r2, #120	@ 0x78
 80030d8:	d809      	bhi.n	80030ee <_printf_i+0x2e>
 80030da:	2a62      	cmp	r2, #98	@ 0x62
 80030dc:	d80b      	bhi.n	80030f6 <_printf_i+0x36>
 80030de:	2a00      	cmp	r2, #0
 80030e0:	d100      	bne.n	80030e4 <_printf_i+0x24>
 80030e2:	e0bc      	b.n	800325e <_printf_i+0x19e>
 80030e4:	497b      	ldr	r1, [pc, #492]	@ (80032d4 <_printf_i+0x214>)
 80030e6:	9104      	str	r1, [sp, #16]
 80030e8:	2a58      	cmp	r2, #88	@ 0x58
 80030ea:	d100      	bne.n	80030ee <_printf_i+0x2e>
 80030ec:	e090      	b.n	8003210 <_printf_i+0x150>
 80030ee:	0025      	movs	r5, r4
 80030f0:	3542      	adds	r5, #66	@ 0x42
 80030f2:	702a      	strb	r2, [r5, #0]
 80030f4:	e022      	b.n	800313c <_printf_i+0x7c>
 80030f6:	0010      	movs	r0, r2
 80030f8:	3863      	subs	r0, #99	@ 0x63
 80030fa:	2815      	cmp	r0, #21
 80030fc:	d8f7      	bhi.n	80030ee <_printf_i+0x2e>
 80030fe:	f7fd f80b 	bl	8000118 <__gnu_thumb1_case_shi>
 8003102:	0016      	.short	0x0016
 8003104:	fff6001f 	.word	0xfff6001f
 8003108:	fff6fff6 	.word	0xfff6fff6
 800310c:	001ffff6 	.word	0x001ffff6
 8003110:	fff6fff6 	.word	0xfff6fff6
 8003114:	fff6fff6 	.word	0xfff6fff6
 8003118:	003600a1 	.word	0x003600a1
 800311c:	fff60080 	.word	0xfff60080
 8003120:	00b2fff6 	.word	0x00b2fff6
 8003124:	0036fff6 	.word	0x0036fff6
 8003128:	fff6fff6 	.word	0xfff6fff6
 800312c:	0084      	.short	0x0084
 800312e:	0025      	movs	r5, r4
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	3542      	adds	r5, #66	@ 0x42
 8003134:	1d11      	adds	r1, r2, #4
 8003136:	6019      	str	r1, [r3, #0]
 8003138:	6813      	ldr	r3, [r2, #0]
 800313a:	702b      	strb	r3, [r5, #0]
 800313c:	2301      	movs	r3, #1
 800313e:	e0a0      	b.n	8003282 <_printf_i+0x1c2>
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	6809      	ldr	r1, [r1, #0]
 8003144:	1d02      	adds	r2, r0, #4
 8003146:	060d      	lsls	r5, r1, #24
 8003148:	d50b      	bpl.n	8003162 <_printf_i+0xa2>
 800314a:	6806      	ldr	r6, [r0, #0]
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	2e00      	cmp	r6, #0
 8003150:	da03      	bge.n	800315a <_printf_i+0x9a>
 8003152:	232d      	movs	r3, #45	@ 0x2d
 8003154:	9a03      	ldr	r2, [sp, #12]
 8003156:	4276      	negs	r6, r6
 8003158:	7013      	strb	r3, [r2, #0]
 800315a:	4b5e      	ldr	r3, [pc, #376]	@ (80032d4 <_printf_i+0x214>)
 800315c:	270a      	movs	r7, #10
 800315e:	9304      	str	r3, [sp, #16]
 8003160:	e018      	b.n	8003194 <_printf_i+0xd4>
 8003162:	6806      	ldr	r6, [r0, #0]
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	0649      	lsls	r1, r1, #25
 8003168:	d5f1      	bpl.n	800314e <_printf_i+0x8e>
 800316a:	b236      	sxth	r6, r6
 800316c:	e7ef      	b.n	800314e <_printf_i+0x8e>
 800316e:	6808      	ldr	r0, [r1, #0]
 8003170:	6819      	ldr	r1, [r3, #0]
 8003172:	c940      	ldmia	r1!, {r6}
 8003174:	0605      	lsls	r5, r0, #24
 8003176:	d402      	bmi.n	800317e <_printf_i+0xbe>
 8003178:	0640      	lsls	r0, r0, #25
 800317a:	d500      	bpl.n	800317e <_printf_i+0xbe>
 800317c:	b2b6      	uxth	r6, r6
 800317e:	6019      	str	r1, [r3, #0]
 8003180:	4b54      	ldr	r3, [pc, #336]	@ (80032d4 <_printf_i+0x214>)
 8003182:	270a      	movs	r7, #10
 8003184:	9304      	str	r3, [sp, #16]
 8003186:	2a6f      	cmp	r2, #111	@ 0x6f
 8003188:	d100      	bne.n	800318c <_printf_i+0xcc>
 800318a:	3f02      	subs	r7, #2
 800318c:	0023      	movs	r3, r4
 800318e:	2200      	movs	r2, #0
 8003190:	3343      	adds	r3, #67	@ 0x43
 8003192:	701a      	strb	r2, [r3, #0]
 8003194:	6863      	ldr	r3, [r4, #4]
 8003196:	60a3      	str	r3, [r4, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	db03      	blt.n	80031a4 <_printf_i+0xe4>
 800319c:	2104      	movs	r1, #4
 800319e:	6822      	ldr	r2, [r4, #0]
 80031a0:	438a      	bics	r2, r1
 80031a2:	6022      	str	r2, [r4, #0]
 80031a4:	2e00      	cmp	r6, #0
 80031a6:	d102      	bne.n	80031ae <_printf_i+0xee>
 80031a8:	9d03      	ldr	r5, [sp, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00c      	beq.n	80031c8 <_printf_i+0x108>
 80031ae:	9d03      	ldr	r5, [sp, #12]
 80031b0:	0030      	movs	r0, r6
 80031b2:	0039      	movs	r1, r7
 80031b4:	f7fd f840 	bl	8000238 <__aeabi_uidivmod>
 80031b8:	9b04      	ldr	r3, [sp, #16]
 80031ba:	3d01      	subs	r5, #1
 80031bc:	5c5b      	ldrb	r3, [r3, r1]
 80031be:	702b      	strb	r3, [r5, #0]
 80031c0:	0033      	movs	r3, r6
 80031c2:	0006      	movs	r6, r0
 80031c4:	429f      	cmp	r7, r3
 80031c6:	d9f3      	bls.n	80031b0 <_printf_i+0xf0>
 80031c8:	2f08      	cmp	r7, #8
 80031ca:	d109      	bne.n	80031e0 <_printf_i+0x120>
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	07db      	lsls	r3, r3, #31
 80031d0:	d506      	bpl.n	80031e0 <_printf_i+0x120>
 80031d2:	6862      	ldr	r2, [r4, #4]
 80031d4:	6923      	ldr	r3, [r4, #16]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	dc02      	bgt.n	80031e0 <_printf_i+0x120>
 80031da:	2330      	movs	r3, #48	@ 0x30
 80031dc:	3d01      	subs	r5, #1
 80031de:	702b      	strb	r3, [r5, #0]
 80031e0:	9b03      	ldr	r3, [sp, #12]
 80031e2:	1b5b      	subs	r3, r3, r5
 80031e4:	6123      	str	r3, [r4, #16]
 80031e6:	9b07      	ldr	r3, [sp, #28]
 80031e8:	0021      	movs	r1, r4
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	9805      	ldr	r0, [sp, #20]
 80031ee:	9b06      	ldr	r3, [sp, #24]
 80031f0:	aa09      	add	r2, sp, #36	@ 0x24
 80031f2:	f7ff fef5 	bl	8002fe0 <_printf_common>
 80031f6:	3001      	adds	r0, #1
 80031f8:	d148      	bne.n	800328c <_printf_i+0x1cc>
 80031fa:	2001      	movs	r0, #1
 80031fc:	4240      	negs	r0, r0
 80031fe:	b00b      	add	sp, #44	@ 0x2c
 8003200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003202:	2220      	movs	r2, #32
 8003204:	6809      	ldr	r1, [r1, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	6022      	str	r2, [r4, #0]
 800320a:	2278      	movs	r2, #120	@ 0x78
 800320c:	4932      	ldr	r1, [pc, #200]	@ (80032d8 <_printf_i+0x218>)
 800320e:	9104      	str	r1, [sp, #16]
 8003210:	0021      	movs	r1, r4
 8003212:	3145      	adds	r1, #69	@ 0x45
 8003214:	700a      	strb	r2, [r1, #0]
 8003216:	6819      	ldr	r1, [r3, #0]
 8003218:	6822      	ldr	r2, [r4, #0]
 800321a:	c940      	ldmia	r1!, {r6}
 800321c:	0610      	lsls	r0, r2, #24
 800321e:	d402      	bmi.n	8003226 <_printf_i+0x166>
 8003220:	0650      	lsls	r0, r2, #25
 8003222:	d500      	bpl.n	8003226 <_printf_i+0x166>
 8003224:	b2b6      	uxth	r6, r6
 8003226:	6019      	str	r1, [r3, #0]
 8003228:	07d3      	lsls	r3, r2, #31
 800322a:	d502      	bpl.n	8003232 <_printf_i+0x172>
 800322c:	2320      	movs	r3, #32
 800322e:	4313      	orrs	r3, r2
 8003230:	6023      	str	r3, [r4, #0]
 8003232:	2e00      	cmp	r6, #0
 8003234:	d001      	beq.n	800323a <_printf_i+0x17a>
 8003236:	2710      	movs	r7, #16
 8003238:	e7a8      	b.n	800318c <_printf_i+0xcc>
 800323a:	2220      	movs	r2, #32
 800323c:	6823      	ldr	r3, [r4, #0]
 800323e:	4393      	bics	r3, r2
 8003240:	6023      	str	r3, [r4, #0]
 8003242:	e7f8      	b.n	8003236 <_printf_i+0x176>
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	680d      	ldr	r5, [r1, #0]
 8003248:	1d10      	adds	r0, r2, #4
 800324a:	6949      	ldr	r1, [r1, #20]
 800324c:	6018      	str	r0, [r3, #0]
 800324e:	6813      	ldr	r3, [r2, #0]
 8003250:	062e      	lsls	r6, r5, #24
 8003252:	d501      	bpl.n	8003258 <_printf_i+0x198>
 8003254:	6019      	str	r1, [r3, #0]
 8003256:	e002      	b.n	800325e <_printf_i+0x19e>
 8003258:	066d      	lsls	r5, r5, #25
 800325a:	d5fb      	bpl.n	8003254 <_printf_i+0x194>
 800325c:	8019      	strh	r1, [r3, #0]
 800325e:	2300      	movs	r3, #0
 8003260:	9d03      	ldr	r5, [sp, #12]
 8003262:	6123      	str	r3, [r4, #16]
 8003264:	e7bf      	b.n	80031e6 <_printf_i+0x126>
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	1d11      	adds	r1, r2, #4
 800326a:	6019      	str	r1, [r3, #0]
 800326c:	6815      	ldr	r5, [r2, #0]
 800326e:	2100      	movs	r1, #0
 8003270:	0028      	movs	r0, r5
 8003272:	6862      	ldr	r2, [r4, #4]
 8003274:	f000 f858 	bl	8003328 <memchr>
 8003278:	2800      	cmp	r0, #0
 800327a:	d001      	beq.n	8003280 <_printf_i+0x1c0>
 800327c:	1b40      	subs	r0, r0, r5
 800327e:	6060      	str	r0, [r4, #4]
 8003280:	6863      	ldr	r3, [r4, #4]
 8003282:	6123      	str	r3, [r4, #16]
 8003284:	2300      	movs	r3, #0
 8003286:	9a03      	ldr	r2, [sp, #12]
 8003288:	7013      	strb	r3, [r2, #0]
 800328a:	e7ac      	b.n	80031e6 <_printf_i+0x126>
 800328c:	002a      	movs	r2, r5
 800328e:	6923      	ldr	r3, [r4, #16]
 8003290:	9906      	ldr	r1, [sp, #24]
 8003292:	9805      	ldr	r0, [sp, #20]
 8003294:	9d07      	ldr	r5, [sp, #28]
 8003296:	47a8      	blx	r5
 8003298:	3001      	adds	r0, #1
 800329a:	d0ae      	beq.n	80031fa <_printf_i+0x13a>
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	079b      	lsls	r3, r3, #30
 80032a0:	d415      	bmi.n	80032ce <_printf_i+0x20e>
 80032a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032a4:	68e0      	ldr	r0, [r4, #12]
 80032a6:	4298      	cmp	r0, r3
 80032a8:	daa9      	bge.n	80031fe <_printf_i+0x13e>
 80032aa:	0018      	movs	r0, r3
 80032ac:	e7a7      	b.n	80031fe <_printf_i+0x13e>
 80032ae:	0022      	movs	r2, r4
 80032b0:	2301      	movs	r3, #1
 80032b2:	9906      	ldr	r1, [sp, #24]
 80032b4:	9805      	ldr	r0, [sp, #20]
 80032b6:	9e07      	ldr	r6, [sp, #28]
 80032b8:	3219      	adds	r2, #25
 80032ba:	47b0      	blx	r6
 80032bc:	3001      	adds	r0, #1
 80032be:	d09c      	beq.n	80031fa <_printf_i+0x13a>
 80032c0:	3501      	adds	r5, #1
 80032c2:	68e3      	ldr	r3, [r4, #12]
 80032c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	42ab      	cmp	r3, r5
 80032ca:	dcf0      	bgt.n	80032ae <_printf_i+0x1ee>
 80032cc:	e7e9      	b.n	80032a2 <_printf_i+0x1e2>
 80032ce:	2500      	movs	r5, #0
 80032d0:	e7f7      	b.n	80032c2 <_printf_i+0x202>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	08003439 	.word	0x08003439
 80032d8:	0800344a 	.word	0x0800344a

080032dc <memmove>:
 80032dc:	b510      	push	{r4, lr}
 80032de:	4288      	cmp	r0, r1
 80032e0:	d806      	bhi.n	80032f0 <memmove+0x14>
 80032e2:	2300      	movs	r3, #0
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d008      	beq.n	80032fa <memmove+0x1e>
 80032e8:	5ccc      	ldrb	r4, [r1, r3]
 80032ea:	54c4      	strb	r4, [r0, r3]
 80032ec:	3301      	adds	r3, #1
 80032ee:	e7f9      	b.n	80032e4 <memmove+0x8>
 80032f0:	188b      	adds	r3, r1, r2
 80032f2:	4298      	cmp	r0, r3
 80032f4:	d2f5      	bcs.n	80032e2 <memmove+0x6>
 80032f6:	3a01      	subs	r2, #1
 80032f8:	d200      	bcs.n	80032fc <memmove+0x20>
 80032fa:	bd10      	pop	{r4, pc}
 80032fc:	5c8b      	ldrb	r3, [r1, r2]
 80032fe:	5483      	strb	r3, [r0, r2]
 8003300:	e7f9      	b.n	80032f6 <memmove+0x1a>
	...

08003304 <_sbrk_r>:
 8003304:	2300      	movs	r3, #0
 8003306:	b570      	push	{r4, r5, r6, lr}
 8003308:	4d06      	ldr	r5, [pc, #24]	@ (8003324 <_sbrk_r+0x20>)
 800330a:	0004      	movs	r4, r0
 800330c:	0008      	movs	r0, r1
 800330e:	602b      	str	r3, [r5, #0]
 8003310:	f7fd fa0c 	bl	800072c <_sbrk>
 8003314:	1c43      	adds	r3, r0, #1
 8003316:	d103      	bne.n	8003320 <_sbrk_r+0x1c>
 8003318:	682b      	ldr	r3, [r5, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d000      	beq.n	8003320 <_sbrk_r+0x1c>
 800331e:	6023      	str	r3, [r4, #0]
 8003320:	bd70      	pop	{r4, r5, r6, pc}
 8003322:	46c0      	nop			@ (mov r8, r8)
 8003324:	20000240 	.word	0x20000240

08003328 <memchr>:
 8003328:	b2c9      	uxtb	r1, r1
 800332a:	1882      	adds	r2, r0, r2
 800332c:	4290      	cmp	r0, r2
 800332e:	d101      	bne.n	8003334 <memchr+0xc>
 8003330:	2000      	movs	r0, #0
 8003332:	4770      	bx	lr
 8003334:	7803      	ldrb	r3, [r0, #0]
 8003336:	428b      	cmp	r3, r1
 8003338:	d0fb      	beq.n	8003332 <memchr+0xa>
 800333a:	3001      	adds	r0, #1
 800333c:	e7f6      	b.n	800332c <memchr+0x4>

0800333e <memcpy>:
 800333e:	2300      	movs	r3, #0
 8003340:	b510      	push	{r4, lr}
 8003342:	429a      	cmp	r2, r3
 8003344:	d100      	bne.n	8003348 <memcpy+0xa>
 8003346:	bd10      	pop	{r4, pc}
 8003348:	5ccc      	ldrb	r4, [r1, r3]
 800334a:	54c4      	strb	r4, [r0, r3]
 800334c:	3301      	adds	r3, #1
 800334e:	e7f8      	b.n	8003342 <memcpy+0x4>

08003350 <_realloc_r>:
 8003350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003352:	0006      	movs	r6, r0
 8003354:	000c      	movs	r4, r1
 8003356:	0015      	movs	r5, r2
 8003358:	2900      	cmp	r1, #0
 800335a:	d105      	bne.n	8003368 <_realloc_r+0x18>
 800335c:	0011      	movs	r1, r2
 800335e:	f7ff fc51 	bl	8002c04 <_malloc_r>
 8003362:	0004      	movs	r4, r0
 8003364:	0020      	movs	r0, r4
 8003366:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003368:	2a00      	cmp	r2, #0
 800336a:	d103      	bne.n	8003374 <_realloc_r+0x24>
 800336c:	f7ff fbde 	bl	8002b2c <_free_r>
 8003370:	2400      	movs	r4, #0
 8003372:	e7f7      	b.n	8003364 <_realloc_r+0x14>
 8003374:	f000 f81b 	bl	80033ae <_malloc_usable_size_r>
 8003378:	0007      	movs	r7, r0
 800337a:	4285      	cmp	r5, r0
 800337c:	d802      	bhi.n	8003384 <_realloc_r+0x34>
 800337e:	0843      	lsrs	r3, r0, #1
 8003380:	42ab      	cmp	r3, r5
 8003382:	d3ef      	bcc.n	8003364 <_realloc_r+0x14>
 8003384:	0029      	movs	r1, r5
 8003386:	0030      	movs	r0, r6
 8003388:	f7ff fc3c 	bl	8002c04 <_malloc_r>
 800338c:	9001      	str	r0, [sp, #4]
 800338e:	2800      	cmp	r0, #0
 8003390:	d0ee      	beq.n	8003370 <_realloc_r+0x20>
 8003392:	002a      	movs	r2, r5
 8003394:	42bd      	cmp	r5, r7
 8003396:	d900      	bls.n	800339a <_realloc_r+0x4a>
 8003398:	003a      	movs	r2, r7
 800339a:	0021      	movs	r1, r4
 800339c:	9801      	ldr	r0, [sp, #4]
 800339e:	f7ff ffce 	bl	800333e <memcpy>
 80033a2:	0021      	movs	r1, r4
 80033a4:	0030      	movs	r0, r6
 80033a6:	f7ff fbc1 	bl	8002b2c <_free_r>
 80033aa:	9c01      	ldr	r4, [sp, #4]
 80033ac:	e7da      	b.n	8003364 <_realloc_r+0x14>

080033ae <_malloc_usable_size_r>:
 80033ae:	1f0b      	subs	r3, r1, #4
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	1f18      	subs	r0, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	da01      	bge.n	80033bc <_malloc_usable_size_r+0xe>
 80033b8:	580b      	ldr	r3, [r1, r0]
 80033ba:	18c0      	adds	r0, r0, r3
 80033bc:	4770      	bx	lr
	...

080033c0 <_init>:
 80033c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c2:	46c0      	nop			@ (mov r8, r8)
 80033c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033c6:	bc08      	pop	{r3}
 80033c8:	469e      	mov	lr, r3
 80033ca:	4770      	bx	lr

080033cc <_fini>:
 80033cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ce:	46c0      	nop			@ (mov r8, r8)
 80033d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033d2:	bc08      	pop	{r3}
 80033d4:	469e      	mov	lr, r3
 80033d6:	4770      	bx	lr
