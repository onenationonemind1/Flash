/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define DATA_FLASH_PAGE_ADDR     (0x08000000 + 31*2048)
volatile uint8_t timer_flag = 0;
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

/* USER CODE BEGIN PV */
  // AM1002 데이터 구조체
  // AM1002 데이터 구조체 정의
typedef struct {
    uint16_t tvoc;           // TVOC concentration (ppb)
   uint16_t pm1_0;         // PM1.0 (μg/m3)
   uint16_t pm2_5;         // PM2.5 (μg/m3)
    uint16_t pm10;          // PM10 (μg/m3)
    int16_t temperature;    // Temperature (°C * 10)
    uint16_t humidity;      // Humidity (% * 10)
} AM1002_Data_t;


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if(htim->Instance == TIM2)
    {
        timer_flag = 1;
    }
}


uint16_t ReadDataFromFlashAt(uint16_t index);  // 여기에 추가

// UART 핸들러가 huart1이라고 가정
void transmitSensorData(UART_HandleTypeDef *huart, uint16_t *data, uint8_t length) {
    uint8_t txBuffer[2];  // 16비트 값을 8비트씩 나누어 전송하기 위한 버퍼
    
    for(uint8_t i = 0; i < length; i++) {
        // 상위 8비트 전송
        txBuffer[0] = (uint8_t)(data[i] >> 8);
        HAL_UART_Transmit(huart, &txBuffer[0], 1, HAL_MAX_DELAY);
        
        // 하위 8비트 전송
        txBuffer[1] = (uint8_t)(data[i] & 0xFF);
        HAL_UART_Transmit(huart, &txBuffer[1], 1, HAL_MAX_DELAY);
    }
}

// 데이터 쓰기 함수
HAL_StatusTypeDef WriteDataToFlash(uint16_t data) {
    HAL_FLASH_Unlock();
    
    // 페이지 지우기
    FLASH_EraseInitTypeDef EraseInit;
    EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
    EraseInit.PageAddress = DATA_FLASH_PAGE_ADDR;
    EraseInit.NbPages = 1;
    
    uint32_t PageError;
    if(HAL_FLASHEx_Erase(&EraseInit, &PageError) != HAL_OK) {
        HAL_FLASH_Lock();
        return HAL_ERROR;
    }
    
    // 데이터 쓰기
    if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DATA_FLASH_PAGE_ADDR, data) != HAL_OK) {
        HAL_FLASH_Lock();
        return HAL_ERROR;
    }
    
    HAL_FLASH_Lock();
    return HAL_OK;
}

// 데이터 읽기 함수
uint16_t ReadDataFromFlash(void) {
    return *(__IO uint16_t*)DATA_FLASH_PAGE_ADDR;
}

// 여러 위치에 데이터 쓰기
HAL_StatusTypeDef WriteMultiDataToFlash(uint16_t* data, uint16_t count) {
    HAL_FLASH_Unlock();
    
    // 페이지 지우기
    FLASH_EraseInitTypeDef EraseInit;
    EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
    EraseInit.PageAddress = DATA_FLASH_PAGE_ADDR;
    EraseInit.NbPages = 1;
    
    uint32_t PageError;
    if(HAL_FLASHEx_Erase(&EraseInit, &PageError) != HAL_OK) {
        HAL_FLASH_Lock();
        return HAL_ERROR;
    }
    
    // 여러 데이터 쓰기
    for(uint32_t i = 0; i < count; i++) {
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, 
                          DATA_FLASH_PAGE_ADDR + (i * 2), // 2바이트씩 증가
                          data[i]) != HAL_OK) {
            HAL_FLASH_Lock();
            return HAL_ERROR;
        }
    }
    
    HAL_FLASH_Lock();
    return HAL_OK;
}

// 여러위치에 데이터 쓰기 - 구조체
void multiDatawrite(AM1002_Data_t data)
{
    uint16_t multiData[6] = {data.tvoc, data.pm1_0, data.pm2_5, data.pm10, (uint16_t)data.temperature, data.humidity};
    if(WriteMultiDataToFlash(multiData, 6) == HAL_OK) {

        transmitSensorData(&huart3, multiData, 0);
        transmitSensorData(&huart3, multiData, 1);
        transmitSensorData(&huart3, multiData, 2);
        transmitSensorData(&huart3, multiData, 3);
        transmitSensorData(&huart3, multiData, 4);
        transmitSensorData(&huart3, multiData, 5);
        HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);

        // 데이터 읽기
        for(int i = 0; i < 6; i++) {
            uint16_t readData = ReadDataFromFlashAt(i);
            char debug_msg[50];
            sprintf(debug_msg, "Read[%d]: 0x%04X\r\n", i, readData);
            HAL_UART_Transmit(&huart3, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
        }
    }
}

// 여러 데이터 읽기 - 구조체
void multiDataread(AM1002_Data_t* data)
{
    uint16_t readData[6];
    for(int i = 0; i < 6; i++) {
        readData[i] = ReadDataFromFlashAt(i);
        char debug_msg[50];
        sprintf(debug_msg, "Read[%d]: 0x%04X\r\n", i, readData[i]);
        HAL_UART_Transmit(&huart3, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
    }
    
    data->tvoc = readData[0];
    data->pm1_0 = readData[1];
    data->pm2_5 = readData[2];
    data->pm10 = readData[3];
    data->temperature = readData[4];
    data->humidity = readData[5];
}

// 특정 위치의 데이터 읽기 !
uint16_t ReadDataFromFlashAt(uint16_t index) {
    return *(__IO uint16_t*)(DATA_FLASH_PAGE_ADDR + (index * 2));
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */


  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART1_UART_Init();
  MX_USART3_UART_Init();
  MX_USART2_UART_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */

  //timer interrupt start
  HAL_TIM_Base_Start_IT(&htim2);

  #define doYouWantToWrite 1
  #define yes 1
  #define no 0

  // 단일 테스트 데이터 쓰기 (예: 0x12345678)
  #if (doYouWantToWrite == no)
  uint16_t testData = 0x6789;
  if(WriteDataToFlash(testData) == HAL_OK) {
      // 데이터 읽기
      uint16_t readData = ReadDataFromFlash();
      
      // UART3으로 결과 전송 (디버깅용)
      char debug_msg[20];
      sprintf(debug_msg, "Read: 0x%04X\r\n", readData);
      HAL_UART_Transmit(&huart3, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
  }
  else {
      // 데이터 쓰기 실패
      HAL_UART_Transmit(&huart3, (uint8_t*)"Write failed\r\n", 14, HAL_MAX_DELAY);
  }
  // 단일 테스트 데이터 읽기 (예: 0x12345678)
  uint16_t readData = ReadDataFromFlash();
  HAL_UART_Transmit(&huart3, (uint8_t*)"#1read single data\r\n", 20, HAL_MAX_DELAY);
  char debug_msg[20];
  sprintf(debug_msg, "Read: 0x%04X\r\n", readData);
  HAL_UART_Transmit(&huart3, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
  #endif


  // 여러개의 multi 데이터 쓰기
  #if (doYouWantToWrite == no)
  uint16_t multiData[6] = {0x1111, 0x2222, 0x3333, 0x4444, 0x5555, 0x6666};
  if(WriteMultiDataToFlash(multiData, 6) == HAL_OK) {
      // 데이터 읽기
      HAL_UART_Transmit(&huart3, (uint8_t*)"#2read multi data\r\n", 20, HAL_MAX_DELAY);
      for(int i = 0; i < 6; i++) {
          uint16_t readData = ReadDataFromFlashAt(i);
          char debug_msg[50];
          sprintf(debug_msg, "Read[%d]: 0x%04X\r\n", i, readData);
          HAL_UART_Transmit(&huart3, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
      }
  }
  #endif


// AM1002 데이터 처리 함수
AM1002_Data_t ProcessAM1002Data(uint8_t* data, AM1002_Data_t* result) {

    // 실제 데이터는 시작 바이트(16 13 16) 이후부터 시작
    uint8_t* actual_data = data + 3;
    
    // TVOC 계산 (DF1 DF2)
    result->tvoc = (uint16_t)(actual_data[0] << 8 | actual_data[1]);
    
    // PM1.0 계산 (DF5 DF6)
    result->pm1_0 = (uint16_t)(actual_data[4] << 8 | actual_data[5]);
    
    // PM2.5 계산 (DF7 DF8)
    result->pm2_5 = (uint16_t)(actual_data[6] << 8 | actual_data[7]);
    
    // PM10 계산 (DF9 DF10)
    result->pm10 = (uint16_t)(actual_data[8] << 8 | actual_data[9]);
    
    // 온도 계산 (DF11 DF12) ((DF11*256^1 + DF12)-500）/ 10
    uint16_t temp_raw = (uint16_t)(actual_data[10] << 8 | actual_data[11]);
    result->temperature = (int16_t)(temp_raw - 500); // 10배 값을 저장
    
    // 습도 계산 (DF13 DF14) ((DF13*256^1 + DF14))
    result->humidity = (uint16_t)(actual_data[12] << 8 | actual_data[13]); // 10배 값을 저장

    return *result;
}

// UART로 데이터 출력하는 함수
void PrintAM1002Data(UART_HandleTypeDef* huart, AM1002_Data_t* data) {
    char buffer[32];
    
    sprintf(buffer, "TVOC: %d ppb\r\n", data->tvoc);
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    
    sprintf(buffer, "PM1.0: %d ug/m3\r\n", data->pm1_0);
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    
    sprintf(buffer, "PM2.5: %d ug/m3\r\n", data->pm2_5);
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    
    sprintf(buffer, "PM10: %d ug/m3\r\n", data->pm10);
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    
    // 온도는 10배 값이므로 정수부와 소수부를 분리하여 출력
    sprintf(buffer, "Temperature: %d.%d C\r\n", data->temperature/10, abs(data->temperature%10));
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    
    // 습도는 10배 값이므로 정수부와 소수부를 분리하여 출력
    sprintf(buffer, "Humidity: %d.%d %%\r\n", data->humidity/10, data->humidity%10);
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    
    HAL_UART_Transmit(huart, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
}

// main.c의 while(1) 루프 내에서 사용할 코드
AM1002_Data_t ProcessAndPrintAM1002(UART_HandleTypeDef* huart, uint8_t* rx_buffer) {
    AM1002_Data_t sensorData;
    AM1002_Data_t result = ProcessAM1002Data(rx_buffer, &sensorData);
    PrintAM1002Data(huart, &sensorData);
    
    return result;
}


// 데이터 초기화 => 0x000000
AM1002_Data_t previousData;
#if(1) 
memset(&previousData, 0 , sizeof(previousData));
multiDatawrite(previousData);
#endif

// 초기 데이터 읽기
#if(1)
HAL_UART_Transmit(&huart3, (uint8_t*)"read init data\r\n", 16, HAL_MAX_DELAY);
multiDataread(&previousData);
PrintAM1002Data(&huart3, &previousData);
#endif

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t rx_data;
  uint8_t cmd[] = {0x11, 0x01, 0x16, 0xD8};
  uint8_t rx_buffer[32];
  int counter = 0;
  // 빈 구조체 
  AM1002_Data_t recentData;
  while (1)
  {

    if(timer_flag)
    {
      // 버퍼 초기화
      memset(rx_buffer, 0, sizeof(rx_buffer));
      
      HAL_UART_Transmit(&huart2, cmd, sizeof(cmd), HAL_MAX_DELAY);
      
      // Response：16 13 16 DF1~DF18 [CS]
      // 응답은 총 22바이트 (시작바이트 0x16 + 길이 0x13 + 명령 0x16 + 데이터 18바이트 + 체크섬)
      HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, rx_buffer, 22, 1000);
      
      if (status == HAL_OK) {
          // 데이터 수신 확인을 위한 디버그 출력
          char debug[100];
          sprintf(debug, "Raw Data: ");
          HAL_UART_Transmit(&huart3, (uint8_t*)debug, strlen(debug), HAL_MAX_DELAY);
          
          for(int i = 0; i < 22; i++) {
              sprintf(debug, "%02X ", rx_buffer[i]);
              HAL_UART_Transmit(&huart3, (uint8_t*)debug, strlen(debug), HAL_MAX_DELAY);
          }
          HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
          
          // 시작 바이트와 길이, 명령어 확인
          if(rx_buffer[0] == 0x16 && rx_buffer[1] == 0x13 && rx_buffer[2] == 0x16) {
              recentData = ProcessAndPrintAM1002(&huart3, rx_buffer);
          } else {
              HAL_UART_Transmit(&huart3, (uint8_t*)"Invalid response format\r\n", 23, HAL_MAX_DELAY);
          }
      } else {
          HAL_UART_Transmit(&huart3, (uint8_t*)"No response\r\n", 12, HAL_MAX_DELAY);
      }

      if (recentData.humidity > previousData.humidity && counter > 10){
        HAL_UART_Transmit(&huart3, (uint8_t*)"recent data is\r\n", 18, HAL_MAX_DELAY);
        transmitSensorData(&huart3, &recentData, 0);
                HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
          transmitSensorData(&huart3, &recentData, 1);
                        HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
          transmitSensorData(&huart3, &recentData, 2);
          HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
          transmitSensorData(&huart3, &recentData, 3);
          HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
          transmitSensorData(&huart3, &recentData, 4);
          HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
          transmitSensorData(&huart3, &recentData, 5);
          HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
        multiDatawrite(recentData);
        counter = 0;
      }
      
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
      timer_flag = 0;
      counter++;
    }


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 4799;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 9999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 9600;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
